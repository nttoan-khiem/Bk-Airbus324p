
TranHoangQuan_Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00003312  000033a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003312  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  008001ce  008001ce  00003474  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bd5  00000000  00000000  000036ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000097d  00000000  00000000  00007281  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000306f  00000000  00000000  00007bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  0000ac70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e2  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002778  00000000  00000000  0000baba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  0000e232  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_1>
       8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_2>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 e1       	ldi	r30, 0x12	; 18
      90:	f3 e3       	ldi	r31, 0x33	; 51
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 3c       	cpi	r26, 0xCE	; 206
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ae ec       	ldi	r26, 0xCE	; 206
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 31       	cpi	r26, 0x16	; 22
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 29 19 	call	0x3252	; 0x3252 <main>
      b2:	0c 94 87 19 	jmp	0x330e	; 0x330e <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_18>:
}
void logicPortD(unsigned char pin, char logic){
	if(logic){
		PORTD |= (1<<pin);
	}else{
		PORTD &= ~(1<<pin);
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	8f 93       	push	r24
      c6:	9f 93       	push	r25
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
      cc:	83 e6       	ldi	r24, 0x63	; 99
      ce:	86 bd       	out	0x26, r24	; 38
      d0:	e2 e0       	ldi	r30, 0x02	; 2
      d2:	f2 e0       	ldi	r31, 0x02	; 2
      d4:	80 81       	ld	r24, Z
      d6:	8f 5f       	subi	r24, 0xFF	; 255
      d8:	80 83       	st	Z, r24
      da:	84 36       	cpi	r24, 0x64	; 100
      dc:	70 f1       	brcs	.+92     	; 0x13a <__vector_18+0x80>
      de:	10 82       	st	Z, r1
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <g_changeSec>
      e6:	81 81       	ldd	r24, Z+1	; 0x01
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	81 83       	std	Z+1, r24	; 0x01
      ec:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <__data_end>
      f0:	99 23       	and	r25, r25
      f2:	19 f0       	breq	.+6      	; 0xfa <__vector_18+0x40>
      f4:	91 50       	subi	r25, 0x01	; 1
      f6:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <__data_end>
      fa:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <g_remainState>
      fe:	99 23       	and	r25, r25
     100:	19 f0       	breq	.+6      	; 0x108 <__vector_18+0x4e>
     102:	91 50       	subi	r25, 0x01	; 1
     104:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <g_remainState>
     108:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <g_remainLcd>
     10c:	99 23       	and	r25, r25
     10e:	19 f0       	breq	.+6      	; 0x116 <__vector_18+0x5c>
     110:	91 50       	subi	r25, 0x01	; 1
     112:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <g_remainLcd>
     116:	8c 33       	cpi	r24, 0x3C	; 60
     118:	80 f0       	brcs	.+32     	; 0x13a <__vector_18+0x80>
     11a:	e2 e0       	ldi	r30, 0x02	; 2
     11c:	f2 e0       	ldi	r31, 0x02	; 2
     11e:	11 82       	std	Z+1, r1	; 0x01
     120:	82 81       	ldd	r24, Z+2	; 0x02
     122:	8f 5f       	subi	r24, 0xFF	; 255
     124:	82 83       	std	Z+2, r24	; 0x02
     126:	8c 33       	cpi	r24, 0x3C	; 60
     128:	40 f0       	brcs	.+16     	; 0x13a <__vector_18+0x80>
     12a:	12 82       	std	Z+2, r1	; 0x02
     12c:	83 81       	ldd	r24, Z+3	; 0x03
     12e:	8f 5f       	subi	r24, 0xFF	; 255
     130:	83 83       	std	Z+3, r24	; 0x03
     132:	88 31       	cpi	r24, 0x18	; 24
     134:	10 f0       	brcs	.+4      	; 0x13a <__vector_18+0x80>
     136:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <g_timeSys+0x3>
     13a:	ff 91       	pop	r31
     13c:	ef 91       	pop	r30
     13e:	9f 91       	pop	r25
     140:	8f 91       	pop	r24
     142:	0f 90       	pop	r0
     144:	0f be       	out	0x3f, r0	; 63
     146:	0f 90       	pop	r0
     148:	1f 90       	pop	r1
     14a:	18 95       	reti

0000014c <checkCode>:
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	0f c0       	rjmp	.+30     	; 0x16e <checkCode+0x22>
     150:	82 2f       	mov	r24, r18
     152:	02 2e       	mov	r0, r18
     154:	00 0c       	add	r0, r0
     156:	99 0b       	sbc	r25, r25
     158:	fc 01       	movw	r30, r24
     15a:	e7 51       	subi	r30, 0x17	; 23
     15c:	fe 4f       	sbci	r31, 0xFE	; 254
     15e:	30 81       	ld	r19, Z
     160:	fc 01       	movw	r30, r24
     162:	e6 5f       	subi	r30, 0xF6	; 246
     164:	fe 4f       	sbci	r31, 0xFE	; 254
     166:	80 81       	ld	r24, Z
     168:	38 13       	cpse	r19, r24
     16a:	05 c0       	rjmp	.+10     	; 0x176 <checkCode+0x2a>
     16c:	2f 5f       	subi	r18, 0xFF	; 255
     16e:	24 30       	cpi	r18, 0x04	; 4
     170:	7c f3       	brlt	.-34     	; 0x150 <checkCode+0x4>
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	08 95       	ret
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	08 95       	ret

0000017a <remainTimeTen>:
     17a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
     17e:	9d ec       	ldi	r25, 0xCD	; 205
     180:	89 9f       	mul	r24, r25
     182:	81 2d       	mov	r24, r1
     184:	11 24       	eor	r1, r1
     186:	86 95       	lsr	r24
     188:	86 95       	lsr	r24
     18a:	86 95       	lsr	r24
     18c:	08 95       	ret

0000018e <remainTimeUnit>:
     18e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
     192:	9d ec       	ldi	r25, 0xCD	; 205
     194:	89 9f       	mul	r24, r25
     196:	91 2d       	mov	r25, r1
     198:	11 24       	eor	r1, r1
     19a:	96 95       	lsr	r25
     19c:	96 95       	lsr	r25
     19e:	96 95       	lsr	r25
     1a0:	99 0f       	add	r25, r25
     1a2:	29 2f       	mov	r18, r25
     1a4:	22 0f       	add	r18, r18
     1a6:	22 0f       	add	r18, r18
     1a8:	92 0f       	add	r25, r18
     1aa:	89 1b       	sub	r24, r25
     1ac:	08 95       	ret

000001ae <setErrorData>:
     1ae:	e2 ef       	ldi	r30, 0xF2	; 242
     1b0:	f1 e0       	ldi	r31, 0x01	; 1
     1b2:	8d e4       	ldi	r24, 0x4D	; 77
     1b4:	80 83       	st	Z, r24
     1b6:	8f e6       	ldi	r24, 0x6F	; 111
     1b8:	81 83       	std	Z+1, r24	; 0x01
     1ba:	84 e6       	ldi	r24, 0x64	; 100
     1bc:	82 83       	std	Z+2, r24	; 0x02
     1be:	85 e7       	ldi	r24, 0x75	; 117
     1c0:	83 83       	std	Z+3, r24	; 0x03
     1c2:	8c e6       	ldi	r24, 0x6C	; 108
     1c4:	84 83       	std	Z+4, r24	; 0x04
     1c6:	85 e6       	ldi	r24, 0x65	; 101
     1c8:	85 83       	std	Z+5, r24	; 0x05
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	86 83       	std	Z+6, r24	; 0x06
     1ce:	99 e6       	ldi	r25, 0x69	; 105
     1d0:	97 83       	std	Z+7, r25	; 0x07
     1d2:	93 e7       	ldi	r25, 0x73	; 115
     1d4:	90 87       	std	Z+8, r25	; 0x08
     1d6:	81 87       	std	Z+9, r24	; 0x09
     1d8:	95 e4       	ldi	r25, 0x45	; 69
     1da:	92 87       	std	Z+10, r25	; 0x0a
     1dc:	92 e5       	ldi	r25, 0x52	; 82
     1de:	93 87       	std	Z+11, r25	; 0x0b
     1e0:	94 87       	std	Z+12, r25	; 0x0c
     1e2:	2f e4       	ldi	r18, 0x4F	; 79
     1e4:	25 87       	std	Z+13, r18	; 0x0d
     1e6:	96 87       	std	Z+14, r25	; 0x0e
     1e8:	87 87       	std	Z+15, r24	; 0x0f
     1ea:	08 95       	ret

000001ec <setNormalData>:
     1ec:	e2 ef       	ldi	r30, 0xF2	; 242
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	8d e4       	ldi	r24, 0x4D	; 77
     1f2:	80 83       	st	Z, r24
     1f4:	9f e6       	ldi	r25, 0x6F	; 111
     1f6:	91 83       	std	Z+1, r25	; 0x01
     1f8:	84 e6       	ldi	r24, 0x64	; 100
     1fa:	82 83       	std	Z+2, r24	; 0x02
     1fc:	85 e7       	ldi	r24, 0x75	; 117
     1fe:	83 83       	std	Z+3, r24	; 0x03
     200:	8c e6       	ldi	r24, 0x6C	; 108
     202:	84 83       	std	Z+4, r24	; 0x04
     204:	25 e6       	ldi	r18, 0x65	; 101
     206:	25 83       	std	Z+5, r18	; 0x05
     208:	20 e2       	ldi	r18, 0x20	; 32
     20a:	26 83       	std	Z+6, r18	; 0x06
     20c:	39 e6       	ldi	r19, 0x69	; 105
     20e:	37 83       	std	Z+7, r19	; 0x07
     210:	33 e7       	ldi	r19, 0x73	; 115
     212:	30 87       	std	Z+8, r19	; 0x08
     214:	21 87       	std	Z+9, r18	; 0x09
     216:	2e e6       	ldi	r18, 0x6E	; 110
     218:	22 87       	std	Z+10, r18	; 0x0a
     21a:	93 87       	std	Z+11, r25	; 0x0b
     21c:	92 e7       	ldi	r25, 0x72	; 114
     21e:	94 87       	std	Z+12, r25	; 0x0c
     220:	9d e6       	ldi	r25, 0x6D	; 109
     222:	95 87       	std	Z+13, r25	; 0x0d
     224:	91 e6       	ldi	r25, 0x61	; 97
     226:	96 87       	std	Z+14, r25	; 0x0e
     228:	87 87       	std	Z+15, r24	; 0x0f
     22a:	08 95       	ret

0000022c <checkError>:
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 c0       	rjmp	.+16     	; 0x244 <checkError+0x18>
     234:	e8 2f       	mov	r30, r24
     236:	f0 e0       	ldi	r31, 0x00	; 0
     238:	ef 51       	subi	r30, 0x1F	; 31
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	90 81       	ld	r25, Z
     23e:	29 0f       	add	r18, r25
     240:	31 1d       	adc	r19, r1
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	84 30       	cpi	r24, 0x04	; 4
     246:	b0 f3       	brcs	.-20     	; 0x234 <checkError+0x8>
     248:	23 2b       	or	r18, r19
     24a:	11 f0       	breq	.+4      	; 0x250 <checkError+0x24>
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	08 95       	ret
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	08 95       	ret

00000254 <USART_Transmit>:
     254:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     258:	95 ff       	sbrs	r25, 5
     25a:	fc cf       	rjmp	.-8      	; 0x254 <USART_Transmit>
     25c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     260:	08 95       	ret

00000262 <USART_TransmitTime>:
     262:	1f 93       	push	r17
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	65 97       	sbiw	r28, 0x15	; 21
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	85 e1       	ldi	r24, 0x15	; 21
     27a:	ee e0       	ldi	r30, 0x0E	; 14
     27c:	f1 e0       	ldi	r31, 0x01	; 1
     27e:	de 01       	movw	r26, r28
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	01 90       	ld	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	8a 95       	dec	r24
     288:	e1 f7       	brne	.-8      	; 0x282 <USART_TransmitTime+0x20>
     28a:	e2 e0       	ldi	r30, 0x02	; 2
     28c:	f2 e0       	ldi	r31, 0x02	; 2
     28e:	23 81       	ldd	r18, Z+3	; 0x03
     290:	8d ec       	ldi	r24, 0xCD	; 205
     292:	28 9f       	mul	r18, r24
     294:	91 2d       	mov	r25, r1
     296:	11 24       	eor	r1, r1
     298:	96 95       	lsr	r25
     29a:	96 95       	lsr	r25
     29c:	96 95       	lsr	r25
     29e:	30 e3       	ldi	r19, 0x30	; 48
     2a0:	39 0f       	add	r19, r25
     2a2:	39 87       	std	Y+9, r19	; 0x09
     2a4:	99 0f       	add	r25, r25
     2a6:	39 2f       	mov	r19, r25
     2a8:	33 0f       	add	r19, r19
     2aa:	33 0f       	add	r19, r19
     2ac:	93 0f       	add	r25, r19
     2ae:	29 1b       	sub	r18, r25
     2b0:	20 5d       	subi	r18, 0xD0	; 208
     2b2:	2a 87       	std	Y+10, r18	; 0x0a
     2b4:	22 81       	ldd	r18, Z+2	; 0x02
     2b6:	28 9f       	mul	r18, r24
     2b8:	91 2d       	mov	r25, r1
     2ba:	11 24       	eor	r1, r1
     2bc:	96 95       	lsr	r25
     2be:	96 95       	lsr	r25
     2c0:	96 95       	lsr	r25
     2c2:	30 e3       	ldi	r19, 0x30	; 48
     2c4:	39 0f       	add	r19, r25
     2c6:	3c 87       	std	Y+12, r19	; 0x0c
     2c8:	99 0f       	add	r25, r25
     2ca:	39 2f       	mov	r19, r25
     2cc:	33 0f       	add	r19, r19
     2ce:	33 0f       	add	r19, r19
     2d0:	93 0f       	add	r25, r19
     2d2:	29 1b       	sub	r18, r25
     2d4:	20 5d       	subi	r18, 0xD0	; 208
     2d6:	2d 87       	std	Y+13, r18	; 0x0d
     2d8:	91 81       	ldd	r25, Z+1	; 0x01
     2da:	98 9f       	mul	r25, r24
     2dc:	81 2d       	mov	r24, r1
     2de:	11 24       	eor	r1, r1
     2e0:	86 95       	lsr	r24
     2e2:	86 95       	lsr	r24
     2e4:	86 95       	lsr	r24
     2e6:	20 e3       	ldi	r18, 0x30	; 48
     2e8:	28 0f       	add	r18, r24
     2ea:	2f 87       	std	Y+15, r18	; 0x0f
     2ec:	88 0f       	add	r24, r24
     2ee:	28 2f       	mov	r18, r24
     2f0:	22 0f       	add	r18, r18
     2f2:	22 0f       	add	r18, r18
     2f4:	82 0f       	add	r24, r18
     2f6:	98 1b       	sub	r25, r24
     2f8:	90 5d       	subi	r25, 0xD0	; 208
     2fa:	98 8b       	std	Y+16, r25	; 0x10
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	0a c0       	rjmp	.+20     	; 0x314 <USART_TransmitTime+0xb2>
     300:	e1 e0       	ldi	r30, 0x01	; 1
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	ec 0f       	add	r30, r28
     306:	fd 1f       	adc	r31, r29
     308:	e1 0f       	add	r30, r17
     30a:	f1 1d       	adc	r31, r1
     30c:	80 81       	ld	r24, Z
     30e:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
     312:	1f 5f       	subi	r17, 0xFF	; 255
     314:	14 31       	cpi	r17, 0x14	; 20
     316:	a0 f3       	brcs	.-24     	; 0x300 <USART_TransmitTime+0x9e>
     318:	65 96       	adiw	r28, 0x15	; 21
     31a:	0f b6       	in	r0, 0x3f	; 63
     31c:	f8 94       	cli
     31e:	de bf       	out	0x3e, r29	; 62
     320:	0f be       	out	0x3f, r0	; 63
     322:	cd bf       	out	0x3d, r28	; 61
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	08 95       	ret

0000032c <logicPortA>:
     32c:	66 23       	and	r22, r22
     32e:	69 f0       	breq	.+26     	; 0x34a <logicPortA+0x1e>
     330:	42 b1       	in	r20, 0x02	; 2
     332:	21 e0       	ldi	r18, 0x01	; 1
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	b9 01       	movw	r22, r18
     338:	02 c0       	rjmp	.+4      	; 0x33e <logicPortA+0x12>
     33a:	66 0f       	add	r22, r22
     33c:	77 1f       	adc	r23, r23
     33e:	8a 95       	dec	r24
     340:	e2 f7       	brpl	.-8      	; 0x33a <logicPortA+0xe>
     342:	cb 01       	movw	r24, r22
     344:	84 2b       	or	r24, r20
     346:	82 b9       	out	0x02, r24	; 2
     348:	08 95       	ret
     34a:	42 b1       	in	r20, 0x02	; 2
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	b9 01       	movw	r22, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <logicPortA+0x2c>
     354:	66 0f       	add	r22, r22
     356:	77 1f       	adc	r23, r23
     358:	8a 95       	dec	r24
     35a:	e2 f7       	brpl	.-8      	; 0x354 <logicPortA+0x28>
     35c:	cb 01       	movw	r24, r22
     35e:	80 95       	com	r24
     360:	84 23       	and	r24, r20
     362:	82 b9       	out	0x02, r24	; 2
     364:	08 95       	ret

00000366 <ledAllow>:
     366:	88 23       	and	r24, r24
     368:	29 f0       	breq	.+10     	; 0x374 <ledAllow+0xe>
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     372:	08 95       	ret
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     37c:	08 95       	ret

0000037e <ledDenied>:
     37e:	88 23       	and	r24, r24
     380:	29 f0       	breq	.+10     	; 0x38c <ledDenied+0xe>
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     38a:	08 95       	ret
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	82 e0       	ldi	r24, 0x02	; 2
     390:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     394:	08 95       	ret

00000396 <ledLock>:
     396:	88 23       	and	r24, r24
     398:	29 f0       	breq	.+10     	; 0x3a4 <ledLock+0xe>
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3a2:	08 95       	ret
     3a4:	60 e0       	ldi	r22, 0x00	; 0
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3ac:	08 95       	ret

000003ae <ledUnlock>:
     3ae:	88 23       	and	r24, r24
     3b0:	29 f0       	breq	.+10     	; 0x3bc <ledUnlock+0xe>
     3b2:	61 e0       	ldi	r22, 0x01	; 1
     3b4:	84 e0       	ldi	r24, 0x04	; 4
     3b6:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3ba:	08 95       	ret
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	84 e0       	ldi	r24, 0x04	; 4
     3c0:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3c4:	08 95       	ret

000003c6 <buzzer>:
     3c6:	88 23       	and	r24, r24
     3c8:	29 f0       	breq	.+10     	; 0x3d4 <buzzer+0xe>
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3d2:	08 95       	ret
     3d4:	60 e0       	ldi	r22, 0x00	; 0
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 96 01 	call	0x32c	; 0x32c <logicPortA>
     3dc:	08 95       	ret

000003de <soundPushButton>:
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
     3e4:	2f e7       	ldi	r18, 0x7F	; 127
     3e6:	88 e3       	ldi	r24, 0x38	; 56
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	21 50       	subi	r18, 0x01	; 1
     3ec:	80 40       	sbci	r24, 0x00	; 0
     3ee:	90 40       	sbci	r25, 0x00	; 0
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <soundPushButton+0xc>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <soundPushButton+0x16>
     3f4:	00 00       	nop
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
     3fc:	08 95       	ret

000003fe <logicPortB>:
     3fe:	66 23       	and	r22, r22
     400:	69 f0       	breq	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     402:	45 b1       	in	r20, 0x05	; 5
     404:	21 e0       	ldi	r18, 0x01	; 1
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	b9 01       	movw	r22, r18
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40c:	66 0f       	add	r22, r22
     40e:	77 1f       	adc	r23, r23
     410:	8a 95       	dec	r24
     412:	e2 f7       	brpl	.-8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     414:	cb 01       	movw	r24, r22
     416:	84 2b       	or	r24, r20
     418:	85 b9       	out	0x05, r24	; 5
     41a:	08 95       	ret
     41c:	45 b1       	in	r20, 0x05	; 5
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	b9 01       	movw	r22, r18
     424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     426:	66 0f       	add	r22, r22
     428:	77 1f       	adc	r23, r23
     42a:	8a 95       	dec	r24
     42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     42e:	cb 01       	movw	r24, r22
     430:	80 95       	com	r24
     432:	84 23       	and	r24, r20
     434:	85 b9       	out	0x05, r24	; 5
     436:	08 95       	ret

00000438 <scanKeyOutside>:
     438:	85 b1       	in	r24, 0x05	; 5
     43a:	8f 60       	ori	r24, 0x0F	; 15
     43c:	85 b9       	out	0x05, r24	; 5
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     446:	82 e0       	ldi	r24, 0x02	; 2
     448:	8a 95       	dec	r24
     44a:	f1 f7       	brne	.-4      	; 0x448 <scanKeyOutside+0x10>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <scanKeyOutside+0x16>
     44e:	1d 99       	sbic	0x03, 5	; 3
     450:	0c c0       	rjmp	.+24     	; 0x46a <scanKeyOutside+0x32>
     452:	8f e3       	ldi	r24, 0x3F	; 63
     454:	9c e9       	ldi	r25, 0x9C	; 156
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <scanKeyOutside+0x1e>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <scanKeyOutside+0x24>
     45c:	00 00       	nop
     45e:	1d 9b       	sbis	0x03, 5	; 3
     460:	fe cf       	rjmp	.-4      	; 0x45e <scanKeyOutside+0x26>
     462:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     466:	81 e3       	ldi	r24, 0x31	; 49
     468:	08 95       	ret
     46a:	1e 99       	sbic	0x03, 6	; 3
     46c:	0c c0       	rjmp	.+24     	; 0x486 <scanKeyOutside+0x4e>
     46e:	8f e3       	ldi	r24, 0x3F	; 63
     470:	9c e9       	ldi	r25, 0x9C	; 156
     472:	01 97       	sbiw	r24, 0x01	; 1
     474:	f1 f7       	brne	.-4      	; 0x472 <scanKeyOutside+0x3a>
     476:	00 c0       	rjmp	.+0      	; 0x478 <scanKeyOutside+0x40>
     478:	00 00       	nop
     47a:	1e 9b       	sbis	0x03, 6	; 3
     47c:	fe cf       	rjmp	.-4      	; 0x47a <scanKeyOutside+0x42>
     47e:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     482:	82 e3       	ldi	r24, 0x32	; 50
     484:	08 95       	ret
     486:	1f 99       	sbic	0x03, 7	; 3
     488:	0c c0       	rjmp	.+24     	; 0x4a2 <scanKeyOutside+0x6a>
     48a:	8f e3       	ldi	r24, 0x3F	; 63
     48c:	9c e9       	ldi	r25, 0x9C	; 156
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <scanKeyOutside+0x56>
     492:	00 c0       	rjmp	.+0      	; 0x494 <scanKeyOutside+0x5c>
     494:	00 00       	nop
     496:	1f 9b       	sbis	0x03, 7	; 3
     498:	fe cf       	rjmp	.-4      	; 0x496 <scanKeyOutside+0x5e>
     49a:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     49e:	83 e3       	ldi	r24, 0x33	; 51
     4a0:	08 95       	ret
     4a2:	85 b1       	in	r24, 0x05	; 5
     4a4:	8f 60       	ori	r24, 0x0F	; 15
     4a6:	85 b9       	out	0x05, r24	; 5
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	9a 95       	dec	r25
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <scanKeyOutside+0x7a>
     4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <scanKeyOutside+0x80>
     4b8:	1d 99       	sbic	0x03, 5	; 3
     4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <scanKeyOutside+0x9c>
     4bc:	8f e3       	ldi	r24, 0x3F	; 63
     4be:	9c e9       	ldi	r25, 0x9C	; 156
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <scanKeyOutside+0x88>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <scanKeyOutside+0x8e>
     4c6:	00 00       	nop
     4c8:	1d 9b       	sbis	0x03, 5	; 3
     4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <scanKeyOutside+0x90>
     4cc:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     4d0:	84 e3       	ldi	r24, 0x34	; 52
     4d2:	08 95       	ret
     4d4:	1e 99       	sbic	0x03, 6	; 3
     4d6:	0c c0       	rjmp	.+24     	; 0x4f0 <scanKeyOutside+0xb8>
     4d8:	8f e3       	ldi	r24, 0x3F	; 63
     4da:	9c e9       	ldi	r25, 0x9C	; 156
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <scanKeyOutside+0xa4>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <scanKeyOutside+0xaa>
     4e2:	00 00       	nop
     4e4:	1e 9b       	sbis	0x03, 6	; 3
     4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <scanKeyOutside+0xac>
     4e8:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     4ec:	85 e3       	ldi	r24, 0x35	; 53
     4ee:	08 95       	ret
     4f0:	1f 99       	sbic	0x03, 7	; 3
     4f2:	0c c0       	rjmp	.+24     	; 0x50c <scanKeyOutside+0xd4>
     4f4:	8f e3       	ldi	r24, 0x3F	; 63
     4f6:	9c e9       	ldi	r25, 0x9C	; 156
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <scanKeyOutside+0xc0>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <scanKeyOutside+0xc6>
     4fe:	00 00       	nop
     500:	1f 9b       	sbis	0x03, 7	; 3
     502:	fe cf       	rjmp	.-4      	; 0x500 <scanKeyOutside+0xc8>
     504:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     508:	86 e3       	ldi	r24, 0x36	; 54
     50a:	08 95       	ret
     50c:	85 b1       	in	r24, 0x05	; 5
     50e:	8f 60       	ori	r24, 0x0F	; 15
     510:	85 b9       	out	0x05, r24	; 5
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	82 e0       	ldi	r24, 0x02	; 2
     516:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     51a:	92 e0       	ldi	r25, 0x02	; 2
     51c:	9a 95       	dec	r25
     51e:	f1 f7       	brne	.-4      	; 0x51c <scanKeyOutside+0xe4>
     520:	00 c0       	rjmp	.+0      	; 0x522 <scanKeyOutside+0xea>
     522:	1d 99       	sbic	0x03, 5	; 3
     524:	0c c0       	rjmp	.+24     	; 0x53e <scanKeyOutside+0x106>
     526:	8f e3       	ldi	r24, 0x3F	; 63
     528:	9c e9       	ldi	r25, 0x9C	; 156
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <scanKeyOutside+0xf2>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <scanKeyOutside+0xf8>
     530:	00 00       	nop
     532:	1d 9b       	sbis	0x03, 5	; 3
     534:	fe cf       	rjmp	.-4      	; 0x532 <scanKeyOutside+0xfa>
     536:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     53a:	87 e3       	ldi	r24, 0x37	; 55
     53c:	08 95       	ret
     53e:	1e 99       	sbic	0x03, 6	; 3
     540:	0c c0       	rjmp	.+24     	; 0x55a <scanKeyOutside+0x122>
     542:	8f e3       	ldi	r24, 0x3F	; 63
     544:	9c e9       	ldi	r25, 0x9C	; 156
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <scanKeyOutside+0x10e>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <scanKeyOutside+0x114>
     54c:	00 00       	nop
     54e:	1e 9b       	sbis	0x03, 6	; 3
     550:	fe cf       	rjmp	.-4      	; 0x54e <scanKeyOutside+0x116>
     552:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     556:	88 e3       	ldi	r24, 0x38	; 56
     558:	08 95       	ret
     55a:	1f 99       	sbic	0x03, 7	; 3
     55c:	0c c0       	rjmp	.+24     	; 0x576 <scanKeyOutside+0x13e>
     55e:	8f e3       	ldi	r24, 0x3F	; 63
     560:	9c e9       	ldi	r25, 0x9C	; 156
     562:	01 97       	sbiw	r24, 0x01	; 1
     564:	f1 f7       	brne	.-4      	; 0x562 <scanKeyOutside+0x12a>
     566:	00 c0       	rjmp	.+0      	; 0x568 <scanKeyOutside+0x130>
     568:	00 00       	nop
     56a:	1f 9b       	sbis	0x03, 7	; 3
     56c:	fe cf       	rjmp	.-4      	; 0x56a <scanKeyOutside+0x132>
     56e:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     572:	89 e3       	ldi	r24, 0x39	; 57
     574:	08 95       	ret
     576:	85 b1       	in	r24, 0x05	; 5
     578:	8f 60       	ori	r24, 0x0F	; 15
     57a:	85 b9       	out	0x05, r24	; 5
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	9a 95       	dec	r25
     588:	f1 f7       	brne	.-4      	; 0x586 <scanKeyOutside+0x14e>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <scanKeyOutside+0x154>
     58c:	1d 99       	sbic	0x03, 5	; 3
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <scanKeyOutside+0x170>
     590:	8f e3       	ldi	r24, 0x3F	; 63
     592:	9c e9       	ldi	r25, 0x9C	; 156
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <scanKeyOutside+0x15c>
     598:	00 c0       	rjmp	.+0      	; 0x59a <scanKeyOutside+0x162>
     59a:	00 00       	nop
     59c:	1d 9b       	sbis	0x03, 5	; 3
     59e:	fe cf       	rjmp	.-4      	; 0x59c <scanKeyOutside+0x164>
     5a0:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	08 95       	ret
     5a8:	1e 99       	sbic	0x03, 6	; 3
     5aa:	0c c0       	rjmp	.+24     	; 0x5c4 <scanKeyOutside+0x18c>
     5ac:	8f e3       	ldi	r24, 0x3F	; 63
     5ae:	9c e9       	ldi	r25, 0x9C	; 156
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <scanKeyOutside+0x178>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <scanKeyOutside+0x17e>
     5b6:	00 00       	nop
     5b8:	1e 9b       	sbis	0x03, 6	; 3
     5ba:	fe cf       	rjmp	.-4      	; 0x5b8 <scanKeyOutside+0x180>
     5bc:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     5c0:	80 e3       	ldi	r24, 0x30	; 48
     5c2:	08 95       	ret
     5c4:	1f 99       	sbic	0x03, 7	; 3
     5c6:	0c c0       	rjmp	.+24     	; 0x5e0 <scanKeyOutside+0x1a8>
     5c8:	8f e3       	ldi	r24, 0x3F	; 63
     5ca:	9c e9       	ldi	r25, 0x9C	; 156
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <scanKeyOutside+0x194>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <scanKeyOutside+0x19a>
     5d2:	00 00       	nop
     5d4:	1f 9b       	sbis	0x03, 7	; 3
     5d6:	fe cf       	rjmp	.-4      	; 0x5d4 <scanKeyOutside+0x19c>
     5d8:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     5dc:	83 e2       	ldi	r24, 0x23	; 35
     5de:	08 95       	ret
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	08 95       	ret

000005e4 <scanKeyInside>:
     5e4:	85 b1       	in	r24, 0x05	; 5
     5e6:	8f 60       	ori	r24, 0x0F	; 15
     5e8:	85 b9       	out	0x05, r24	; 5
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	8a 95       	dec	r24
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <scanKeyInside+0x10>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <scanKeyInside+0x16>
     5fa:	05 99       	sbic	0x00, 5	; 0
     5fc:	0c c0       	rjmp	.+24     	; 0x616 <scanKeyInside+0x32>
     5fe:	8f e3       	ldi	r24, 0x3F	; 63
     600:	9c e9       	ldi	r25, 0x9C	; 156
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	f1 f7       	brne	.-4      	; 0x602 <scanKeyInside+0x1e>
     606:	00 c0       	rjmp	.+0      	; 0x608 <scanKeyInside+0x24>
     608:	00 00       	nop
     60a:	05 9b       	sbis	0x00, 5	; 0
     60c:	fe cf       	rjmp	.-4      	; 0x60a <scanKeyInside+0x26>
     60e:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     612:	81 e3       	ldi	r24, 0x31	; 49
     614:	08 95       	ret
     616:	06 99       	sbic	0x00, 6	; 0
     618:	0c c0       	rjmp	.+24     	; 0x632 <scanKeyInside+0x4e>
     61a:	8f e3       	ldi	r24, 0x3F	; 63
     61c:	9c e9       	ldi	r25, 0x9C	; 156
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	f1 f7       	brne	.-4      	; 0x61e <scanKeyInside+0x3a>
     622:	00 c0       	rjmp	.+0      	; 0x624 <scanKeyInside+0x40>
     624:	00 00       	nop
     626:	06 9b       	sbis	0x00, 6	; 0
     628:	fe cf       	rjmp	.-4      	; 0x626 <scanKeyInside+0x42>
     62a:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     62e:	82 e3       	ldi	r24, 0x32	; 50
     630:	08 95       	ret
     632:	07 99       	sbic	0x00, 7	; 0
     634:	0c c0       	rjmp	.+24     	; 0x64e <scanKeyInside+0x6a>
     636:	8f e3       	ldi	r24, 0x3F	; 63
     638:	9c e9       	ldi	r25, 0x9C	; 156
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <scanKeyInside+0x56>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <scanKeyInside+0x5c>
     640:	00 00       	nop
     642:	07 9b       	sbis	0x00, 7	; 0
     644:	fe cf       	rjmp	.-4      	; 0x642 <scanKeyInside+0x5e>
     646:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     64a:	83 e3       	ldi	r24, 0x33	; 51
     64c:	08 95       	ret
     64e:	85 b1       	in	r24, 0x05	; 5
     650:	8f 60       	ori	r24, 0x0F	; 15
     652:	85 b9       	out	0x05, r24	; 5
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	9a 95       	dec	r25
     660:	f1 f7       	brne	.-4      	; 0x65e <scanKeyInside+0x7a>
     662:	00 c0       	rjmp	.+0      	; 0x664 <scanKeyInside+0x80>
     664:	05 99       	sbic	0x00, 5	; 0
     666:	0c c0       	rjmp	.+24     	; 0x680 <scanKeyInside+0x9c>
     668:	8f e3       	ldi	r24, 0x3F	; 63
     66a:	9c e9       	ldi	r25, 0x9C	; 156
     66c:	01 97       	sbiw	r24, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <scanKeyInside+0x88>
     670:	00 c0       	rjmp	.+0      	; 0x672 <scanKeyInside+0x8e>
     672:	00 00       	nop
     674:	05 9b       	sbis	0x00, 5	; 0
     676:	fe cf       	rjmp	.-4      	; 0x674 <scanKeyInside+0x90>
     678:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     67c:	84 e3       	ldi	r24, 0x34	; 52
     67e:	08 95       	ret
     680:	06 99       	sbic	0x00, 6	; 0
     682:	0c c0       	rjmp	.+24     	; 0x69c <scanKeyInside+0xb8>
     684:	8f e3       	ldi	r24, 0x3F	; 63
     686:	9c e9       	ldi	r25, 0x9C	; 156
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	f1 f7       	brne	.-4      	; 0x688 <scanKeyInside+0xa4>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <scanKeyInside+0xaa>
     68e:	00 00       	nop
     690:	06 9b       	sbis	0x00, 6	; 0
     692:	fe cf       	rjmp	.-4      	; 0x690 <scanKeyInside+0xac>
     694:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     698:	85 e3       	ldi	r24, 0x35	; 53
     69a:	08 95       	ret
     69c:	07 99       	sbic	0x00, 7	; 0
     69e:	0c c0       	rjmp	.+24     	; 0x6b8 <scanKeyInside+0xd4>
     6a0:	8f e3       	ldi	r24, 0x3F	; 63
     6a2:	9c e9       	ldi	r25, 0x9C	; 156
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <scanKeyInside+0xc0>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <scanKeyInside+0xc6>
     6aa:	00 00       	nop
     6ac:	07 9b       	sbis	0x00, 7	; 0
     6ae:	fe cf       	rjmp	.-4      	; 0x6ac <scanKeyInside+0xc8>
     6b0:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     6b4:	86 e3       	ldi	r24, 0x36	; 54
     6b6:	08 95       	ret
     6b8:	85 b1       	in	r24, 0x05	; 5
     6ba:	8f 60       	ori	r24, 0x0F	; 15
     6bc:	85 b9       	out	0x05, r24	; 5
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	82 e0       	ldi	r24, 0x02	; 2
     6c2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     6c6:	92 e0       	ldi	r25, 0x02	; 2
     6c8:	9a 95       	dec	r25
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <scanKeyInside+0xe4>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <scanKeyInside+0xea>
     6ce:	05 99       	sbic	0x00, 5	; 0
     6d0:	0c c0       	rjmp	.+24     	; 0x6ea <scanKeyInside+0x106>
     6d2:	8f e3       	ldi	r24, 0x3F	; 63
     6d4:	9c e9       	ldi	r25, 0x9C	; 156
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <scanKeyInside+0xf2>
     6da:	00 c0       	rjmp	.+0      	; 0x6dc <scanKeyInside+0xf8>
     6dc:	00 00       	nop
     6de:	05 9b       	sbis	0x00, 5	; 0
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <scanKeyInside+0xfa>
     6e2:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     6e6:	87 e3       	ldi	r24, 0x37	; 55
     6e8:	08 95       	ret
     6ea:	06 99       	sbic	0x00, 6	; 0
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <scanKeyInside+0x122>
     6ee:	8f e3       	ldi	r24, 0x3F	; 63
     6f0:	9c e9       	ldi	r25, 0x9C	; 156
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <scanKeyInside+0x10e>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <scanKeyInside+0x114>
     6f8:	00 00       	nop
     6fa:	06 9b       	sbis	0x00, 6	; 0
     6fc:	fe cf       	rjmp	.-4      	; 0x6fa <scanKeyInside+0x116>
     6fe:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     702:	88 e3       	ldi	r24, 0x38	; 56
     704:	08 95       	ret
     706:	07 99       	sbic	0x00, 7	; 0
     708:	0c c0       	rjmp	.+24     	; 0x722 <scanKeyInside+0x13e>
     70a:	8f e3       	ldi	r24, 0x3F	; 63
     70c:	9c e9       	ldi	r25, 0x9C	; 156
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	f1 f7       	brne	.-4      	; 0x70e <scanKeyInside+0x12a>
     712:	00 c0       	rjmp	.+0      	; 0x714 <scanKeyInside+0x130>
     714:	00 00       	nop
     716:	07 9b       	sbis	0x00, 7	; 0
     718:	fe cf       	rjmp	.-4      	; 0x716 <scanKeyInside+0x132>
     71a:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     71e:	89 e3       	ldi	r24, 0x39	; 57
     720:	08 95       	ret
     722:	85 b1       	in	r24, 0x05	; 5
     724:	8f 60       	ori	r24, 0x0F	; 15
     726:	85 b9       	out	0x05, r24	; 5
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <logicPortB>
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	9a 95       	dec	r25
     734:	f1 f7       	brne	.-4      	; 0x732 <scanKeyInside+0x14e>
     736:	00 c0       	rjmp	.+0      	; 0x738 <scanKeyInside+0x154>
     738:	05 99       	sbic	0x00, 5	; 0
     73a:	0c c0       	rjmp	.+24     	; 0x754 <scanKeyInside+0x170>
     73c:	8f e3       	ldi	r24, 0x3F	; 63
     73e:	9c e9       	ldi	r25, 0x9C	; 156
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <scanKeyInside+0x15c>
     744:	00 c0       	rjmp	.+0      	; 0x746 <scanKeyInside+0x162>
     746:	00 00       	nop
     748:	05 9b       	sbis	0x00, 5	; 0
     74a:	fe cf       	rjmp	.-4      	; 0x748 <scanKeyInside+0x164>
     74c:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     750:	8a e2       	ldi	r24, 0x2A	; 42
     752:	08 95       	ret
     754:	06 99       	sbic	0x00, 6	; 0
     756:	0c c0       	rjmp	.+24     	; 0x770 <scanKeyInside+0x18c>
     758:	8f e3       	ldi	r24, 0x3F	; 63
     75a:	9c e9       	ldi	r25, 0x9C	; 156
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <scanKeyInside+0x178>
     760:	00 c0       	rjmp	.+0      	; 0x762 <scanKeyInside+0x17e>
     762:	00 00       	nop
     764:	06 9b       	sbis	0x00, 6	; 0
     766:	fe cf       	rjmp	.-4      	; 0x764 <scanKeyInside+0x180>
     768:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     76c:	80 e3       	ldi	r24, 0x30	; 48
     76e:	08 95       	ret
     770:	07 99       	sbic	0x00, 7	; 0
     772:	0c c0       	rjmp	.+24     	; 0x78c <scanKeyInside+0x1a8>
     774:	8f e3       	ldi	r24, 0x3F	; 63
     776:	9c e9       	ldi	r25, 0x9C	; 156
     778:	01 97       	sbiw	r24, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <scanKeyInside+0x194>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <scanKeyInside+0x19a>
     77e:	00 00       	nop
     780:	07 9b       	sbis	0x00, 7	; 0
     782:	fe cf       	rjmp	.-4      	; 0x780 <scanKeyInside+0x19c>
     784:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
     788:	83 e2       	ldi	r24, 0x23	; 35
     78a:	08 95       	ret
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	08 95       	ret

00000790 <logicPortC>:
     790:	66 23       	and	r22, r22
     792:	69 f0       	breq	.+26     	; 0x7ae <logicPortC+0x1e>
     794:	48 b1       	in	r20, 0x08	; 8
     796:	21 e0       	ldi	r18, 0x01	; 1
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	b9 01       	movw	r22, r18
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <logicPortC+0x12>
     79e:	66 0f       	add	r22, r22
     7a0:	77 1f       	adc	r23, r23
     7a2:	8a 95       	dec	r24
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <logicPortC+0xe>
     7a6:	cb 01       	movw	r24, r22
     7a8:	84 2b       	or	r24, r20
     7aa:	88 b9       	out	0x08, r24	; 8
     7ac:	08 95       	ret
     7ae:	48 b1       	in	r20, 0x08	; 8
     7b0:	21 e0       	ldi	r18, 0x01	; 1
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	b9 01       	movw	r22, r18
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <logicPortC+0x2c>
     7b8:	66 0f       	add	r22, r22
     7ba:	77 1f       	adc	r23, r23
     7bc:	8a 95       	dec	r24
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <logicPortC+0x28>
     7c0:	cb 01       	movw	r24, r22
     7c2:	80 95       	com	r24
     7c4:	84 23       	and	r24, r20
     7c6:	88 b9       	out	0x08, r24	; 8
     7c8:	08 95       	ret

000007ca <writeDataLCD>:
     7ca:	cf 93       	push	r28
     7cc:	c8 2f       	mov	r28, r24
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     7d6:	8b b1       	in	r24, 0x0b	; 11
     7d8:	8f 70       	andi	r24, 0x0F	; 15
     7da:	8b b9       	out	0x0b, r24	; 11
     7dc:	8b b1       	in	r24, 0x0b	; 11
     7de:	9c 2f       	mov	r25, r28
     7e0:	90 7f       	andi	r25, 0xF0	; 240
     7e2:	89 2b       	or	r24, r25
     7e4:	8b b9       	out	0x0b, r24	; 11
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     7ee:	8f e9       	ldi	r24, 0x9F	; 159
     7f0:	9f e0       	ldi	r25, 0x0F	; 15
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <writeDataLCD+0x28>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <writeDataLCD+0x2e>
     7f8:	00 00       	nop
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     802:	8b b1       	in	r24, 0x0b	; 11
     804:	8f 70       	andi	r24, 0x0F	; 15
     806:	8b b9       	out	0x0b, r24	; 11
     808:	2b b1       	in	r18, 0x0b	; 11
     80a:	30 e1       	ldi	r19, 0x10	; 16
     80c:	c3 9f       	mul	r28, r19
     80e:	c0 01       	movw	r24, r0
     810:	11 24       	eor	r1, r1
     812:	82 2b       	or	r24, r18
     814:	8b b9       	out	0x0b, r24	; 11
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     81e:	8f e9       	ldi	r24, 0x9F	; 159
     820:	9f e0       	ldi	r25, 0x0F	; 15
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     828:	00 00       	nop
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <writeCommandLCD>:
     836:	cf 93       	push	r28
     838:	c8 2f       	mov	r28, r24
     83a:	60 e0       	ldi	r22, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     842:	8b b1       	in	r24, 0x0b	; 11
     844:	8f 70       	andi	r24, 0x0F	; 15
     846:	8b b9       	out	0x0b, r24	; 11
     848:	8b b1       	in	r24, 0x0b	; 11
     84a:	9c 2f       	mov	r25, r28
     84c:	90 7f       	andi	r25, 0xF0	; 240
     84e:	89 2b       	or	r24, r25
     850:	8b b9       	out	0x0b, r24	; 11
     852:	61 e0       	ldi	r22, 0x01	; 1
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     85a:	8f e9       	ldi	r24, 0x9F	; 159
     85c:	9f e0       	ldi	r25, 0x0F	; 15
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <writeCommandLCD+0x28>
     862:	00 c0       	rjmp	.+0      	; 0x864 <writeCommandLCD+0x2e>
     864:	00 00       	nop
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     86e:	8b b1       	in	r24, 0x0b	; 11
     870:	8f 70       	andi	r24, 0x0F	; 15
     872:	8b b9       	out	0x0b, r24	; 11
     874:	2b b1       	in	r18, 0x0b	; 11
     876:	30 e1       	ldi	r19, 0x10	; 16
     878:	c3 9f       	mul	r28, r19
     87a:	c0 01       	movw	r24, r0
     87c:	11 24       	eor	r1, r1
     87e:	82 2b       	or	r24, r18
     880:	8b b9       	out	0x0b, r24	; 11
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     88a:	8f e9       	ldi	r24, 0x9F	; 159
     88c:	9f e0       	ldi	r25, 0x0F	; 15
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <writeCommandLCD+0x58>
     892:	00 c0       	rjmp	.+0      	; 0x894 <writeCommandLCD+0x5e>
     894:	00 00       	nop
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     89e:	cf 91       	pop	r28
     8a0:	08 95       	ret

000008a2 <printLcdU>:
     8a2:	cf 93       	push	r28
     8a4:	80 e8       	ldi	r24, 0x80	; 128
     8a6:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
     8aa:	c0 e0       	ldi	r28, 0x00	; 0
     8ac:	08 c0       	rjmp	.+16     	; 0x8be <printLcdU+0x1c>
     8ae:	ec 2f       	mov	r30, r28
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	ea 5f       	subi	r30, 0xFA	; 250
     8b4:	fd 4f       	sbci	r31, 0xFD	; 253
     8b6:	80 81       	ld	r24, Z
     8b8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
     8bc:	cf 5f       	subi	r28, 0xFF	; 255
     8be:	c0 31       	cpi	r28, 0x10	; 16
     8c0:	b0 f3       	brcs	.-20     	; 0x8ae <printLcdU+0xc>
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <printLcdL>:
     8c6:	cf 93       	push	r28
     8c8:	80 ec       	ldi	r24, 0xC0	; 192
     8ca:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
     8ce:	c0 e0       	ldi	r28, 0x00	; 0
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <printLcdL+0x1c>
     8d2:	ec 2f       	mov	r30, r28
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ee 50       	subi	r30, 0x0E	; 14
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	80 81       	ld	r24, Z
     8dc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
     8e0:	cf 5f       	subi	r28, 0xFF	; 255
     8e2:	c0 31       	cpi	r28, 0x10	; 16
     8e4:	b0 f3       	brcs	.-20     	; 0x8d2 <printLcdL+0xc>
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <ledOpen>:
     8ea:	88 23       	and	r24, r24
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <ledOpen+0xe>
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	82 e0       	ldi	r24, 0x02	; 2
     8f2:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     8f6:	08 95       	ret
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	82 e0       	ldi	r24, 0x02	; 2
     8fc:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     900:	08 95       	ret

00000902 <ledFail>:
     902:	88 23       	and	r24, r24
     904:	29 f0       	breq	.+10     	; 0x910 <ledFail+0xe>
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	83 e0       	ldi	r24, 0x03	; 3
     90a:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     90e:	08 95       	ret
     910:	60 e0       	ldi	r22, 0x00	; 0
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	0e 94 c8 03 	call	0x790	; 0x790 <logicPortC>
     918:	08 95       	ret

0000091a <initState0>:
}
//end define function hardware interface

//function init state
void initState0(){
  g_changeState = 1;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <g_changeState>
  ledLock(1);
     920:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(0);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(0);
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(0);
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(0);
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(0);
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
     948:	08 95       	ret

0000094a <initState1>:
} 

void initState1(){
  g_changeState = 1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <g_changeState>
  ledLock(1);
     950:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(0);
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(0);
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(0);
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(0);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(0);
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  g_remainState = TIME_REMAIN_STATE_1;
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
     97e:	08 95       	ret

00000980 <initState2>:
}
void initState2(){
  g_changeState = 1;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <g_changeState>
  ledLock(0);
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(1);
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(0);
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(1);
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(0);
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(1);
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  g_remainState = TIME_REMAIN_STATE_2;
     9b0:	85 e0       	ldi	r24, 0x05	; 5
     9b2:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
     9b6:	08 95       	ret

000009b8 <__vector_1>:
    }
  }
  if(g_remainLcd == 0); //turnOffLcd();
}

ISR(INT0_vect){   //Unlock function / allow to access cockpit
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	cf 93       	push	r28
     9e0:	df 93       	push	r29
     9e2:	cd b7       	in	r28, 0x3d	; 61
     9e4:	de b7       	in	r29, 0x3e	; 62
     9e6:	6e 97       	sbiw	r28, 0x1e	; 30
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	cd bf       	out	0x3d, r28	; 61
  if(testting){
     9ec:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <testting>
     9f0:	88 23       	and	r24, r24
     9f2:	21 f0       	breq	.+8      	; 0x9fc <__vector_1+0x44>
    g_checkUnlock = 1;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <g_checkUnlock>
     9fa:	5e c0       	rjmp	.+188    	; 0xab8 <__vector_1+0x100>
  }else{
    g_operationCode = 2;  //unlock mode
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_operationCode>
    initState2();
     a02:	0e 94 c0 04 	call	0x980	; 0x980 <initState2>
    g_priorityState = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <g_priorityState>
    g_stateCodeLcd = 0;
     a0c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <g_stateCodeLcd>
    g_uperLineLcd[0]='='; g_uperLineLcd[1]='='; g_uperLineLcd[2]='=';
     a10:	e6 e0       	ldi	r30, 0x06	; 6
     a12:	f2 e0       	ldi	r31, 0x02	; 2
     a14:	8d e3       	ldi	r24, 0x3D	; 61
     a16:	80 83       	st	Z, r24
     a18:	81 83       	std	Z+1, r24	; 0x01
     a1a:	82 83       	std	Z+2, r24	; 0x02
    g_uperLineLcd[3]='['; g_uperLineLcd[4]='C'; g_uperLineLcd[5]='a';
     a1c:	9b e5       	ldi	r25, 0x5B	; 91
     a1e:	93 83       	std	Z+3, r25	; 0x03
     a20:	93 e4       	ldi	r25, 0x43	; 67
     a22:	94 83       	std	Z+4, r25	; 0x04
     a24:	91 e6       	ldi	r25, 0x61	; 97
     a26:	95 83       	std	Z+5, r25	; 0x05
    g_uperLineLcd[6]='u'; g_uperLineLcd[7]='s'; g_uperLineLcd[8]='s';
     a28:	95 e7       	ldi	r25, 0x75	; 117
     a2a:	96 83       	std	Z+6, r25	; 0x06
     a2c:	23 e7       	ldi	r18, 0x73	; 115
     a2e:	27 83       	std	Z+7, r18	; 0x07
     a30:	20 87       	std	Z+8, r18	; 0x08
    g_uperLineLcd[9]='i'; g_uperLineLcd[10]='o'; g_uperLineLcd[11]='n';
     a32:	49 e6       	ldi	r20, 0x69	; 105
     a34:	41 87       	std	Z+9, r20	; 0x09
     a36:	3f e6       	ldi	r19, 0x6F	; 111
     a38:	32 87       	std	Z+10, r19	; 0x0a
     a3a:	9e e6       	ldi	r25, 0x6E	; 110
     a3c:	93 87       	std	Z+11, r25	; 0x0b
    g_uperLineLcd[12]=']'; g_uperLineLcd[13]='='; g_uperLineLcd[14]='=';
     a3e:	5d e5       	ldi	r21, 0x5D	; 93
     a40:	54 87       	std	Z+12, r21	; 0x0c
     a42:	85 87       	std	Z+13, r24	; 0x0d
     a44:	86 87       	std	Z+14, r24	; 0x0e
    g_uperLineLcd[15]='=';
     a46:	87 87       	std	Z+15, r24	; 0x0f
    g_lowerLineLcd[0]='D'; g_lowerLineLcd[1]='o'; g_lowerLineLcd[2]='o';
     a48:	e2 ef       	ldi	r30, 0xF2	; 242
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	84 e4       	ldi	r24, 0x44	; 68
     a4e:	80 83       	st	Z, r24
     a50:	31 83       	std	Z+1, r19	; 0x01
     a52:	32 83       	std	Z+2, r19	; 0x02
    g_lowerLineLcd[3]='r'; g_lowerLineLcd[4]=' '; g_lowerLineLcd[5]='I';
     a54:	82 e7       	ldi	r24, 0x72	; 114
     a56:	83 83       	std	Z+3, r24	; 0x03
     a58:	80 e2       	ldi	r24, 0x20	; 32
     a5a:	84 83       	std	Z+4, r24	; 0x04
     a5c:	39 e4       	ldi	r19, 0x49	; 73
     a5e:	35 83       	std	Z+5, r19	; 0x05
    g_lowerLineLcd[6]='s'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='O';
     a60:	26 83       	std	Z+6, r18	; 0x06
     a62:	87 83       	std	Z+7, r24	; 0x07
     a64:	8f e4       	ldi	r24, 0x4F	; 79
     a66:	80 87       	std	Z+8, r24	; 0x08
    g_lowerLineLcd[9]='p'; g_lowerLineLcd[10]='e'; g_lowerLineLcd[11]='n';
     a68:	80 e7       	ldi	r24, 0x70	; 112
     a6a:	81 87       	std	Z+9, r24	; 0x09
     a6c:	85 e6       	ldi	r24, 0x65	; 101
     a6e:	82 87       	std	Z+10, r24	; 0x0a
     a70:	93 87       	std	Z+11, r25	; 0x0b
    g_lowerLineLcd[12]='n'; g_lowerLineLcd[13]='i'; g_lowerLineLcd[14]='n';
     a72:	94 87       	std	Z+12, r25	; 0x0c
     a74:	45 87       	std	Z+13, r20	; 0x0d
     a76:	96 87       	std	Z+14, r25	; 0x0e
    g_stateCodeLcd = 0;
    printLcdL();
     a78:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    printLcdU();
     a7c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
    USART_TransmitTime();
     a80:	0e 94 31 01 	call	0x262	; 0x262 <USART_TransmitTime>
    int counter = 0;
    char tempText[] = "Pilot UNLOCKED cockpit door.\n";
     a84:	8e e1       	ldi	r24, 0x1E	; 30
     a86:	e3 e2       	ldi	r30, 0x23	; 35
     a88:	f1 e0       	ldi	r31, 0x01	; 1
     a8a:	de 01       	movw	r26, r28
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	01 90       	ld	r0, Z+
     a90:	0d 92       	st	X+, r0
     a92:	8a 95       	dec	r24
     a94:	e1 f7       	brne	.-8      	; 0xa8e <__vector_1+0xd6>
    for(counter = 0; counter < 29; counter ++){
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	0b c0       	rjmp	.+22     	; 0xab2 <__vector_1+0xfa>
      USART_Transmit(tempText[counter]);
     a9c:	e1 e0       	ldi	r30, 0x01	; 1
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	ec 0f       	add	r30, r28
     aa2:	fd 1f       	adc	r31, r29
     aa4:	e0 0f       	add	r30, r16
     aa6:	f1 1f       	adc	r31, r17
     aa8:	80 81       	ld	r24, Z
     aaa:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    printLcdL();
    printLcdU();
    USART_TransmitTime();
    int counter = 0;
    char tempText[] = "Pilot UNLOCKED cockpit door.\n";
    for(counter = 0; counter < 29; counter ++){
     aae:	0f 5f       	subi	r16, 0xFF	; 255
     ab0:	1f 4f       	sbci	r17, 0xFF	; 255
     ab2:	0d 31       	cpi	r16, 0x1D	; 29
     ab4:	11 05       	cpc	r17, r1
     ab6:	94 f3       	brlt	.-28     	; 0xa9c <__vector_1+0xe4>
      USART_Transmit(tempText[counter]);
    }
  }
}
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	ff 91       	pop	r31
     aca:	ef 91       	pop	r30
     acc:	bf 91       	pop	r27
     ace:	af 91       	pop	r26
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	7f 91       	pop	r23
     ad6:	6f 91       	pop	r22
     ad8:	5f 91       	pop	r21
     ada:	4f 91       	pop	r20
     adc:	3f 91       	pop	r19
     ade:	2f 91       	pop	r18
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <initState3>:
  ledAllow(1);
  buzzer(0);
  g_remainState = TIME_REMAIN_STATE_2;
}
void initState3(){
  g_changeState = 1;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <g_changeState>
  ledLock(1);
     af4:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(0);
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(1);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(0);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(0);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  g_remainState = TIME_REMAIN_STATE_3;
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
     b22:	08 95       	ret

00000b24 <__vector_2>:
      USART_Transmit(tempText[counter]);
    }
  }
}

ISR(INT1_vect){ //lock function / denied to access cockpit
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	11 24       	eor	r1, r1
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	2f 93       	push	r18
     b34:	3f 93       	push	r19
     b36:	4f 93       	push	r20
     b38:	5f 93       	push	r21
     b3a:	6f 93       	push	r22
     b3c:	7f 93       	push	r23
     b3e:	8f 93       	push	r24
     b40:	9f 93       	push	r25
     b42:	af 93       	push	r26
     b44:	bf 93       	push	r27
     b46:	ef 93       	push	r30
     b48:	ff 93       	push	r31
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	6e 97       	sbiw	r28, 0x1e	; 30
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	cd bf       	out	0x3d, r28	; 61
  if(testting){
     b58:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <testting>
     b5c:	88 23       	and	r24, r24
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__vector_2+0x44>
    g_checkLock = 1;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <g_checkLock>
     b66:	62 c0       	rjmp	.+196    	; 0xc2c <__vector_2+0x108>
  }else{
    g_operationCode = 3;  //lock mode
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_operationCode>
    initState3();
     b6e:	0e 94 77 05 	call	0xaee	; 0xaee <initState3>
    g_priorityState = 1;
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <g_priorityState>
    g_stateCodeLcd = 0;
     b78:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <g_stateCodeLcd>
    g_uperLineLcd[0]='='; g_uperLineLcd[1]='='; g_uperLineLcd[2]='[';
     b7c:	e6 e0       	ldi	r30, 0x06	; 6
     b7e:	f2 e0       	ldi	r31, 0x02	; 2
     b80:	9d e3       	ldi	r25, 0x3D	; 61
     b82:	90 83       	st	Z, r25
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	8b e5       	ldi	r24, 0x5B	; 91
     b88:	82 83       	std	Z+2, r24	; 0x02
    g_uperLineLcd[3]='U'; g_uperLineLcd[4]='n'; g_uperLineLcd[5]='n';
     b8a:	85 e5       	ldi	r24, 0x55	; 85
     b8c:	83 83       	std	Z+3, r24	; 0x03
     b8e:	2e e6       	ldi	r18, 0x6E	; 110
     b90:	24 83       	std	Z+4, r18	; 0x04
     b92:	25 83       	std	Z+5, r18	; 0x05
    g_uperLineLcd[6]='o'; g_uperLineLcd[7]='r'; g_uperLineLcd[8]='m';
     b94:	8f e6       	ldi	r24, 0x6F	; 111
     b96:	86 83       	std	Z+6, r24	; 0x06
     b98:	32 e7       	ldi	r19, 0x72	; 114
     b9a:	37 83       	std	Z+7, r19	; 0x07
     b9c:	4d e6       	ldi	r20, 0x6D	; 109
     b9e:	40 87       	std	Z+8, r20	; 0x08
    g_uperLineLcd[9]='a'; g_uperLineLcd[10]='l'; g_uperLineLcd[11]='l';
     ba0:	41 e6       	ldi	r20, 0x61	; 97
     ba2:	41 87       	std	Z+9, r20	; 0x09
     ba4:	4c e6       	ldi	r20, 0x6C	; 108
     ba6:	42 87       	std	Z+10, r20	; 0x0a
     ba8:	43 87       	std	Z+11, r20	; 0x0b
    g_uperLineLcd[12]='y'; g_uperLineLcd[13]=']'; g_uperLineLcd[14]='=';
     baa:	49 e7       	ldi	r20, 0x79	; 121
     bac:	44 87       	std	Z+12, r20	; 0x0c
     bae:	4d e5       	ldi	r20, 0x5D	; 93
     bb0:	45 87       	std	Z+13, r20	; 0x0d
     bb2:	96 87       	std	Z+14, r25	; 0x0e
    g_uperLineLcd[15]='=';
     bb4:	97 87       	std	Z+15, r25	; 0x0f
    g_lowerLineLcd[0]='D'; g_lowerLineLcd[1]='o'; g_lowerLineLcd[2]='o';
     bb6:	e2 ef       	ldi	r30, 0xF2	; 242
     bb8:	f1 e0       	ldi	r31, 0x01	; 1
     bba:	94 e4       	ldi	r25, 0x44	; 68
     bbc:	90 83       	st	Z, r25
     bbe:	81 83       	std	Z+1, r24	; 0x01
     bc0:	82 83       	std	Z+2, r24	; 0x02
    g_lowerLineLcd[3]='r'; g_lowerLineLcd[4]=':'; g_lowerLineLcd[5]='i';
     bc2:	33 83       	std	Z+3, r19	; 0x03
     bc4:	9a e3       	ldi	r25, 0x3A	; 58
     bc6:	94 83       	std	Z+4, r25	; 0x04
     bc8:	99 e6       	ldi	r25, 0x69	; 105
     bca:	95 83       	std	Z+5, r25	; 0x05
    g_lowerLineLcd[6]='s'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='L';
     bcc:	33 e7       	ldi	r19, 0x73	; 115
     bce:	36 83       	std	Z+6, r19	; 0x06
     bd0:	30 e2       	ldi	r19, 0x20	; 32
     bd2:	37 83       	std	Z+7, r19	; 0x07
     bd4:	3c e4       	ldi	r19, 0x4C	; 76
     bd6:	30 87       	std	Z+8, r19	; 0x08
    g_lowerLineLcd[9]='o'; g_lowerLineLcd[10]='c'; g_lowerLineLcd[11]='k';
     bd8:	81 87       	std	Z+9, r24	; 0x09
     bda:	83 e6       	ldi	r24, 0x63	; 99
     bdc:	82 87       	std	Z+10, r24	; 0x0a
     bde:	8b e6       	ldi	r24, 0x6B	; 107
     be0:	83 87       	std	Z+11, r24	; 0x0b
    g_lowerLineLcd[12]='k'; g_lowerLineLcd[13]='i'; g_lowerLineLcd[14]='n';
     be2:	84 87       	std	Z+12, r24	; 0x0c
     be4:	95 87       	std	Z+13, r25	; 0x0d
     be6:	26 87       	std	Z+14, r18	; 0x0e
    g_lowerLineLcd[15]='g';  
     be8:	87 e6       	ldi	r24, 0x67	; 103
     bea:	87 87       	std	Z+15, r24	; 0x0f
    printLcdL();
     bec:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    printLcdU();
     bf0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
    USART_TransmitTime();
     bf4:	0e 94 31 01 	call	0x262	; 0x262 <USART_TransmitTime>
    int counter = 0;
    char tempText[] = "Pilot LOCKED cockpit door  .\n";
     bf8:	8e e1       	ldi	r24, 0x1E	; 30
     bfa:	e1 e4       	ldi	r30, 0x41	; 65
     bfc:	f1 e0       	ldi	r31, 0x01	; 1
     bfe:	de 01       	movw	r26, r28
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	01 90       	ld	r0, Z+
     c04:	0d 92       	st	X+, r0
     c06:	8a 95       	dec	r24
     c08:	e1 f7       	brne	.-8      	; 0xc02 <__vector_2+0xde>
    for(counter = 0; counter < 29; counter ++){
     c0a:	00 e0       	ldi	r16, 0x00	; 0
     c0c:	10 e0       	ldi	r17, 0x00	; 0
     c0e:	0b c0       	rjmp	.+22     	; 0xc26 <__vector_2+0x102>
      USART_Transmit(tempText[counter]);
     c10:	e1 e0       	ldi	r30, 0x01	; 1
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	e0 0f       	add	r30, r16
     c1a:	f1 1f       	adc	r31, r17
     c1c:	80 81       	ld	r24, Z
     c1e:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    printLcdL();
    printLcdU();
    USART_TransmitTime();
    int counter = 0;
    char tempText[] = "Pilot LOCKED cockpit door  .\n";
    for(counter = 0; counter < 29; counter ++){
     c22:	0f 5f       	subi	r16, 0xFF	; 255
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	0d 31       	cpi	r16, 0x1D	; 29
     c28:	11 05       	cpc	r17, r1
     c2a:	94 f3       	brlt	.-28     	; 0xc10 <__vector_2+0xec>
      USART_Transmit(tempText[counter]);
    }
  }
}
     c2c:	6e 96       	adiw	r28, 0x1e	; 30
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	ff 91       	pop	r31
     c3e:	ef 91       	pop	r30
     c40:	bf 91       	pop	r27
     c42:	af 91       	pop	r26
     c44:	9f 91       	pop	r25
     c46:	8f 91       	pop	r24
     c48:	7f 91       	pop	r23
     c4a:	6f 91       	pop	r22
     c4c:	5f 91       	pop	r21
     c4e:	4f 91       	pop	r20
     c50:	3f 91       	pop	r19
     c52:	2f 91       	pop	r18
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	0f 90       	pop	r0
     c5e:	1f 90       	pop	r1
     c60:	18 95       	reti

00000c62 <initState4>:
  ledFail(0);
  ledAllow(0);
  buzzer(0);
  g_remainState = TIME_REMAIN_STATE_3;
}
void initState4(){
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	a5 97       	sbiw	r28, 0x25	; 37
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
  g_changeState = 1;
     c7a:	11 e0       	ldi	r17, 0x01	; 1
     c7c:	10 93 d1 01 	sts	0x01D1, r17	; 0x8001d1 <g_changeState>
  g_priorityState = 1;
     c80:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <g_priorityState>
  ledLock(1);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(0);
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(0);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(0);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(0);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(0);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  g_remainState = TIME_REMAIN_STATE_4;
     cae:	8e e1       	ldi	r24, 0x1E	; 30
     cb0:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
  g_priorityState = 1;
     cb4:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <g_priorityState>
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]='E'; g_uperLineLcd[2]='M';
     cb8:	e6 e0       	ldi	r30, 0x06	; 6
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	80 e2       	ldi	r24, 0x20	; 32
     cbe:	80 83       	st	Z, r24
     cc0:	95 e4       	ldi	r25, 0x45	; 69
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	2d e4       	ldi	r18, 0x4D	; 77
     cc6:	22 83       	std	Z+2, r18	; 0x02
  g_uperLineLcd[3]='E'; g_uperLineLcd[4]='R'; g_uperLineLcd[5]='G';
     cc8:	93 83       	std	Z+3, r25	; 0x03
     cca:	22 e5       	ldi	r18, 0x52	; 82
     ccc:	24 83       	std	Z+4, r18	; 0x04
     cce:	27 e4       	ldi	r18, 0x47	; 71
     cd0:	25 83       	std	Z+5, r18	; 0x05
  g_uperLineLcd[6]='E'; g_uperLineLcd[7]='N'; g_uperLineLcd[8]='C';
     cd2:	96 83       	std	Z+6, r25	; 0x06
     cd4:	1e e4       	ldi	r17, 0x4E	; 78
     cd6:	17 83       	std	Z+7, r17	; 0x07
     cd8:	93 e4       	ldi	r25, 0x43	; 67
     cda:	90 87       	std	Z+8, r25	; 0x08
  g_uperLineLcd[9]='Y'; g_uperLineLcd[10]=' '; g_uperLineLcd[11]=' ';
     cdc:	99 e5       	ldi	r25, 0x59	; 89
     cde:	91 87       	std	Z+9, r25	; 0x09
     ce0:	82 87       	std	Z+10, r24	; 0x0a
     ce2:	83 87       	std	Z+11, r24	; 0x0b
  g_uperLineLcd[12]=' '; g_uperLineLcd[13]=' '; g_uperLineLcd[14]='s';
     ce4:	84 87       	std	Z+12, r24	; 0x0c
     ce6:	85 87       	std	Z+13, r24	; 0x0d
     ce8:	93 e7       	ldi	r25, 0x73	; 115
     cea:	96 87       	std	Z+14, r25	; 0x0e
  g_uperLineLcd[15]=' ';
     cec:	87 87       	std	Z+15, r24	; 0x0f
  printLcdU();
     cee:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  g_lowerLineLcd[0]='S'; g_lowerLineLcd[1]='w'; g_lowerLineLcd[2]='i';
     cf2:	e2 ef       	ldi	r30, 0xF2	; 242
     cf4:	f1 e0       	ldi	r31, 0x01	; 1
     cf6:	83 e5       	ldi	r24, 0x53	; 83
     cf8:	80 83       	st	Z, r24
     cfa:	97 e7       	ldi	r25, 0x77	; 119
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	89 e6       	ldi	r24, 0x69	; 105
     d00:	82 83       	std	Z+2, r24	; 0x02
  g_lowerLineLcd[3]='t'; g_lowerLineLcd[4]='c'; g_lowerLineLcd[5]='h';
     d02:	84 e7       	ldi	r24, 0x74	; 116
     d04:	83 83       	std	Z+3, r24	; 0x03
     d06:	23 e6       	ldi	r18, 0x63	; 99
     d08:	24 83       	std	Z+4, r18	; 0x04
     d0a:	88 e6       	ldi	r24, 0x68	; 104
     d0c:	85 83       	std	Z+5, r24	; 0x05
  g_lowerLineLcd[6]='T'; g_lowerLineLcd[7]='o'; g_lowerLineLcd[8]='L';
     d0e:	84 e5       	ldi	r24, 0x54	; 84
     d10:	86 83       	std	Z+6, r24	; 0x06
     d12:	8f e6       	ldi	r24, 0x6F	; 111
     d14:	87 83       	std	Z+7, r24	; 0x07
     d16:	3c e4       	ldi	r19, 0x4C	; 76
     d18:	30 87       	std	Z+8, r19	; 0x08
  g_lowerLineLcd[9]='o'; g_lowerLineLcd[10]='c'; g_lowerLineLcd[11]='k';
     d1a:	81 87       	std	Z+9, r24	; 0x09
     d1c:	22 87       	std	Z+10, r18	; 0x0a
     d1e:	2b e6       	ldi	r18, 0x6B	; 107
     d20:	23 87       	std	Z+11, r18	; 0x0b
  g_lowerLineLcd[12]='N'; g_lowerLineLcd[13]='o'; g_lowerLineLcd[14]='w';
     d22:	14 87       	std	Z+12, r17	; 0x0c
     d24:	85 87       	std	Z+13, r24	; 0x0d
     d26:	96 87       	std	Z+14, r25	; 0x0e
  g_lowerLineLcd[15]='!';
     d28:	81 e2       	ldi	r24, 0x21	; 33
     d2a:	87 87       	std	Z+15, r24	; 0x0f
  printLcdL();
     d2c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  USART_TransmitTime();
     d30:	0e 94 31 01 	call	0x262	; 0x262 <USART_TransmitTime>
  int counter = 0;
  char tempText[] = "Emergency pin access has been used.\n";
     d34:	85 e2       	ldi	r24, 0x25	; 37
     d36:	ef e5       	ldi	r30, 0x5F	; 95
     d38:	f1 e0       	ldi	r31, 0x01	; 1
     d3a:	de 01       	movw	r26, r28
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	01 90       	ld	r0, Z+
     d40:	0d 92       	st	X+, r0
     d42:	8a 95       	dec	r24
     d44:	e1 f7       	brne	.-8      	; 0xd3e <initState4+0xdc>
  for(counter = 0; counter < 36; counter ++){
     d46:	00 e0       	ldi	r16, 0x00	; 0
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <initState4+0x100>
    USART_Transmit(tempText[counter]);
     d4c:	e1 e0       	ldi	r30, 0x01	; 1
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	ec 0f       	add	r30, r28
     d52:	fd 1f       	adc	r31, r29
     d54:	e0 0f       	add	r30, r16
     d56:	f1 1f       	adc	r31, r17
     d58:	80 81       	ld	r24, Z
     d5a:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
  g_lowerLineLcd[15]='!';
  printLcdL();
  USART_TransmitTime();
  int counter = 0;
  char tempText[] = "Emergency pin access has been used.\n";
  for(counter = 0; counter < 36; counter ++){
     d5e:	0f 5f       	subi	r16, 0xFF	; 255
     d60:	1f 4f       	sbci	r17, 0xFF	; 255
     d62:	04 32       	cpi	r16, 0x24	; 36
     d64:	11 05       	cpc	r17, r1
     d66:	94 f3       	brlt	.-28     	; 0xd4c <initState4+0xea>
    USART_Transmit(tempText[counter]);
  }
}
     d68:	a5 96       	adiw	r28, 0x25	; 37
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	1f 91       	pop	r17
     d7a:	0f 91       	pop	r16
     d7c:	08 95       	ret

00000d7e <initState5>:
void initState5(){
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	a5 97       	sbiw	r28, 0x25	; 37
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
  g_changeState = 1;
     d96:	11 e0       	ldi	r17, 0x01	; 1
     d98:	10 93 d1 01 	sts	0x01D1, r17	; 0x8001d1 <g_changeState>
  g_priorityState = 1;
     d9c:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <g_priorityState>
  ledLock(0);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledUnlock(1);
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledDenied(0);
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledOpen(1);
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(1);
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(1);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  buzzer(0);
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  g_remainState = TIME_REMAIN_STATE_5;
     dca:	8f e0       	ldi	r24, 0x0F	; 15
     dcc:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
  g_priorityState = 1;
     dd0:	10 93 d0 01 	sts	0x01D0, r17	; 0x8001d0 <g_priorityState>
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]='S'; g_uperLineLcd[2]='Y';
     dd4:	e6 e0       	ldi	r30, 0x06	; 6
     dd6:	f2 e0       	ldi	r31, 0x02	; 2
     dd8:	80 e2       	ldi	r24, 0x20	; 32
     dda:	80 83       	st	Z, r24
     ddc:	93 e5       	ldi	r25, 0x53	; 83
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	29 e5       	ldi	r18, 0x59	; 89
     de2:	22 83       	std	Z+2, r18	; 0x02
  g_uperLineLcd[3]='S'; g_uperLineLcd[4]='T'; g_uperLineLcd[5]='E';
     de4:	93 83       	std	Z+3, r25	; 0x03
     de6:	94 e5       	ldi	r25, 0x54	; 84
     de8:	94 83       	std	Z+4, r25	; 0x04
     dea:	95 e4       	ldi	r25, 0x45	; 69
     dec:	95 83       	std	Z+5, r25	; 0x05
  g_uperLineLcd[6]='M'; g_uperLineLcd[7]=' '; g_uperLineLcd[8]='F';
     dee:	2d e4       	ldi	r18, 0x4D	; 77
     df0:	26 83       	std	Z+6, r18	; 0x06
     df2:	87 83       	std	Z+7, r24	; 0x07
     df4:	26 e4       	ldi	r18, 0x46	; 70
     df6:	20 87       	std	Z+8, r18	; 0x08
  g_uperLineLcd[9]='A'; g_uperLineLcd[10]='I'; g_uperLineLcd[11]='L';
     df8:	21 e4       	ldi	r18, 0x41	; 65
     dfa:	21 87       	std	Z+9, r18	; 0x09
     dfc:	29 e4       	ldi	r18, 0x49	; 73
     dfe:	22 87       	std	Z+10, r18	; 0x0a
     e00:	2c e4       	ldi	r18, 0x4C	; 76
     e02:	23 87       	std	Z+11, r18	; 0x0b
  g_uperLineLcd[12]='U'; g_uperLineLcd[13]='R'; g_uperLineLcd[14]='E';
     e04:	25 e5       	ldi	r18, 0x55	; 85
     e06:	24 87       	std	Z+12, r18	; 0x0c
     e08:	22 e5       	ldi	r18, 0x52	; 82
     e0a:	25 87       	std	Z+13, r18	; 0x0d
     e0c:	96 87       	std	Z+14, r25	; 0x0e
  g_uperLineLcd[15]=' ';
     e0e:	87 87       	std	Z+15, r24	; 0x0f
  printLcdU();
     e10:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  g_lowerLineLcd[0]='='; g_lowerLineLcd[1]='='; g_lowerLineLcd[2]='=';
     e14:	e2 ef       	ldi	r30, 0xF2	; 242
     e16:	f1 e0       	ldi	r31, 0x01	; 1
     e18:	8d e3       	ldi	r24, 0x3D	; 61
     e1a:	80 83       	st	Z, r24
     e1c:	81 83       	std	Z+1, r24	; 0x01
     e1e:	82 83       	std	Z+2, r24	; 0x02
  g_lowerLineLcd[3]='='; g_lowerLineLcd[4]='='; g_lowerLineLcd[5]='=';
     e20:	83 83       	std	Z+3, r24	; 0x03
     e22:	84 83       	std	Z+4, r24	; 0x04
     e24:	85 83       	std	Z+5, r24	; 0x05
  g_lowerLineLcd[6]='='; g_lowerLineLcd[7]='='; g_lowerLineLcd[8]='=';
     e26:	86 83       	std	Z+6, r24	; 0x06
     e28:	87 83       	std	Z+7, r24	; 0x07
     e2a:	80 87       	std	Z+8, r24	; 0x08
  g_lowerLineLcd[9]='='; g_lowerLineLcd[10]='='; g_lowerLineLcd[11]='=';
     e2c:	81 87       	std	Z+9, r24	; 0x09
     e2e:	82 87       	std	Z+10, r24	; 0x0a
     e30:	83 87       	std	Z+11, r24	; 0x0b
  g_lowerLineLcd[12]='='; g_lowerLineLcd[13]='='; g_lowerLineLcd[14]='=';
     e32:	84 87       	std	Z+12, r24	; 0x0c
     e34:	85 87       	std	Z+13, r24	; 0x0d
     e36:	86 87       	std	Z+14, r24	; 0x0e
  g_lowerLineLcd[15]='=';
     e38:	87 87       	std	Z+15, r24	; 0x0f
  printLcdL();
     e3a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  int counter = 0;
  char tempText[] = "[Warnning] System has been failed. \n";
     e3e:	85 e2       	ldi	r24, 0x25	; 37
     e40:	e4 e8       	ldi	r30, 0x84	; 132
     e42:	f1 e0       	ldi	r31, 0x01	; 1
     e44:	de 01       	movw	r26, r28
     e46:	11 96       	adiw	r26, 0x01	; 1
     e48:	01 90       	ld	r0, Z+
     e4a:	0d 92       	st	X+, r0
     e4c:	8a 95       	dec	r24
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <initState5+0xca>
  for(counter = 0; counter < 36; counter ++){
     e50:	00 e0       	ldi	r16, 0x00	; 0
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	0b c0       	rjmp	.+22     	; 0xe6c <initState5+0xee>
    USART_Transmit(tempText[counter]);
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	ec 0f       	add	r30, r28
     e5c:	fd 1f       	adc	r31, r29
     e5e:	e0 0f       	add	r30, r16
     e60:	f1 1f       	adc	r31, r17
     e62:	80 81       	ld	r24, Z
     e64:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
  g_lowerLineLcd[12]='='; g_lowerLineLcd[13]='='; g_lowerLineLcd[14]='=';
  g_lowerLineLcd[15]='=';
  printLcdL();
  int counter = 0;
  char tempText[] = "[Warnning] System has been failed. \n";
  for(counter = 0; counter < 36; counter ++){
     e68:	0f 5f       	subi	r16, 0xFF	; 255
     e6a:	1f 4f       	sbci	r17, 0xFF	; 255
     e6c:	04 32       	cpi	r16, 0x24	; 36
     e6e:	11 05       	cpc	r17, r1
     e70:	94 f3       	brlt	.-28     	; 0xe56 <initState5+0xd8>
    USART_Transmit(tempText[counter]);
  }
}
     e72:	a5 96       	adiw	r28, 0x25	; 37
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	1f 91       	pop	r17
     e84:	0f 91       	pop	r16
     e86:	08 95       	ret

00000e88 <initStateLcd1>:
void initStateLcd1(){
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
  g_changeStateLcd = 1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
  g_uperLineLcd[0]='A'; g_uperLineLcd[1]='c'; g_uperLineLcd[2]='t';
     e9c:	e6 e0       	ldi	r30, 0x06	; 6
     e9e:	f2 e0       	ldi	r31, 0x02	; 2
     ea0:	81 e4       	ldi	r24, 0x41	; 65
     ea2:	80 83       	st	Z, r24
     ea4:	83 e6       	ldi	r24, 0x63	; 99
     ea6:	81 83       	std	Z+1, r24	; 0x01
     ea8:	0f 2e       	mov	r0, r31
     eaa:	f4 e7       	ldi	r31, 0x74	; 116
     eac:	df 2e       	mov	r13, r31
     eae:	f0 2d       	mov	r31, r0
     eb0:	d2 82       	std	Z+2, r13	; 0x02
  g_uperLineLcd[3]='i'; g_uperLineLcd[4]='v'; g_uperLineLcd[5]='e';
     eb2:	89 e6       	ldi	r24, 0x69	; 105
     eb4:	83 83       	std	Z+3, r24	; 0x03
     eb6:	86 e7       	ldi	r24, 0x76	; 118
     eb8:	84 83       	std	Z+4, r24	; 0x04
     eba:	d5 e6       	ldi	r29, 0x65	; 101
     ebc:	d5 83       	std	Z+5, r29	; 0x05
  g_uperLineLcd[6]='C'; g_uperLineLcd[7]='o'; g_uperLineLcd[8]='d';
     ebe:	0f 2e       	mov	r0, r31
     ec0:	f3 e4       	ldi	r31, 0x43	; 67
     ec2:	ef 2e       	mov	r14, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	e6 82       	std	Z+6, r14	; 0x06
     ec8:	0f 2e       	mov	r0, r31
     eca:	ff e6       	ldi	r31, 0x6F	; 111
     ecc:	ff 2e       	mov	r15, r31
     ece:	f0 2d       	mov	r31, r0
     ed0:	f7 82       	std	Z+7, r15	; 0x07
     ed2:	04 e6       	ldi	r16, 0x64	; 100
     ed4:	00 87       	std	Z+8, r16	; 0x08
  g_uperLineLcd[9]='e'; g_uperLineLcd[10]=':'; g_uperLineLcd[11]=' ';
     ed6:	d1 87       	std	Z+9, r29	; 0x09
     ed8:	1a e3       	ldi	r17, 0x3A	; 58
     eda:	12 87       	std	Z+10, r17	; 0x0a
     edc:	c0 e2       	ldi	r28, 0x20	; 32
     ede:	c3 87       	std	Z+11, r28	; 0x0b
  g_uperLineLcd[12]=g_pinCorrect[0] + 0x30; g_uperLineLcd[13]=g_pinCorrect[1]+0x30;
     ee0:	aa e0       	ldi	r26, 0x0A	; 10
     ee2:	b1 e0       	ldi	r27, 0x01	; 1
     ee4:	8c 91       	ld	r24, X
     ee6:	80 5d       	subi	r24, 0xD0	; 208
     ee8:	84 87       	std	Z+12, r24	; 0x0c
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	8c 91       	ld	r24, X
     eee:	11 97       	sbiw	r26, 0x01	; 1
     ef0:	80 5d       	subi	r24, 0xD0	; 208
     ef2:	85 87       	std	Z+13, r24	; 0x0d
  g_uperLineLcd[14]=g_pinCorrect[2] + 0x30; g_uperLineLcd[15]=g_pinCorrect[3]+0x30;
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 91       	ld	r24, X
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	80 5d       	subi	r24, 0xD0	; 208
     efc:	86 87       	std	Z+14, r24	; 0x0e
     efe:	13 96       	adiw	r26, 0x03	; 3
     f00:	8c 91       	ld	r24, X
     f02:	80 5d       	subi	r24, 0xD0	; 208
     f04:	87 87       	std	Z+15, r24	; 0x0f
  printLcdU();
     f06:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  g_lowerLineLcd[0]='E'; g_lowerLineLcd[1]='n'; g_lowerLineLcd[2]='t';
     f0a:	e2 ef       	ldi	r30, 0xF2	; 242
     f0c:	f1 e0       	ldi	r31, 0x01	; 1
     f0e:	85 e4       	ldi	r24, 0x45	; 69
     f10:	80 83       	st	Z, r24
     f12:	8e e6       	ldi	r24, 0x6E	; 110
     f14:	81 83       	std	Z+1, r24	; 0x01
     f16:	d2 82       	std	Z+2, r13	; 0x02
  g_lowerLineLcd[3]='e'; g_lowerLineLcd[4]='r'; g_lowerLineLcd[5]='C';
     f18:	d3 83       	std	Z+3, r29	; 0x03
     f1a:	82 e7       	ldi	r24, 0x72	; 114
     f1c:	84 83       	std	Z+4, r24	; 0x04
     f1e:	e5 82       	std	Z+5, r14	; 0x05
  g_lowerLineLcd[6]='o'; g_lowerLineLcd[7]='d'; g_lowerLineLcd[8]='e';
     f20:	f6 82       	std	Z+6, r15	; 0x06
     f22:	07 83       	std	Z+7, r16	; 0x07
     f24:	d0 87       	std	Z+8, r29	; 0x08
  g_lowerLineLcd[9]=':'; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]=' ';
     f26:	11 87       	std	Z+9, r17	; 0x09
     f28:	c2 87       	std	Z+10, r28	; 0x0a
     f2a:	c3 87       	std	Z+11, r28	; 0x0b
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
     f2c:	c4 87       	std	Z+12, r28	; 0x0c
     f2e:	c5 87       	std	Z+13, r28	; 0x0d
     f30:	c6 87       	std	Z+14, r28	; 0x0e
  g_lowerLineLcd[15]=' ';
     f32:	c7 87       	std	Z+15, r28	; 0x0f
  printLcdL();
     f34:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	08 95       	ret

00000f48 <initStateLcd2>:
void initStateLcd2(){
  g_changeStateLcd = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
  g_uperLineLcd[0]='M'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='n';
     f4e:	e6 e0       	ldi	r30, 0x06	; 6
     f50:	f2 e0       	ldi	r31, 0x02	; 2
     f52:	8d e4       	ldi	r24, 0x4D	; 77
     f54:	80 83       	st	Z, r24
     f56:	85 e6       	ldi	r24, 0x65	; 101
     f58:	81 83       	std	Z+1, r24	; 0x01
     f5a:	8e e6       	ldi	r24, 0x6E	; 110
     f5c:	82 83       	std	Z+2, r24	; 0x02
  g_uperLineLcd[3]='u'; g_uperLineLcd[4]=' '; g_uperLineLcd[5]=(g_timeSys.hour /10) + 0x30;
     f5e:	85 e7       	ldi	r24, 0x75	; 117
     f60:	83 83       	std	Z+3, r24	; 0x03
     f62:	30 e2       	ldi	r19, 0x20	; 32
     f64:	34 83       	std	Z+4, r19	; 0x04
     f66:	a2 e0       	ldi	r26, 0x02	; 2
     f68:	b2 e0       	ldi	r27, 0x02	; 2
     f6a:	13 96       	adiw	r26, 0x03	; 3
     f6c:	2c 91       	ld	r18, X
     f6e:	13 97       	sbiw	r26, 0x03	; 3
     f70:	8d ec       	ldi	r24, 0xCD	; 205
     f72:	28 9f       	mul	r18, r24
     f74:	91 2d       	mov	r25, r1
     f76:	11 24       	eor	r1, r1
     f78:	96 95       	lsr	r25
     f7a:	96 95       	lsr	r25
     f7c:	96 95       	lsr	r25
     f7e:	40 e3       	ldi	r20, 0x30	; 48
     f80:	49 0f       	add	r20, r25
     f82:	45 83       	std	Z+5, r20	; 0x05
  g_uperLineLcd[6]=(g_timeSys.hour%10) + 0x30; g_uperLineLcd[7]='h'; g_uperLineLcd[8]=(g_timeSys.minute/10)+0x30;
     f84:	99 0f       	add	r25, r25
     f86:	49 2f       	mov	r20, r25
     f88:	44 0f       	add	r20, r20
     f8a:	44 0f       	add	r20, r20
     f8c:	94 0f       	add	r25, r20
     f8e:	29 1b       	sub	r18, r25
     f90:	20 5d       	subi	r18, 0xD0	; 208
     f92:	26 83       	std	Z+6, r18	; 0x06
     f94:	98 e6       	ldi	r25, 0x68	; 104
     f96:	97 83       	std	Z+7, r25	; 0x07
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	2c 91       	ld	r18, X
     f9c:	12 97       	sbiw	r26, 0x02	; 2
     f9e:	28 9f       	mul	r18, r24
     fa0:	91 2d       	mov	r25, r1
     fa2:	11 24       	eor	r1, r1
     fa4:	96 95       	lsr	r25
     fa6:	96 95       	lsr	r25
     fa8:	96 95       	lsr	r25
     faa:	40 e3       	ldi	r20, 0x30	; 48
     fac:	49 0f       	add	r20, r25
     fae:	40 87       	std	Z+8, r20	; 0x08
  g_uperLineLcd[9]=(g_timeSys.minute%10) + 0x30; g_uperLineLcd[10]='m'; g_uperLineLcd[11]=(g_timeSys.sec/10)+0x30;
     fb0:	99 0f       	add	r25, r25
     fb2:	49 2f       	mov	r20, r25
     fb4:	44 0f       	add	r20, r20
     fb6:	44 0f       	add	r20, r20
     fb8:	94 0f       	add	r25, r20
     fba:	29 1b       	sub	r18, r25
     fbc:	20 5d       	subi	r18, 0xD0	; 208
     fbe:	21 87       	std	Z+9, r18	; 0x09
     fc0:	9d e6       	ldi	r25, 0x6D	; 109
     fc2:	92 87       	std	Z+10, r25	; 0x0a
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	9c 91       	ld	r25, X
     fc8:	98 9f       	mul	r25, r24
     fca:	81 2d       	mov	r24, r1
     fcc:	11 24       	eor	r1, r1
     fce:	86 95       	lsr	r24
     fd0:	86 95       	lsr	r24
     fd2:	86 95       	lsr	r24
     fd4:	20 e3       	ldi	r18, 0x30	; 48
     fd6:	28 0f       	add	r18, r24
     fd8:	23 87       	std	Z+11, r18	; 0x0b
  g_uperLineLcd[12]=(g_timeSys.sec%10) + 0x30; g_uperLineLcd[13]='s'; g_uperLineLcd[14]=' ';
     fda:	88 0f       	add	r24, r24
     fdc:	28 2f       	mov	r18, r24
     fde:	22 0f       	add	r18, r18
     fe0:	22 0f       	add	r18, r18
     fe2:	82 0f       	add	r24, r18
     fe4:	98 1b       	sub	r25, r24
     fe6:	90 5d       	subi	r25, 0xD0	; 208
     fe8:	94 87       	std	Z+12, r25	; 0x0c
     fea:	83 e7       	ldi	r24, 0x73	; 115
     fec:	85 87       	std	Z+13, r24	; 0x0d
     fee:	36 87       	std	Z+14, r19	; 0x0e
  g_uperLineLcd[15]=' ';
     ff0:	37 87       	std	Z+15, r19	; 0x0f
  stateMenuLcd = 0;
     ff2:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <stateMenuLcd>
  printLcdU();
     ff6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
     ffa:	08 95       	ret

00000ffc <operationSystem>:
  }
}
//------------------------------------------END MAIN FUNCTION----------------------------------

//Define core function system
void operationSystem(unsigned char key){
     ffc:	cf 93       	push	r28
  key = scanKeyOutside();
     ffe:	0e 94 1c 02 	call	0x438	; 0x438 <scanKeyOutside>
    1002:	c8 2f       	mov	r28, r24
  signed char counter = 0;
  if(g_operationCode == 0){           //normal working with out any signal 
    1004:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <g_operationCode>
    1008:	81 11       	cpse	r24, r1
    100a:	52 c0       	rjmp	.+164    	; 0x10b0 <operationSystem+0xb4>
	ledLock(1);
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
	ledUnlock(0);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
	ledDenied(0);
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
	ledOpen(0);
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
	ledFail(0);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
	ledAllow(0);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
	buzzer(0);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    if(key >= 0x30 && key <= 0x39){   //press 0->9
    1036:	90 ed       	ldi	r25, 0xD0	; 208
    1038:	9c 0f       	add	r25, r28
    103a:	9a 30       	cpi	r25, 0x0A	; 10
    103c:	90 f4       	brcc	.+36     	; 0x1062 <operationSystem+0x66>
      g_pinInput[g_poiterPinOutside] = key - 0x30;
    103e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <g_poiterPinOutside>
    1042:	e8 2f       	mov	r30, r24
    1044:	08 2e       	mov	r0, r24
    1046:	00 0c       	add	r0, r0
    1048:	ff 0b       	sbc	r31, r31
    104a:	e7 51       	subi	r30, 0x17	; 23
    104c:	fe 4f       	sbci	r31, 0xFE	; 254
    104e:	90 83       	st	Z, r25
      g_poiterPinOutside ++;
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <g_poiterPinOutside>
      if(g_poiterPinOutside == 5) g_poiterPinOutside = 0;
    1056:	85 30       	cpi	r24, 0x05	; 5
    1058:	09 f0       	breq	.+2      	; 0x105c <operationSystem+0x60>
    105a:	f5 c0       	rjmp	.+490    	; 0x1246 <operationSystem+0x24a>
    105c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <g_poiterPinOutside>
    1060:	f2 c0       	rjmp	.+484    	; 0x1246 <operationSystem+0x24a>
    } else if(key == 0x2a){    //press * reset pin inout
    1062:	ca 32       	cpi	r28, 0x2A	; 42
    1064:	19 f4       	brne	.+6      	; 0x106c <operationSystem+0x70>
      g_poiterPinOutside = 0;
    1066:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <g_poiterPinOutside>
    106a:	ed c0       	rjmp	.+474    	; 0x1246 <operationSystem+0x24a>
    } else if(key == 0x23){
    106c:	c3 32       	cpi	r28, 0x23	; 35
    106e:	09 f0       	breq	.+2      	; 0x1072 <operationSystem+0x76>
    1070:	ea c0       	rjmp	.+468    	; 0x1246 <operationSystem+0x24a>
      if(g_stateCodeLcd != 4){
    1072:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_stateCodeLcd>
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	09 f4       	brne	.+2      	; 0x107c <operationSystem+0x80>
    107a:	e5 c0       	rjmp	.+458    	; 0x1246 <operationSystem+0x24a>
        if(g_poiterPinOutside == 4){
    107c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <g_poiterPinOutside>
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	69 f4       	brne	.+26     	; 0x109e <operationSystem+0xa2>
          g_poiterPinOutside = 0;
    1084:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <g_poiterPinOutside>
          if(checkCode()){
    1088:	0e 94 a6 00 	call	0x14c	; 0x14c <checkCode>
    108c:	88 23       	and	r24, r24
    108e:	09 f4       	brne	.+2      	; 0x1092 <operationSystem+0x96>
    1090:	da c0       	rjmp	.+436    	; 0x1246 <operationSystem+0x24a>
            g_operationCode = 4;
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_operationCode>
            initState4();
    1098:	0e 94 31 06 	call	0xc62	; 0xc62 <initState4>
    109c:	d4 c0       	rjmp	.+424    	; 0x1246 <operationSystem+0x24a>
          }else{
            //wrong pin
          }
        }else{
          g_operationCode = 1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_operationCode>
          initState1();   //init mode normal request   
    10a4:	0e 94 a5 04 	call	0x94a	; 0x94a <initState1>
          g_remainState = TIME_REMAIN_STATE_1;
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
    10ae:	cb c0       	rjmp	.+406    	; 0x1246 <operationSystem+0x24a>
        }
      }
    }
  }else if(g_operationCode == 1){ //normal request access cockpit
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	49 f5       	brne	.+82     	; 0x1106 <operationSystem+0x10a>
	ledLock(1);
    10b4:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
	ledUnlock(0);
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
	ledDenied(0);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
	ledOpen(0);
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
	ledFail(0);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
	ledAllow(0);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
	buzzer(0);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    if(g_remainState == 0){
    10dc:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
    10e0:	81 11       	cpse	r24, r1
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <operationSystem+0xf2>
      g_operationCode = 0;
    10e4:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_operationCode>
      initState0();
    10e8:	0e 94 8d 04 	call	0x91a	; 0x91a <initState0>
    10ec:	ac c0       	rjmp	.+344    	; 0x1246 <operationSystem+0x24a>
    }else{
      if(g_timeSys.mili < 50){
    10ee:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <g_timeSys>
    10f2:	82 33       	cpi	r24, 0x32	; 50
    10f4:	20 f4       	brcc	.+8      	; 0x10fe <operationSystem+0x102>
        buzzer(0);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    10fc:	a4 c0       	rjmp	.+328    	; 0x1246 <operationSystem+0x24a>
      }else{
        buzzer(1);
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    1104:	a0 c0       	rjmp	.+320    	; 0x1246 <operationSystem+0x24a>
      }
    }
  }else if(g_operationCode == 2){ //Allow access cockpit
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	c1 f4       	brne	.+48     	; 0x113a <operationSystem+0x13e>
    if(g_remainState == 0){
    110a:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
    110e:	81 11       	cpse	r24, r1
    1110:	06 c0       	rjmp	.+12     	; 0x111e <operationSystem+0x122>
      g_operationCode = 0;
    1112:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_operationCode>
      initState0();
    1116:	0e 94 8d 04 	call	0x91a	; 0x91a <initState0>
      g_priorityState = 0;
    111a:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_priorityState>
    }
    if(g_priorityState == 0 && g_stateCodeLcd == 0){
    111e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <g_priorityState>
    1122:	81 11       	cpse	r24, r1
    1124:	90 c0       	rjmp	.+288    	; 0x1246 <operationSystem+0x24a>
    1126:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_stateCodeLcd>
    112a:	81 11       	cpse	r24, r1
    112c:	8c c0       	rjmp	.+280    	; 0x1246 <operationSystem+0x24a>
      g_stateCodeLcd = 2;
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
      initStateLcd2();
    1134:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1138:	86 c0       	rjmp	.+268    	; 0x1246 <operationSystem+0x24a>
    }
  }else if(g_operationCode == 3){ //Denied access cockpit
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	c1 f4       	brne	.+48     	; 0x116e <operationSystem+0x172>
    if(g_remainState == 0){
    113e:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
    1142:	81 11       	cpse	r24, r1
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <operationSystem+0x156>
      g_operationCode = 0;
    1146:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_operationCode>
      initState0();
    114a:	0e 94 8d 04 	call	0x91a	; 0x91a <initState0>
      g_priorityState = 0;
    114e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_priorityState>
    }
    if(g_priorityState == 0 && g_stateCodeLcd == 0){
    1152:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <g_priorityState>
    1156:	81 11       	cpse	r24, r1
    1158:	76 c0       	rjmp	.+236    	; 0x1246 <operationSystem+0x24a>
    115a:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_stateCodeLcd>
    115e:	81 11       	cpse	r24, r1
    1160:	72 c0       	rjmp	.+228    	; 0x1246 <operationSystem+0x24a>
      g_stateCodeLcd = 2;
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
      initStateLcd2();
    1168:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    116c:	6c c0       	rjmp	.+216    	; 0x1246 <operationSystem+0x24a>
    }
  }else if(g_operationCode == 4){
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	09 f0       	breq	.+2      	; 0x1174 <operationSystem+0x178>
    1172:	41 c0       	rjmp	.+130    	; 0x11f6 <operationSystem+0x1fa>
    if(g_remainState == 0){
    1174:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
    1178:	81 11       	cpse	r24, r1
    117a:	0b c0       	rjmp	.+22     	; 0x1192 <operationSystem+0x196>
      g_priorityState = 0;
    117c:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_priorityState>
      g_operationCode = 5;
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <g_operationCode>
      g_remainState = TIME_REMAIN_STATE_5;
    1186:	8f e0       	ldi	r24, 0x0F	; 15
    1188:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <g_remainState>
      initState5();
    118c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <initState5>
    1190:	5a c0       	rjmp	.+180    	; 0x1246 <operationSystem+0x24a>
    }else{
      if((g_timeSys.mili/10)%2){
    1192:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <g_timeSys>
    1196:	9d ec       	ldi	r25, 0xCD	; 205
    1198:	89 9f       	mul	r24, r25
    119a:	81 2d       	mov	r24, r1
    119c:	11 24       	eor	r1, r1
    119e:	83 ff       	sbrs	r24, 3
    11a0:	0a c0       	rjmp	.+20     	; 0x11b6 <operationSystem+0x1ba>
        buzzer(0);
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
        ledOpen(1);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
        ledAllow(1);
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
    11b4:	09 c0       	rjmp	.+18     	; 0x11c8 <operationSystem+0x1cc>
      }else{
        buzzer(1);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
        ledAllow(0);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
        ledOpen(0);
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
      }
      if(g_changeSec){
    11c8:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    11cc:	88 23       	and	r24, r24
    11ce:	d9 f1       	breq	.+118    	; 0x1246 <operationSystem+0x24a>
        writeCommandLCD(0x80+12);
    11d0:	8c e8       	ldi	r24, 0x8C	; 140
    11d2:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30+remainTimeTen());
    11d6:	0e 94 bd 00 	call	0x17a	; 0x17a <remainTimeTen>
    11da:	80 5d       	subi	r24, 0xD0	; 208
    11dc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
        writeCommandLCD(0x80+13);
    11e0:	8d e8       	ldi	r24, 0x8D	; 141
    11e2:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30+remainTimeUnit());
    11e6:	0e 94 c7 00 	call	0x18e	; 0x18e <remainTimeUnit>
    11ea:	80 5d       	subi	r24, 0xD0	; 208
    11ec:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
        g_changeSec = 0;
    11f0:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_changeSec>
    11f4:	28 c0       	rjmp	.+80     	; 0x1246 <operationSystem+0x24a>
      }
    }
  }else if(g_operationCode == 5){
    11f6:	85 30       	cpi	r24, 0x05	; 5
    11f8:	31 f5       	brne	.+76     	; 0x1246 <operationSystem+0x24a>
    if(g_remainState == 0){
    11fa:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <g_remainState>
    11fe:	81 11       	cpse	r24, r1
    1200:	0c c0       	rjmp	.+24     	; 0x121a <operationSystem+0x21e>
      g_priorityState = 0;
    1202:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_priorityState>
      g_operationCode = 0;
    1206:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <g_operationCode>
      initState0();
    120a:	0e 94 8d 04 	call	0x91a	; 0x91a <initState0>
      initStateLcd2();
    120e:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
      g_changeStateLcd = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <operationSystem+0x24a>
      if((g_timeSys.mili/20)%2){
        //turnOffLcd();
      }else{
        //turnOnLcd();
      }
      if(g_changeSec){
    121a:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    121e:	88 23       	and	r24, r24
    1220:	91 f0       	breq	.+36     	; 0x1246 <operationSystem+0x24a>
        writeCommandLCD(0xC0+7);
    1222:	87 ec       	ldi	r24, 0xC7	; 199
    1224:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30+remainTimeTen());
    1228:	0e 94 bd 00 	call	0x17a	; 0x17a <remainTimeTen>
    122c:	80 5d       	subi	r24, 0xD0	; 208
    122e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
        writeCommandLCD(0xC0+8);
    1232:	88 ec       	ldi	r24, 0xC8	; 200
    1234:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30+remainTimeUnit());
    1238:	0e 94 c7 00 	call	0x18e	; 0x18e <remainTimeUnit>
    123c:	80 5d       	subi	r24, 0xD0	; 208
    123e:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
        g_changeSec = 0;
    1242:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_changeSec>
      }
    }
  }else if(g_operationCode == 6){
    //uncomplete init system
  }
}
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <initStateLcd7>:
  g_uperLineLcd[15]=' ';
  stateMenuLcd = 0;
  printLcdU();
}
void initStateLcd7(){
  g_changeStateLcd = 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
  g_uperLineLcd[0]='R'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='s';
    1250:	e6 e0       	ldi	r30, 0x06	; 6
    1252:	f2 e0       	ldi	r31, 0x02	; 2
    1254:	82 e5       	ldi	r24, 0x52	; 82
    1256:	80 83       	st	Z, r24
    1258:	25 e6       	ldi	r18, 0x65	; 101
    125a:	21 83       	std	Z+1, r18	; 0x01
    125c:	93 e7       	ldi	r25, 0x73	; 115
    125e:	92 83       	std	Z+2, r25	; 0x02
  g_uperLineLcd[3]='e'; g_uperLineLcd[4]='t'; g_uperLineLcd[5]=' ';
    1260:	23 83       	std	Z+3, r18	; 0x03
    1262:	34 e7       	ldi	r19, 0x74	; 116
    1264:	34 83       	std	Z+4, r19	; 0x04
    1266:	80 e2       	ldi	r24, 0x20	; 32
    1268:	85 83       	std	Z+5, r24	; 0x05
  g_uperLineLcd[6]='S'; g_uperLineLcd[7]='y'; g_uperLineLcd[8]='s';
    126a:	43 e5       	ldi	r20, 0x53	; 83
    126c:	46 83       	std	Z+6, r20	; 0x06
    126e:	49 e7       	ldi	r20, 0x79	; 121
    1270:	47 83       	std	Z+7, r20	; 0x07
    1272:	90 87       	std	Z+8, r25	; 0x08
  g_uperLineLcd[9]='t'; g_uperLineLcd[10]='e'; g_uperLineLcd[11]='m';
    1274:	31 87       	std	Z+9, r19	; 0x09
    1276:	22 87       	std	Z+10, r18	; 0x0a
    1278:	3d e6       	ldi	r19, 0x6D	; 109
    127a:	33 87       	std	Z+11, r19	; 0x0b
  g_uperLineLcd[12]=' '; g_uperLineLcd[13]='?'; g_uperLineLcd[14]=' ';
    127c:	84 87       	std	Z+12, r24	; 0x0c
    127e:	4f e3       	ldi	r20, 0x3F	; 63
    1280:	45 87       	std	Z+13, r20	; 0x0d
    1282:	86 87       	std	Z+14, r24	; 0x0e
  g_uperLineLcd[15]=' ';
    1284:	87 87       	std	Z+15, r24	; 0x0f
  g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    1286:	e2 ef       	ldi	r30, 0xF2	; 242
    1288:	f1 e0       	ldi	r31, 0x01	; 1
    128a:	40 e5       	ldi	r20, 0x50	; 80
    128c:	40 83       	st	Z, r20
    128e:	42 e7       	ldi	r20, 0x72	; 114
    1290:	41 83       	std	Z+1, r20	; 0x01
    1292:	22 83       	std	Z+2, r18	; 0x02
  g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]=' ';
    1294:	93 83       	std	Z+3, r25	; 0x03
    1296:	94 83       	std	Z+4, r25	; 0x04
    1298:	85 83       	std	Z+5, r24	; 0x05
  g_lowerLineLcd[6]='#'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='c';
    129a:	93 e2       	ldi	r25, 0x23	; 35
    129c:	96 83       	std	Z+6, r25	; 0x06
    129e:	87 83       	std	Z+7, r24	; 0x07
    12a0:	93 e6       	ldi	r25, 0x63	; 99
    12a2:	90 87       	std	Z+8, r25	; 0x08
  g_lowerLineLcd[9]='o'; g_lowerLineLcd[10]='n'; g_lowerLineLcd[11]='f';
    12a4:	9f e6       	ldi	r25, 0x6F	; 111
    12a6:	91 87       	std	Z+9, r25	; 0x09
    12a8:	9e e6       	ldi	r25, 0x6E	; 110
    12aa:	92 87       	std	Z+10, r25	; 0x0a
    12ac:	96 e6       	ldi	r25, 0x66	; 102
    12ae:	93 87       	std	Z+11, r25	; 0x0b
  g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='r'; g_lowerLineLcd[14]='m';
    12b0:	99 e6       	ldi	r25, 0x69	; 105
    12b2:	94 87       	std	Z+12, r25	; 0x0c
    12b4:	45 87       	std	Z+13, r20	; 0x0d
    12b6:	36 87       	std	Z+14, r19	; 0x0e
  g_lowerLineLcd[15]=' ';
    12b8:	87 87       	std	Z+15, r24	; 0x0f
  printLcdL();
    12ba:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  printLcdU();
    12be:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
    12c2:	08 95       	ret

000012c4 <testKeyPad>:
}
//end define function init state
//Define function testting  
unsigned char testKeyPad(){
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
  testting = 1;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <testting>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d0:	2f ef       	ldi	r18, 0xFF	; 255
    12d2:	84 e3       	ldi	r24, 0x34	; 52
    12d4:	9c e0       	ldi	r25, 0x0C	; 12
    12d6:	21 50       	subi	r18, 0x01	; 1
    12d8:	80 40       	sbci	r24, 0x00	; 0
    12da:	90 40       	sbci	r25, 0x00	; 0
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <testKeyPad+0x12>
    12de:	00 c0       	rjmp	.+0      	; 0x12e0 <testKeyPad+0x1c>
    12e0:	00 00       	nop
  _delay_ms(500);
  g_uperLineLcd[0]='T'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='s';
    12e2:	e6 e0       	ldi	r30, 0x06	; 6
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	84 e5       	ldi	r24, 0x54	; 84
    12e8:	80 83       	st	Z, r24
    12ea:	85 e6       	ldi	r24, 0x65	; 101
    12ec:	81 83       	std	Z+1, r24	; 0x01
    12ee:	93 e7       	ldi	r25, 0x73	; 115
    12f0:	92 83       	std	Z+2, r25	; 0x02
  g_uperLineLcd[3]='t'; g_uperLineLcd[4]=' '; g_uperLineLcd[5]='K';
    12f2:	24 e7       	ldi	r18, 0x74	; 116
    12f4:	23 83       	std	Z+3, r18	; 0x03
    12f6:	20 e2       	ldi	r18, 0x20	; 32
    12f8:	24 83       	std	Z+4, r18	; 0x04
    12fa:	3b e4       	ldi	r19, 0x4B	; 75
    12fc:	35 83       	std	Z+5, r19	; 0x05
  g_uperLineLcd[6]='e'; g_uperLineLcd[7]='y'; g_uperLineLcd[8]='P';
    12fe:	86 83       	std	Z+6, r24	; 0x06
    1300:	39 e7       	ldi	r19, 0x79	; 121
    1302:	37 83       	std	Z+7, r19	; 0x07
    1304:	30 e5       	ldi	r19, 0x50	; 80
    1306:	30 87       	std	Z+8, r19	; 0x08
  g_uperLineLcd[9]=' '; g_uperLineLcd[10]='I'; g_uperLineLcd[11]='n';
    1308:	21 87       	std	Z+9, r18	; 0x09
    130a:	29 e4       	ldi	r18, 0x49	; 73
    130c:	22 87       	std	Z+10, r18	; 0x0a
    130e:	2e e6       	ldi	r18, 0x6E	; 110
    1310:	23 87       	std	Z+11, r18	; 0x0b
  g_uperLineLcd[12]='s'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='d';
    1312:	94 87       	std	Z+12, r25	; 0x0c
    1314:	99 e6       	ldi	r25, 0x69	; 105
    1316:	95 87       	std	Z+13, r25	; 0x0d
    1318:	94 e6       	ldi	r25, 0x64	; 100
    131a:	96 87       	std	Z+14, r25	; 0x0e
  g_uperLineLcd[15]='e';
    131c:	87 87       	std	Z+15, r24	; 0x0f
  unsigned char i = 0;
  unsigned char parameter = 0;
  unsigned char result = 0;
    131e:	10 e0       	ldi	r17, 0x00	; 0
  for(i = 0; i < 12; i++){
    1320:	d0 e0       	ldi	r29, 0x00	; 0
    1322:	50 c0       	rjmp	.+160    	; 0x13c4 <testKeyPad+0x100>
    g_timeSec = 4;
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
    g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    132a:	e2 ef       	ldi	r30, 0xF2	; 242
    132c:	f1 e0       	ldi	r31, 0x01	; 1
    132e:	80 e5       	ldi	r24, 0x50	; 80
    1330:	80 83       	st	Z, r24
    1332:	82 e7       	ldi	r24, 0x72	; 114
    1334:	81 83       	std	Z+1, r24	; 0x01
    1336:	35 e6       	ldi	r19, 0x65	; 101
    1338:	32 83       	std	Z+2, r19	; 0x02
    g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]=' ';
    133a:	23 e7       	ldi	r18, 0x73	; 115
    133c:	23 83       	std	Z+3, r18	; 0x03
    133e:	24 83       	std	Z+4, r18	; 0x04
    1340:	90 e2       	ldi	r25, 0x20	; 32
    1342:	95 83       	std	Z+5, r25	; 0x05
    g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='.'; g_lowerLineLcd[8]='.';
    1344:	8e e2       	ldi	r24, 0x2E	; 46
    1346:	87 83       	std	Z+7, r24	; 0x07
    1348:	80 87       	std	Z+8, r24	; 0x08
    g_lowerLineLcd[9]='.'; g_lowerLineLcd[10]='.'; g_lowerLineLcd[11]=' ';
    134a:	81 87       	std	Z+9, r24	; 0x09
    134c:	82 87       	std	Z+10, r24	; 0x0a
    134e:	93 87       	std	Z+11, r25	; 0x0b
    g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='c';
    1350:	24 87       	std	Z+12, r18	; 0x0c
    1352:	35 87       	std	Z+13, r19	; 0x0d
    1354:	83 e6       	ldi	r24, 0x63	; 99
    1356:	86 87       	std	Z+14, r24	; 0x0e
    g_lowerLineLcd[15]=' ';
    1358:	97 87       	std	Z+15, r25	; 0x0f
    if(i == 10){
    135a:	da 30       	cpi	r29, 0x0A	; 10
    135c:	29 f4       	brne	.+10     	; 0x1368 <testKeyPad+0xa4>
      parameter = 0x2a;
      g_lowerLineLcd[6] = 0x2a;
    135e:	8a e2       	ldi	r24, 0x2A	; 42
    1360:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_lowerLineLcd+0x6>
    g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='.'; g_lowerLineLcd[8]='.';
    g_lowerLineLcd[9]='.'; g_lowerLineLcd[10]='.'; g_lowerLineLcd[11]=' ';
    g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='c';
    g_lowerLineLcd[15]=' ';
    if(i == 10){
      parameter = 0x2a;
    1364:	ca e2       	ldi	r28, 0x2A	; 42
    1366:	0b c0       	rjmp	.+22     	; 0x137e <testKeyPad+0xba>
      g_lowerLineLcd[6] = 0x2a;
    }else if(i == 11){
    1368:	db 30       	cpi	r29, 0x0B	; 11
    136a:	29 f4       	brne	.+10     	; 0x1376 <testKeyPad+0xb2>
      g_lowerLineLcd[6] = 0x23;
    136c:	83 e2       	ldi	r24, 0x23	; 35
    136e:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_lowerLineLcd+0x6>
      parameter = 0x23;
    1372:	c3 e2       	ldi	r28, 0x23	; 35
    1374:	04 c0       	rjmp	.+8      	; 0x137e <testKeyPad+0xba>
    }else{
      g_lowerLineLcd[6] = i + 0x30;
    1376:	c0 e3       	ldi	r28, 0x30	; 48
    1378:	cd 0f       	add	r28, r29
    137a:	c0 93 f8 01 	sts	0x01F8, r28	; 0x8001f8 <g_lowerLineLcd+0x6>
      parameter = i + 0x30;
    }
    printLcdU();
    137e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
    printLcdL();
    1382:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    while(scanKeyInside() != parameter){
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <testKeyPad+0xf6>
      if(g_changeSec == 1){
    1388:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	41 f4       	brne	.+16     	; 0x13a0 <testKeyPad+0xdc>
        g_changeSec == 0;
        writeCommandLCD(0xcb);
    1390:	8b ec       	ldi	r24, 0xCB	; 203
    1392:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30 + g_timeSec);
    1396:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    139a:	80 5d       	subi	r24, 0xD0	; 208
    139c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
      }
      if(g_timeSec == 0){
    13a0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    13a4:	81 11       	cpse	r24, r1
    13a6:	09 c0       	rjmp	.+18     	; 0x13ba <testKeyPad+0xf6>
        result ++;
    13a8:	1f 5f       	subi	r17, 0xFF	; 255
        g_errorCode[0] = 1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <g_errorCode>
        soundPushButton();
    13b0:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
        soundPushButton();
    13b4:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
        break;
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <testKeyPad+0xfe>
      g_lowerLineLcd[6] = i + 0x30;
      parameter = i + 0x30;
    }
    printLcdU();
    printLcdL();
    while(scanKeyInside() != parameter){
    13ba:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <scanKeyInside>
    13be:	c8 13       	cpse	r28, r24
    13c0:	e3 cf       	rjmp	.-58     	; 0x1388 <testKeyPad+0xc4>
  g_uperLineLcd[12]='s'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='d';
  g_uperLineLcd[15]='e';
  unsigned char i = 0;
  unsigned char parameter = 0;
  unsigned char result = 0;
  for(i = 0; i < 12; i++){
    13c2:	df 5f       	subi	r29, 0xFF	; 255
    13c4:	dc 30       	cpi	r29, 0x0C	; 12
    13c6:	08 f4       	brcc	.+2      	; 0x13ca <testKeyPad+0x106>
    13c8:	ad cf       	rjmp	.-166    	; 0x1324 <testKeyPad+0x60>
        soundPushButton();
        break;
      }
    }
  }
  g_uperLineLcd[0]='T'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='s';
    13ca:	e6 e0       	ldi	r30, 0x06	; 6
    13cc:	f2 e0       	ldi	r31, 0x02	; 2
    13ce:	84 e5       	ldi	r24, 0x54	; 84
    13d0:	80 83       	st	Z, r24
    13d2:	85 e6       	ldi	r24, 0x65	; 101
    13d4:	81 83       	std	Z+1, r24	; 0x01
    13d6:	93 e7       	ldi	r25, 0x73	; 115
    13d8:	92 83       	std	Z+2, r25	; 0x02
  g_uperLineLcd[3]='t'; g_uperLineLcd[4]=' '; g_uperLineLcd[5]='k';
    13da:	24 e7       	ldi	r18, 0x74	; 116
    13dc:	23 83       	std	Z+3, r18	; 0x03
    13de:	30 e2       	ldi	r19, 0x20	; 32
    13e0:	34 83       	std	Z+4, r19	; 0x04
    13e2:	4b e6       	ldi	r20, 0x6B	; 107
    13e4:	45 83       	std	Z+5, r20	; 0x05
  g_uperLineLcd[6]='e'; g_uperLineLcd[7]='y'; g_uperLineLcd[8]=' ';
    13e6:	86 83       	std	Z+6, r24	; 0x06
    13e8:	49 e7       	ldi	r20, 0x79	; 121
    13ea:	47 83       	std	Z+7, r20	; 0x07
    13ec:	30 87       	std	Z+8, r19	; 0x08
  g_uperLineLcd[9]='O'; g_uperLineLcd[10]='u'; g_uperLineLcd[11]='t';
    13ee:	3f e4       	ldi	r19, 0x4F	; 79
    13f0:	31 87       	std	Z+9, r19	; 0x09
    13f2:	35 e7       	ldi	r19, 0x75	; 117
    13f4:	32 87       	std	Z+10, r19	; 0x0a
    13f6:	23 87       	std	Z+11, r18	; 0x0b
  g_uperLineLcd[12]='s'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='d';
    13f8:	94 87       	std	Z+12, r25	; 0x0c
    13fa:	99 e6       	ldi	r25, 0x69	; 105
    13fc:	95 87       	std	Z+13, r25	; 0x0d
    13fe:	94 e6       	ldi	r25, 0x64	; 100
    1400:	96 87       	std	Z+14, r25	; 0x0e
  g_uperLineLcd[15]='e';
    1402:	87 87       	std	Z+15, r24	; 0x0f
  for(i = 0; i < 12; i++){
    1404:	d0 e0       	ldi	r29, 0x00	; 0
    1406:	50 c0       	rjmp	.+160    	; 0x14a8 <testKeyPad+0x1e4>
    g_timeSec = 4;
    1408:	84 e0       	ldi	r24, 0x04	; 4
    140a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
    g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    140e:	e2 ef       	ldi	r30, 0xF2	; 242
    1410:	f1 e0       	ldi	r31, 0x01	; 1
    1412:	80 e5       	ldi	r24, 0x50	; 80
    1414:	80 83       	st	Z, r24
    1416:	82 e7       	ldi	r24, 0x72	; 114
    1418:	81 83       	std	Z+1, r24	; 0x01
    141a:	35 e6       	ldi	r19, 0x65	; 101
    141c:	32 83       	std	Z+2, r19	; 0x02
    g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]=' ';
    141e:	23 e7       	ldi	r18, 0x73	; 115
    1420:	23 83       	std	Z+3, r18	; 0x03
    1422:	24 83       	std	Z+4, r18	; 0x04
    1424:	90 e2       	ldi	r25, 0x20	; 32
    1426:	95 83       	std	Z+5, r25	; 0x05
    g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='.'; g_lowerLineLcd[8]='.';
    1428:	8e e2       	ldi	r24, 0x2E	; 46
    142a:	87 83       	std	Z+7, r24	; 0x07
    142c:	80 87       	std	Z+8, r24	; 0x08
    g_lowerLineLcd[9]='.'; g_lowerLineLcd[10]='.'; g_lowerLineLcd[11]=' ';
    142e:	81 87       	std	Z+9, r24	; 0x09
    1430:	82 87       	std	Z+10, r24	; 0x0a
    1432:	93 87       	std	Z+11, r25	; 0x0b
    g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='c';
    1434:	24 87       	std	Z+12, r18	; 0x0c
    1436:	35 87       	std	Z+13, r19	; 0x0d
    1438:	83 e6       	ldi	r24, 0x63	; 99
    143a:	86 87       	std	Z+14, r24	; 0x0e
    g_lowerLineLcd[15]=' ';
    143c:	97 87       	std	Z+15, r25	; 0x0f
    if(i == 10){
    143e:	da 30       	cpi	r29, 0x0A	; 10
    1440:	29 f4       	brne	.+10     	; 0x144c <testKeyPad+0x188>
      parameter = 0x2a;
      g_lowerLineLcd[6] = 0x2a;
    1442:	8a e2       	ldi	r24, 0x2A	; 42
    1444:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_lowerLineLcd+0x6>
    g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='.'; g_lowerLineLcd[8]='.';
    g_lowerLineLcd[9]='.'; g_lowerLineLcd[10]='.'; g_lowerLineLcd[11]=' ';
    g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='c';
    g_lowerLineLcd[15]=' ';
    if(i == 10){
      parameter = 0x2a;
    1448:	ca e2       	ldi	r28, 0x2A	; 42
    144a:	0b c0       	rjmp	.+22     	; 0x1462 <testKeyPad+0x19e>
      g_lowerLineLcd[6] = 0x2a;
    }else if(i == 11){
    144c:	db 30       	cpi	r29, 0x0B	; 11
    144e:	29 f4       	brne	.+10     	; 0x145a <testKeyPad+0x196>
      g_lowerLineLcd[6] = 0x23;
    1450:	83 e2       	ldi	r24, 0x23	; 35
    1452:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_lowerLineLcd+0x6>
      parameter = 0x23;
    1456:	c3 e2       	ldi	r28, 0x23	; 35
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <testKeyPad+0x19e>
    }else{
      g_lowerLineLcd[6] = i + 0x30;
    145a:	c0 e3       	ldi	r28, 0x30	; 48
    145c:	cd 0f       	add	r28, r29
    145e:	c0 93 f8 01 	sts	0x01F8, r28	; 0x8001f8 <g_lowerLineLcd+0x6>
      parameter = i + 0x30;
    }
    printLcdU();
    1462:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
    printLcdL();
    1466:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    while(scanKeyOutside() != parameter){
    146a:	19 c0       	rjmp	.+50     	; 0x149e <testKeyPad+0x1da>
      if(g_changeSec == 1){
    146c:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    1470:	81 30       	cpi	r24, 0x01	; 1
    1472:	41 f4       	brne	.+16     	; 0x1484 <testKeyPad+0x1c0>
        g_changeSec == 0;
        writeCommandLCD(0xcb);
    1474:	8b ec       	ldi	r24, 0xCB	; 203
    1476:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
        writeDataLCD(0x30 + g_timeSec);
    147a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    147e:	80 5d       	subi	r24, 0xD0	; 208
    1480:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
      }
      if(g_timeSec==0){
    1484:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    1488:	81 11       	cpse	r24, r1
    148a:	09 c0       	rjmp	.+18     	; 0x149e <testKeyPad+0x1da>
        result ++;
    148c:	1f 5f       	subi	r17, 0xFF	; 255
        g_errorCode[1] = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <g_errorCode+0x1>
        soundPushButton();
    1494:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
        soundPushButton();
    1498:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
        break;
    149c:	04 c0       	rjmp	.+8      	; 0x14a6 <testKeyPad+0x1e2>
      g_lowerLineLcd[6] = i + 0x30;
      parameter = i + 0x30;
    }
    printLcdU();
    printLcdL();
    while(scanKeyOutside() != parameter){
    149e:	0e 94 1c 02 	call	0x438	; 0x438 <scanKeyOutside>
    14a2:	c8 13       	cpse	r28, r24
    14a4:	e3 cf       	rjmp	.-58     	; 0x146c <testKeyPad+0x1a8>
  g_uperLineLcd[3]='t'; g_uperLineLcd[4]=' '; g_uperLineLcd[5]='k';
  g_uperLineLcd[6]='e'; g_uperLineLcd[7]='y'; g_uperLineLcd[8]=' ';
  g_uperLineLcd[9]='O'; g_uperLineLcd[10]='u'; g_uperLineLcd[11]='t';
  g_uperLineLcd[12]='s'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='d';
  g_uperLineLcd[15]='e';
  for(i = 0; i < 12; i++){
    14a6:	df 5f       	subi	r29, 0xFF	; 255
    14a8:	dc 30       	cpi	r29, 0x0C	; 12
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <testKeyPad+0x1ea>
    14ac:	ad cf       	rjmp	.-166    	; 0x1408 <testKeyPad+0x144>
        soundPushButton();
        break;
      }
    }
  }
  g_checkLock = 0;
    14ae:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <g_checkLock>
  g_checkUnlock = 0;
    14b2:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <g_checkUnlock>
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]='T';
    14b6:	e6 e0       	ldi	r30, 0x06	; 6
    14b8:	f2 e0       	ldi	r31, 0x02	; 2
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	80 83       	st	Z, r24
    14be:	81 83       	std	Z+1, r24	; 0x01
    14c0:	94 e5       	ldi	r25, 0x54	; 84
    14c2:	92 83       	std	Z+2, r25	; 0x02
  g_uperLineLcd[3]='E'; g_uperLineLcd[4]='S'; g_uperLineLcd[5]='T';
    14c4:	25 e4       	ldi	r18, 0x45	; 69
    14c6:	23 83       	std	Z+3, r18	; 0x03
    14c8:	23 e5       	ldi	r18, 0x53	; 83
    14ca:	24 83       	std	Z+4, r18	; 0x04
    14cc:	95 83       	std	Z+5, r25	; 0x05
  g_uperLineLcd[6]=' '; g_uperLineLcd[7]='S'; g_uperLineLcd[8]='W';
    14ce:	86 83       	std	Z+6, r24	; 0x06
    14d0:	27 83       	std	Z+7, r18	; 0x07
    14d2:	27 e5       	ldi	r18, 0x57	; 87
    14d4:	20 87       	std	Z+8, r18	; 0x08
  g_uperLineLcd[9]='I'; g_uperLineLcd[10]='T'; g_uperLineLcd[11]='C';
    14d6:	29 e4       	ldi	r18, 0x49	; 73
    14d8:	21 87       	std	Z+9, r18	; 0x09
    14da:	92 87       	std	Z+10, r25	; 0x0a
    14dc:	93 e4       	ldi	r25, 0x43	; 67
    14de:	93 87       	std	Z+11, r25	; 0x0b
  g_uperLineLcd[12]='H'; g_uperLineLcd[13]=' '; g_uperLineLcd[14]=' ';
    14e0:	98 e4       	ldi	r25, 0x48	; 72
    14e2:	94 87       	std	Z+12, r25	; 0x0c
    14e4:	85 87       	std	Z+13, r24	; 0x0d
    14e6:	86 87       	std	Z+14, r24	; 0x0e
  g_uperLineLcd[15]=' ';
    14e8:	87 87       	std	Z+15, r24	; 0x0f
  g_lowerLineLcd[0]='U'; g_lowerLineLcd[1]='n'; g_lowerLineLcd[2]='l';
    14ea:	e2 ef       	ldi	r30, 0xF2	; 242
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	95 e5       	ldi	r25, 0x55	; 85
    14f0:	90 83       	st	Z, r25
    14f2:	9e e6       	ldi	r25, 0x6E	; 110
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	9c e6       	ldi	r25, 0x6C	; 108
    14f8:	92 83       	std	Z+2, r25	; 0x02
  g_lowerLineLcd[3]='o'; g_lowerLineLcd[4]='c'; g_lowerLineLcd[5]='k';
    14fa:	9f e6       	ldi	r25, 0x6F	; 111
    14fc:	93 83       	std	Z+3, r25	; 0x03
    14fe:	93 e6       	ldi	r25, 0x63	; 99
    1500:	94 83       	std	Z+4, r25	; 0x04
    1502:	2b e6       	ldi	r18, 0x6B	; 107
    1504:	25 83       	std	Z+5, r18	; 0x05
  g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='t'; g_lowerLineLcd[8]='e';
    1506:	86 83       	std	Z+6, r24	; 0x06
    1508:	44 e7       	ldi	r20, 0x74	; 116
    150a:	47 83       	std	Z+7, r20	; 0x07
    150c:	25 e6       	ldi	r18, 0x65	; 101
    150e:	20 87       	std	Z+8, r18	; 0x08
  g_lowerLineLcd[9]='s'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]=' ';
    1510:	33 e7       	ldi	r19, 0x73	; 115
    1512:	31 87       	std	Z+9, r19	; 0x09
    1514:	42 87       	std	Z+10, r20	; 0x0a
    1516:	83 87       	std	Z+11, r24	; 0x0b
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]='s'; g_lowerLineLcd[14]='e';
    1518:	84 87       	std	Z+12, r24	; 0x0c
    151a:	35 87       	std	Z+13, r19	; 0x0d
    151c:	26 87       	std	Z+14, r18	; 0x0e
  g_lowerLineLcd[15]='c';
    151e:	97 87       	std	Z+15, r25	; 0x0f
  printLcdU();
    1520:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    1524:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  g_timeSec = 5;
    1528:	85 e0       	ldi	r24, 0x05	; 5
    152a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
  while(g_checkUnlock == 0){
    152e:	1b c0       	rjmp	.+54     	; 0x1566 <testKeyPad+0x2a2>
    if(g_changeSec == 1){
    1530:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	51 f4       	brne	.+20     	; 0x154c <testKeyPad+0x288>
      g_changeSec = 0;
    1538:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_changeSec>
      writeCommandLCD(0xcb);
    153c:	8b ec       	ldi	r24, 0xCB	; 203
    153e:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
      writeDataLCD(0x30 + g_timeSec);
    1542:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    1546:	80 5d       	subi	r24, 0xD0	; 208
    1548:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    }
    if(g_timeSec == 0){
    154c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    1550:	81 11       	cpse	r24, r1
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <testKeyPad+0x2a2>
      result ++;
    1554:	1f 5f       	subi	r17, 0xFF	; 255
      g_errorCode[2] = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <g_errorCode+0x2>
      soundPushButton();
    155c:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      soundPushButton();
    1560:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      break;
    1564:	04 c0       	rjmp	.+8      	; 0x156e <testKeyPad+0x2aa>
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]='s'; g_lowerLineLcd[14]='e';
  g_lowerLineLcd[15]='c';
  printLcdU();
  printLcdL();
  g_timeSec = 5;
  while(g_checkUnlock == 0){
    1566:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <g_checkUnlock>
    156a:	88 23       	and	r24, r24
    156c:	09 f3       	breq	.-62     	; 0x1530 <testKeyPad+0x26c>
      soundPushButton();
      soundPushButton();
      break;
    }
  }
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]='T';
    156e:	e6 e0       	ldi	r30, 0x06	; 6
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	80 e2       	ldi	r24, 0x20	; 32
    1574:	80 83       	st	Z, r24
    1576:	81 83       	std	Z+1, r24	; 0x01
    1578:	94 e5       	ldi	r25, 0x54	; 84
    157a:	92 83       	std	Z+2, r25	; 0x02
  g_uperLineLcd[3]='E'; g_uperLineLcd[4]='S'; g_uperLineLcd[5]='T';
    157c:	25 e4       	ldi	r18, 0x45	; 69
    157e:	23 83       	std	Z+3, r18	; 0x03
    1580:	23 e5       	ldi	r18, 0x53	; 83
    1582:	24 83       	std	Z+4, r18	; 0x04
    1584:	95 83       	std	Z+5, r25	; 0x05
  g_uperLineLcd[6]=' '; g_uperLineLcd[7]='S'; g_uperLineLcd[8]='W';
    1586:	86 83       	std	Z+6, r24	; 0x06
    1588:	27 83       	std	Z+7, r18	; 0x07
    158a:	27 e5       	ldi	r18, 0x57	; 87
    158c:	20 87       	std	Z+8, r18	; 0x08
  g_uperLineLcd[9]='I'; g_uperLineLcd[10]='T'; g_uperLineLcd[11]='C';
    158e:	29 e4       	ldi	r18, 0x49	; 73
    1590:	21 87       	std	Z+9, r18	; 0x09
    1592:	92 87       	std	Z+10, r25	; 0x0a
    1594:	23 e4       	ldi	r18, 0x43	; 67
    1596:	23 87       	std	Z+11, r18	; 0x0b
  g_uperLineLcd[12]='H'; g_uperLineLcd[13]=' '; g_uperLineLcd[14]=' ';
    1598:	28 e4       	ldi	r18, 0x48	; 72
    159a:	24 87       	std	Z+12, r18	; 0x0c
    159c:	85 87       	std	Z+13, r24	; 0x0d
    159e:	86 87       	std	Z+14, r24	; 0x0e
  g_uperLineLcd[15]=' ';
    15a0:	87 87       	std	Z+15, r24	; 0x0f
  g_lowerLineLcd[0]='L'; g_lowerLineLcd[1]='o'; g_lowerLineLcd[2]='c';
    15a2:	e2 ef       	ldi	r30, 0xF2	; 242
    15a4:	f1 e0       	ldi	r31, 0x01	; 1
    15a6:	2c e4       	ldi	r18, 0x4C	; 76
    15a8:	20 83       	st	Z, r18
    15aa:	2f e6       	ldi	r18, 0x6F	; 111
    15ac:	21 83       	std	Z+1, r18	; 0x01
    15ae:	23 e6       	ldi	r18, 0x63	; 99
    15b0:	22 83       	std	Z+2, r18	; 0x02
  g_lowerLineLcd[3]='k'; g_lowerLineLcd[4]=' '; g_lowerLineLcd[5]='T';
    15b2:	3b e6       	ldi	r19, 0x6B	; 107
    15b4:	33 83       	std	Z+3, r19	; 0x03
    15b6:	84 83       	std	Z+4, r24	; 0x04
    15b8:	95 83       	std	Z+5, r25	; 0x05
  g_lowerLineLcd[6]='e'; g_lowerLineLcd[7]='s'; g_lowerLineLcd[8]='t';
    15ba:	95 e6       	ldi	r25, 0x65	; 101
    15bc:	96 83       	std	Z+6, r25	; 0x06
    15be:	33 e7       	ldi	r19, 0x73	; 115
    15c0:	37 83       	std	Z+7, r19	; 0x07
    15c2:	44 e7       	ldi	r20, 0x74	; 116
    15c4:	40 87       	std	Z+8, r20	; 0x08
  g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]=' ';
    15c6:	81 87       	std	Z+9, r24	; 0x09
    15c8:	82 87       	std	Z+10, r24	; 0x0a
    15ca:	83 87       	std	Z+11, r24	; 0x0b
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]='s'; g_lowerLineLcd[14]='e';
    15cc:	84 87       	std	Z+12, r24	; 0x0c
    15ce:	35 87       	std	Z+13, r19	; 0x0d
    15d0:	96 87       	std	Z+14, r25	; 0x0e
  g_lowerLineLcd[15]='c';
    15d2:	27 87       	std	Z+15, r18	; 0x0f
  printLcdU();
    15d4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    15d8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  g_timeSec = 5;
    15dc:	85 e0       	ldi	r24, 0x05	; 5
    15de:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
  while(g_checkLock == 0){
    15e2:	1b c0       	rjmp	.+54     	; 0x161a <testKeyPad+0x356>
    if(g_changeSec == 1){
    15e4:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	51 f4       	brne	.+20     	; 0x1600 <testKeyPad+0x33c>
      g_changeSec = 0;
    15ec:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_changeSec>
      writeCommandLCD(0xcb);
    15f0:	8b ec       	ldi	r24, 0xCB	; 203
    15f2:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
      writeDataLCD(0x30 + g_timeSec);
    15f6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    15fa:	80 5d       	subi	r24, 0xD0	; 208
    15fc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    }
    if(g_timeSec == 0){
    1600:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    1604:	81 11       	cpse	r24, r1
    1606:	09 c0       	rjmp	.+18     	; 0x161a <testKeyPad+0x356>
      result ++;
    1608:	1f 5f       	subi	r17, 0xFF	; 255
      g_errorCode[2] = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <g_errorCode+0x2>
      soundPushButton();
    1610:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      soundPushButton();
    1614:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      break;
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <testKeyPad+0x35e>
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]='s'; g_lowerLineLcd[14]='e';
  g_lowerLineLcd[15]='c';
  printLcdU();
  printLcdL();
  g_timeSec = 5;
  while(g_checkLock == 0){
    161a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <g_checkLock>
    161e:	88 23       	and	r24, r24
    1620:	09 f3       	breq	.-62     	; 0x15e4 <testKeyPad+0x320>
      soundPushButton();
      soundPushButton();
      break;
    }
  }
  testting = 0;
    1622:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <testting>
  g_changeStateLcd = 1;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
  return result;
}
    162c:	81 2f       	mov	r24, r17
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	08 95       	ret

00001636 <testDisplay>:
//for testting
unsigned char testDisplay(){
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
  testting = 1;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <testting>
  unsigned char result = 0;
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]='T';
    1642:	e6 e0       	ldi	r30, 0x06	; 6
    1644:	f2 e0       	ldi	r31, 0x02	; 2
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	80 83       	st	Z, r24
    164a:	81 83       	std	Z+1, r24	; 0x01
    164c:	54 e5       	ldi	r21, 0x54	; 84
    164e:	52 83       	std	Z+2, r21	; 0x02
  g_uperLineLcd[3]='e'; g_uperLineLcd[4]='s'; g_uperLineLcd[5]='t';
    1650:	45 e6       	ldi	r20, 0x65	; 101
    1652:	43 83       	std	Z+3, r20	; 0x03
    1654:	23 e7       	ldi	r18, 0x73	; 115
    1656:	24 83       	std	Z+4, r18	; 0x04
    1658:	94 e7       	ldi	r25, 0x74	; 116
    165a:	95 83       	std	Z+5, r25	; 0x05
  g_uperLineLcd[6]=' '; g_uperLineLcd[7]='D'; g_uperLineLcd[8]='i';
    165c:	86 83       	std	Z+6, r24	; 0x06
    165e:	34 e4       	ldi	r19, 0x44	; 68
    1660:	37 83       	std	Z+7, r19	; 0x07
    1662:	39 e6       	ldi	r19, 0x69	; 105
    1664:	30 87       	std	Z+8, r19	; 0x08
  g_uperLineLcd[9]='s'; g_uperLineLcd[10]='p'; g_uperLineLcd[11]='l';
    1666:	21 87       	std	Z+9, r18	; 0x09
    1668:	60 e7       	ldi	r22, 0x70	; 112
    166a:	62 87       	std	Z+10, r22	; 0x0a
    166c:	6c e6       	ldi	r22, 0x6C	; 108
    166e:	63 87       	std	Z+11, r22	; 0x0b
  g_uperLineLcd[12]='a'; g_uperLineLcd[13]='y'; g_uperLineLcd[14]=' ';
    1670:	61 e6       	ldi	r22, 0x61	; 97
    1672:	64 87       	std	Z+12, r22	; 0x0c
    1674:	79 e7       	ldi	r23, 0x79	; 121
    1676:	75 87       	std	Z+13, r23	; 0x0d
    1678:	86 87       	std	Z+14, r24	; 0x0e
  g_uperLineLcd[15]=' ';
    167a:	87 87       	std	Z+15, r24	; 0x0f
  g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='S'; g_lowerLineLcd[2]='t';
    167c:	e2 ef       	ldi	r30, 0xF2	; 242
    167e:	f1 e0       	ldi	r31, 0x01	; 1
    1680:	80 83       	st	Z, r24
    1682:	73 e5       	ldi	r23, 0x53	; 83
    1684:	71 83       	std	Z+1, r23	; 0x01
    1686:	92 83       	std	Z+2, r25	; 0x02
  g_lowerLineLcd[3]='a'; g_lowerLineLcd[4]='r'; g_lowerLineLcd[5]='t';
    1688:	63 83       	std	Z+3, r22	; 0x03
    168a:	62 e7       	ldi	r22, 0x72	; 114
    168c:	64 83       	std	Z+4, r22	; 0x04
    168e:	95 83       	std	Z+5, r25	; 0x05
  g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='T'; g_lowerLineLcd[8]='e';
    1690:	86 83       	std	Z+6, r24	; 0x06
    1692:	57 83       	std	Z+7, r21	; 0x07
    1694:	40 87       	std	Z+8, r20	; 0x08
  g_lowerLineLcd[9]='s'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]='t';
    1696:	21 87       	std	Z+9, r18	; 0x09
    1698:	92 87       	std	Z+10, r25	; 0x0a
    169a:	93 87       	std	Z+11, r25	; 0x0b
  g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='n'; g_lowerLineLcd[14]='g';
    169c:	34 87       	std	Z+12, r19	; 0x0c
    169e:	9e e6       	ldi	r25, 0x6E	; 110
    16a0:	95 87       	std	Z+13, r25	; 0x0d
    16a2:	97 e6       	ldi	r25, 0x67	; 103
    16a4:	96 87       	std	Z+14, r25	; 0x0e
  g_lowerLineLcd[15]=' ';
    16a6:	87 87       	std	Z+15, r24	; 0x0f
  printLcdU();
    16a8:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    16ac:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    16b0:	2f ef       	ldi	r18, 0xFF	; 255
    16b2:	80 e7       	ldi	r24, 0x70	; 112
    16b4:	92 e0       	ldi	r25, 0x02	; 2
    16b6:	21 50       	subi	r18, 0x01	; 1
    16b8:	80 40       	sbci	r24, 0x00	; 0
    16ba:	90 40       	sbci	r25, 0x00	; 0
    16bc:	e1 f7       	brne	.-8      	; 0x16b6 <testDisplay+0x80>
    16be:	00 c0       	rjmp	.+0      	; 0x16c0 <testDisplay+0x8a>
    16c0:	00 00       	nop
  _delay_ms(100);
  writeCommandLCD(0xcd);
    16c2:	8d ec       	ldi	r24, 0xCD	; 205
    16c4:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  writeDataLCD('.');
    16c8:	8e e2       	ldi	r24, 0x2E	; 46
    16ca:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    16ce:	8f e3       	ldi	r24, 0x3F	; 63
    16d0:	9c e9       	ldi	r25, 0x9C	; 156
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <testDisplay+0x9c>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <testDisplay+0xa2>
    16d8:	00 00       	nop
  _delay_ms(20);
  writeDataLCD('.');
    16da:	8e e2       	ldi	r24, 0x2E	; 46
    16dc:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    16e0:	9f e7       	ldi	r25, 0x7F	; 127
    16e2:	28 e3       	ldi	r18, 0x38	; 56
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	91 50       	subi	r25, 0x01	; 1
    16e8:	20 40       	sbci	r18, 0x00	; 0
    16ea:	80 40       	sbci	r24, 0x00	; 0
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <testDisplay+0xb0>
    16ee:	00 c0       	rjmp	.+0      	; 0x16f0 <testDisplay+0xba>
    16f0:	00 00       	nop
  _delay_ms(50);
  writeDataLCD('.');
    16f2:	8e e2       	ldi	r24, 0x2E	; 46
    16f4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	22 e5       	ldi	r18, 0x52	; 82
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	20 40       	sbci	r18, 0x00	; 0
    1702:	80 40       	sbci	r24, 0x00	; 0
    1704:	e1 f7       	brne	.-8      	; 0x16fe <testDisplay+0xc8>
    1706:	00 c0       	rjmp	.+0      	; 0x1708 <testDisplay+0xd2>
    1708:	00 00       	nop
  _delay_ms(300);
  writeCommandLCD(0x01);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  unsigned char i = 0;
  writeCommandLCD(0x80);
    1710:	80 e8       	ldi	r24, 0x80	; 128
    1712:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  for(i = 0; i < 16; i++){
    1716:	c0 e0       	ldi	r28, 0x00	; 0
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <testDisplay+0xfe>
    writeDataLCD(0xff);
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    1720:	9f e7       	ldi	r25, 0x7F	; 127
    1722:	28 e3       	ldi	r18, 0x38	; 56
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	91 50       	subi	r25, 0x01	; 1
    1728:	20 40       	sbci	r18, 0x00	; 0
    172a:	80 40       	sbci	r24, 0x00	; 0
    172c:	e1 f7       	brne	.-8      	; 0x1726 <testDisplay+0xf0>
    172e:	00 c0       	rjmp	.+0      	; 0x1730 <testDisplay+0xfa>
    1730:	00 00       	nop
  writeDataLCD('.');
  _delay_ms(300);
  writeCommandLCD(0x01);
  unsigned char i = 0;
  writeCommandLCD(0x80);
  for(i = 0; i < 16; i++){
    1732:	cf 5f       	subi	r28, 0xFF	; 255
    1734:	c0 31       	cpi	r28, 0x10	; 16
    1736:	88 f3       	brcs	.-30     	; 0x171a <testDisplay+0xe4>
    writeDataLCD(0xff);
    _delay_ms(50);
  }
  writeCommandLCD(0xc0);
    1738:	80 ec       	ldi	r24, 0xC0	; 192
    173a:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  for(i = 0; i < 16; i++){
    173e:	c0 e0       	ldi	r28, 0x00	; 0
    1740:	0d c0       	rjmp	.+26     	; 0x175c <testDisplay+0x126>
    writeDataLCD(0xff);
    1742:	8f ef       	ldi	r24, 0xFF	; 255
    1744:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    1748:	9f e7       	ldi	r25, 0x7F	; 127
    174a:	28 e3       	ldi	r18, 0x38	; 56
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	91 50       	subi	r25, 0x01	; 1
    1750:	20 40       	sbci	r18, 0x00	; 0
    1752:	80 40       	sbci	r24, 0x00	; 0
    1754:	e1 f7       	brne	.-8      	; 0x174e <testDisplay+0x118>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <testDisplay+0x122>
    1758:	00 00       	nop
  for(i = 0; i < 16; i++){
    writeDataLCD(0xff);
    _delay_ms(50);
  }
  writeCommandLCD(0xc0);
  for(i = 0; i < 16; i++){
    175a:	cf 5f       	subi	r28, 0xFF	; 255
    175c:	c0 31       	cpi	r28, 0x10	; 16
    175e:	88 f3       	brcs	.-30     	; 0x1742 <testDisplay+0x10c>
    1760:	9f ef       	ldi	r25, 0xFF	; 255
    1762:	24 e3       	ldi	r18, 0x34	; 52
    1764:	8c e0       	ldi	r24, 0x0C	; 12
    1766:	91 50       	subi	r25, 0x01	; 1
    1768:	20 40       	sbci	r18, 0x00	; 0
    176a:	80 40       	sbci	r24, 0x00	; 0
    176c:	e1 f7       	brne	.-8      	; 0x1766 <testDisplay+0x130>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <testDisplay+0x13a>
    1770:	00 00       	nop
    writeDataLCD(0xff);
    _delay_ms(50);
  }
  _delay_ms(500);
  g_uperLineLcd[0]='P'; g_uperLineLcd[1]='r'; g_uperLineLcd[2]='e';
    1772:	e6 e0       	ldi	r30, 0x06	; 6
    1774:	f2 e0       	ldi	r31, 0x02	; 2
    1776:	60 e5       	ldi	r22, 0x50	; 80
    1778:	60 83       	st	Z, r22
    177a:	22 e7       	ldi	r18, 0x72	; 114
    177c:	21 83       	std	Z+1, r18	; 0x01
    177e:	55 e6       	ldi	r21, 0x65	; 101
    1780:	52 83       	std	Z+2, r21	; 0x02
  g_uperLineLcd[3]='s'; g_uperLineLcd[4]='s'; g_uperLineLcd[5]=' ';
    1782:	93 e7       	ldi	r25, 0x73	; 115
    1784:	93 83       	std	Z+3, r25	; 0x03
    1786:	94 83       	std	Z+4, r25	; 0x04
    1788:	80 e2       	ldi	r24, 0x20	; 32
    178a:	85 83       	std	Z+5, r24	; 0x05
  g_uperLineLcd[6]='*'; g_uperLineLcd[7]=' '; g_uperLineLcd[8]='i';
    178c:	3a e2       	ldi	r19, 0x2A	; 42
    178e:	36 83       	std	Z+6, r19	; 0x06
    1790:	87 83       	std	Z+7, r24	; 0x07
    1792:	39 e6       	ldi	r19, 0x69	; 105
    1794:	30 87       	std	Z+8, r19	; 0x08
  g_uperLineLcd[9]='f'; g_uperLineLcd[10]=' '; g_uperLineLcd[11]='E';
    1796:	46 e6       	ldi	r20, 0x66	; 102
    1798:	41 87       	std	Z+9, r20	; 0x09
    179a:	82 87       	std	Z+10, r24	; 0x0a
    179c:	35 e4       	ldi	r19, 0x45	; 69
    179e:	33 87       	std	Z+11, r19	; 0x0b
  g_uperLineLcd[12]='R'; g_uperLineLcd[13]='R'; g_uperLineLcd[14]='O';
    17a0:	32 e5       	ldi	r19, 0x52	; 82
    17a2:	34 87       	std	Z+12, r19	; 0x0c
    17a4:	35 87       	std	Z+13, r19	; 0x0d
    17a6:	7f e4       	ldi	r23, 0x4F	; 79
    17a8:	76 87       	std	Z+14, r23	; 0x0e
  g_uperLineLcd[15]='R';
    17aa:	37 87       	std	Z+15, r19	; 0x0f
  g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    17ac:	e2 ef       	ldi	r30, 0xF2	; 242
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	60 83       	st	Z, r22
    17b2:	21 83       	std	Z+1, r18	; 0x01
    17b4:	52 83       	std	Z+2, r21	; 0x02
  g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]='#';
    17b6:	93 83       	std	Z+3, r25	; 0x03
    17b8:	94 83       	std	Z+4, r25	; 0x04
    17ba:	93 e2       	ldi	r25, 0x23	; 35
    17bc:	95 83       	std	Z+5, r25	; 0x05
  g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='I'; g_lowerLineLcd[8]='f';
    17be:	86 83       	std	Z+6, r24	; 0x06
    17c0:	99 e4       	ldi	r25, 0x49	; 73
    17c2:	97 83       	std	Z+7, r25	; 0x07
    17c4:	40 87       	std	Z+8, r20	; 0x08
  g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]='N'; g_lowerLineLcd[11]='o';
    17c6:	81 87       	std	Z+9, r24	; 0x09
    17c8:	8e e4       	ldi	r24, 0x4E	; 78
    17ca:	82 87       	std	Z+10, r24	; 0x0a
    17cc:	8f e6       	ldi	r24, 0x6F	; 111
    17ce:	83 87       	std	Z+11, r24	; 0x0b
  g_lowerLineLcd[12]='r'; g_lowerLineLcd[13]='m'; g_lowerLineLcd[14]='a';
    17d0:	24 87       	std	Z+12, r18	; 0x0c
    17d2:	8d e6       	ldi	r24, 0x6D	; 109
    17d4:	85 87       	std	Z+13, r24	; 0x0d
    17d6:	81 e6       	ldi	r24, 0x61	; 97
    17d8:	86 87       	std	Z+14, r24	; 0x0e
  g_lowerLineLcd[15]='l';
    17da:	8c e6       	ldi	r24, 0x6C	; 108
    17dc:	87 87       	std	Z+15, r24	; 0x0f
  soundPushButton();
    17de:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
  printLcdL();
    17e2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  printLcdU();
    17e6:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  g_timeSec = 5;
    17ea:	85 e0       	ldi	r24, 0x05	; 5
    17ec:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
  char run = 1;
    17f0:	d1 e0       	ldi	r29, 0x01	; 1
  return result;
}
//for testting
unsigned char testDisplay(){
  testting = 1;
  unsigned char result = 0;
    17f2:	10 e0       	ldi	r17, 0x00	; 0
  printLcdU();
  g_timeSec = 5;
  char run = 1;
  unsigned char keyTemp = 0xff;
  do{
    keyTemp = scanKeyInside();
    17f4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <scanKeyInside>
    17f8:	c8 2f       	mov	r28, r24
    if(g_timeSec == 0){
    17fa:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__data_end>
    17fe:	81 11       	cpse	r24, r1
    1800:	0d c0       	rjmp	.+26     	; 0x181c <testDisplay+0x1e6>
      result ++;
    1802:	1f 5f       	subi	r17, 0xFF	; 255
      g_errorCode[0] = 1;
    1804:	e1 ee       	ldi	r30, 0xE1	; 225
    1806:	f1 e0       	ldi	r31, 0x01	; 1
    1808:	d1 e0       	ldi	r29, 0x01	; 1
    180a:	d0 83       	st	Z, r29
      g_errorCode[3] = 1;
    180c:	d3 83       	std	Z+3, r29	; 0x03
      soundPushButton();
    180e:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      soundPushButton();
    1812:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
      g_changeStateLcd = 1;
    1816:	d0 93 d2 01 	sts	0x01D2, r29	; 0x8001d2 <g_changeStateLcd>
      run = 0; 
    181a:	d0 e0       	ldi	r29, 0x00	; 0
    }
    if(keyTemp == 0x2a){
    181c:	ca 32       	cpi	r28, 0x2A	; 42
    181e:	39 f4       	brne	.+14     	; 0x182e <testDisplay+0x1f8>
      result ++;
    1820:	1f 5f       	subi	r17, 0xFF	; 255
      g_errorCode[3] = 1;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <g_errorCode+0x3>
      g_changeStateLcd = 1;
    1828:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
      run = 0;
    182c:	d0 e0       	ldi	r29, 0x00	; 0
    }
    if(keyTemp == 0x23){
    182e:	c3 32       	cpi	r28, 0x23	; 35
    1830:	31 f4       	brne	.+12     	; 0x183e <testDisplay+0x208>
      g_errorCode[3] = 0;
    1832:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <g_errorCode+0x3>
      g_changeStateLcd = 1;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
      run = 0;
    183c:	d0 e0       	ldi	r29, 0x00	; 0
    }
  }while(run);
    183e:	d1 11       	cpse	r29, r1
    1840:	d9 cf       	rjmp	.-78     	; 0x17f4 <testDisplay+0x1be>
  testting = 0;
    1842:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <testting>
  return result;
}
    1846:	81 2f       	mov	r24, r17
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	08 95       	ret

00001850 <operationLcd>:
  }else if(g_operationCode == 6){
    //uncomplete init system
  }
}

void operationLcd(unsigned char key){
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	a4 97       	sbiw	r28, 0x24	; 36
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
  key = scanKeyInside();
    1868:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <scanKeyInside>
    186c:	18 2f       	mov	r17, r24
  if(key != 0xff){
    186e:	8f 3f       	cpi	r24, 0xFF	; 255
    1870:	11 f0       	breq	.+4      	; 0x1876 <operationLcd+0x26>
    g_priorityState = 0;
    1872:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <g_priorityState>
  }
  if(key == 0xff){
    1876:	1f 3f       	cpi	r17, 0xFF	; 255
    1878:	71 f4       	brne	.+28     	; 0x1896 <operationLcd+0x46>
    if(g_changeStateLcd){
    187a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <g_changeStateLcd>
    187e:	88 23       	and	r24, r24
    1880:	19 f0       	breq	.+6      	; 0x1888 <operationLcd+0x38>
      key = 0xfe;
      g_changeStateLcd = 0;
    1882:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <g_changeStateLcd>
  if(key != 0xff){
    g_priorityState = 0;
  }
  if(key == 0xff){
    if(g_changeStateLcd){
      key = 0xfe;
    1886:	1e ef       	ldi	r17, 0xFE	; 254
      g_changeStateLcd = 0;
    }
    if(g_changeSec){
    1888:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <g_changeSec>
    188c:	88 23       	and	r24, r24
    188e:	19 f0       	breq	.+6      	; 0x1896 <operationLcd+0x46>
      key = 0xfe;
      g_changeSec = 0;
    1890:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <g_changeSec>
    if(g_changeStateLcd){
      key = 0xfe;
      g_changeStateLcd = 0;
    }
    if(g_changeSec){
      key = 0xfe;
    1894:	1e ef       	ldi	r17, 0xFE	; 254
      g_changeSec = 0;
    }
  }
  if(g_priorityState != 1){
    1896:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <g_priorityState>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	11 f4       	brne	.+4      	; 0x18a2 <operationLcd+0x52>
    189e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
    if(key != 0xff){
    18a2:	1f 3f       	cpi	r17, 0xFF	; 255
    18a4:	11 f4       	brne	.+4      	; 0x18aa <operationLcd+0x5a>
    18a6:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
      g_remainLcd = 10;
    18aa:	8a e0       	ldi	r24, 0x0A	; 10
    18ac:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <g_remainLcd>
      //turnonLcd
      if(g_stateCodeLcd == 0){
    18b0:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_stateCodeLcd>
    18b4:	81 11       	cpse	r24, r1
    18b6:	48 c0       	rjmp	.+144    	; 0x1948 <operationLcd+0xf8>
        g_uperLineLcd[0]=' '; g_uperLineLcd[1]='I'; g_uperLineLcd[2]='n';
    18b8:	e6 e0       	ldi	r30, 0x06	; 6
    18ba:	f2 e0       	ldi	r31, 0x02	; 2
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	80 83       	st	Z, r24
    18c0:	59 e4       	ldi	r21, 0x49	; 73
    18c2:	51 83       	std	Z+1, r21	; 0x01
    18c4:	3e e6       	ldi	r19, 0x6E	; 110
    18c6:	32 83       	std	Z+2, r19	; 0x02
        g_uperLineLcd[3]='i'; g_uperLineLcd[4]='t'; g_uperLineLcd[5]='i';
    18c8:	99 e6       	ldi	r25, 0x69	; 105
    18ca:	93 83       	std	Z+3, r25	; 0x03
    18cc:	24 e7       	ldi	r18, 0x74	; 116
    18ce:	24 83       	std	Z+4, r18	; 0x04
    18d0:	95 83       	std	Z+5, r25	; 0x05
        g_uperLineLcd[6]='a'; g_uperLineLcd[7]='l'; g_uperLineLcd[8]='a';
    18d2:	41 e6       	ldi	r20, 0x61	; 97
    18d4:	46 83       	std	Z+6, r20	; 0x06
    18d6:	6c e6       	ldi	r22, 0x6C	; 108
    18d8:	67 83       	std	Z+7, r22	; 0x07
    18da:	40 87       	std	Z+8, r20	; 0x08
        g_uperLineLcd[9]='z'; g_uperLineLcd[10]='a'; g_uperLineLcd[11]='t';
    18dc:	6a e7       	ldi	r22, 0x7A	; 122
    18de:	61 87       	std	Z+9, r22	; 0x09
    18e0:	42 87       	std	Z+10, r20	; 0x0a
    18e2:	23 87       	std	Z+11, r18	; 0x0b
        g_uperLineLcd[12]='i'; g_uperLineLcd[13]='o'; g_uperLineLcd[14]='n';
    18e4:	94 87       	std	Z+12, r25	; 0x0c
    18e6:	4f e6       	ldi	r20, 0x6F	; 111
    18e8:	45 87       	std	Z+13, r20	; 0x0d
    18ea:	36 87       	std	Z+14, r19	; 0x0e
        g_uperLineLcd[15]=' ';
    18ec:	87 87       	std	Z+15, r24	; 0x0f
        g_lowerLineLcd[0]='1'; g_lowerLineLcd[1]='.'; g_lowerLineLcd[2]='I';
    18ee:	e2 ef       	ldi	r30, 0xF2	; 242
    18f0:	f1 e0       	ldi	r31, 0x01	; 1
    18f2:	41 e3       	ldi	r20, 0x31	; 49
    18f4:	40 83       	st	Z, r20
    18f6:	4e e2       	ldi	r20, 0x2E	; 46
    18f8:	41 83       	std	Z+1, r20	; 0x01
    18fa:	52 83       	std	Z+2, r21	; 0x02
        g_lowerLineLcd[3]='n'; g_lowerLineLcd[4]='i'; g_lowerLineLcd[5]='t';
    18fc:	33 83       	std	Z+3, r19	; 0x03
    18fe:	94 83       	std	Z+4, r25	; 0x04
    1900:	25 83       	std	Z+5, r18	; 0x05
        g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]=' ';
    1902:	86 83       	std	Z+6, r24	; 0x06
    1904:	87 83       	std	Z+7, r24	; 0x07
    1906:	80 87       	std	Z+8, r24	; 0x08
        g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]='2';
    1908:	81 87       	std	Z+9, r24	; 0x09
    190a:	82 87       	std	Z+10, r24	; 0x0a
    190c:	82 e3       	ldi	r24, 0x32	; 50
    190e:	83 87       	std	Z+11, r24	; 0x0b
        g_lowerLineLcd[12]='.'; g_lowerLineLcd[13]='O'; g_lowerLineLcd[14]='f';
    1910:	44 87       	std	Z+12, r20	; 0x0c
    1912:	8f e4       	ldi	r24, 0x4F	; 79
    1914:	85 87       	std	Z+13, r24	; 0x0d
    1916:	86 e6       	ldi	r24, 0x66	; 102
    1918:	86 87       	std	Z+14, r24	; 0x0e
        g_lowerLineLcd[15]='f';
    191a:	87 87       	std	Z+15, r24	; 0x0f
        printLcdU();
    191c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
        printLcdL();
    1920:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
        if(key == 0x31){
    1924:	11 33       	cpi	r17, 0x31	; 49
    1926:	39 f4       	brne	.+14     	; 0x1936 <operationLcd+0xe6>
          g_stateCodeLcd = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          key = 0xff;
          initStateLcd1();
    192e:	0e 94 44 07 	call	0xe88	; 0xe88 <initStateLcd1>
    1932:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x32){
    1936:	12 33       	cpi	r17, 0x32	; 50
    1938:	11 f0       	breq	.+4      	; 0x193e <operationLcd+0xee>
    193a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
          writeCommandLCD(0x08);
    193e:	88 e0       	ldi	r24, 0x08	; 8
    1940:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
    1944:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 1){
    1948:	81 30       	cpi	r24, 0x01	; 1
    194a:	09 f0       	breq	.+2      	; 0x194e <operationLcd+0xfe>
    194c:	82 c0       	rjmp	.+260    	; 0x1a52 <operationLcd+0x202>
        unsigned char i = 0;
        if(key >= 0x30 && key <= 0x39){
    194e:	90 ed       	ldi	r25, 0xD0	; 208
    1950:	91 0f       	add	r25, r17
    1952:	9a 30       	cpi	r25, 0x0A	; 10
    1954:	d8 f4       	brcc	.+54     	; 0x198c <operationLcd+0x13c>
          if(g_poiterPinInside != 4){
    1956:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <g_poiterPinInside>
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	39 f0       	breq	.+14     	; 0x196c <operationLcd+0x11c>
            g_lowerLineLcd[12+g_poiterPinInside] = key;
    195e:	e8 2f       	mov	r30, r24
    1960:	08 2e       	mov	r0, r24
    1962:	00 0c       	add	r0, r0
    1964:	ff 0b       	sbc	r31, r31
    1966:	e2 50       	subi	r30, 0x02	; 2
    1968:	fe 4f       	sbci	r31, 0xFE	; 254
    196a:	10 83       	st	Z, r17
          }
          g_pinInputInside[g_poiterPinInside] = key - 0x30;
    196c:	e8 2f       	mov	r30, r24
    196e:	08 2e       	mov	r0, r24
    1970:	00 0c       	add	r0, r0
    1972:	ff 0b       	sbc	r31, r31
    1974:	eb 51       	subi	r30, 0x1B	; 27
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	90 83       	st	Z, r25
          g_poiterPinInside ++;
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <g_poiterPinInside>
          if(g_poiterPinInside == 5){
    1980:	85 30       	cpi	r24, 0x05	; 5
    1982:	09 f0       	breq	.+2      	; 0x1986 <operationLcd+0x136>
    1984:	54 c0       	rjmp	.+168    	; 0x1a2e <operationLcd+0x1de>
            g_poiterPinInside = 0;
    1986:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <g_poiterPinInside>
    198a:	51 c0       	rjmp	.+162    	; 0x1a2e <operationLcd+0x1de>
          }
        }else if(key == 0x23){
    198c:	13 32       	cpi	r17, 0x23	; 35
    198e:	09 f0       	breq	.+2      	; 0x1992 <operationLcd+0x142>
    1990:	4e c0       	rjmp	.+156    	; 0x1a2e <operationLcd+0x1de>
          if(g_poiterPinInside == 4){
    1992:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <g_poiterPinInside>
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	09 f0       	breq	.+2      	; 0x199c <operationLcd+0x14c>
    199a:	49 c0       	rjmp	.+146    	; 0x1a2e <operationLcd+0x1de>
            g_pinCorrect[0] = g_pinInputInside[0];
    199c:	a5 ee       	ldi	r26, 0xE5	; 229
    199e:	b1 e0       	ldi	r27, 0x01	; 1
    19a0:	5c 91       	ld	r21, X
    19a2:	ea e0       	ldi	r30, 0x0A	; 10
    19a4:	f1 e0       	ldi	r31, 0x01	; 1
    19a6:	50 83       	st	Z, r21
            g_pinCorrect[1] = g_pinInputInside[1];
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	4c 91       	ld	r20, X
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	41 83       	std	Z+1, r20	; 0x01
            g_pinCorrect[2] = g_pinInputInside[2];
    19b0:	12 96       	adiw	r26, 0x02	; 2
    19b2:	3c 91       	ld	r19, X
    19b4:	12 97       	sbiw	r26, 0x02	; 2
    19b6:	32 83       	std	Z+2, r19	; 0x02
            g_pinCorrect[3] = g_pinInputInside[3];
    19b8:	13 96       	adiw	r26, 0x03	; 3
    19ba:	2c 91       	ld	r18, X
    19bc:	23 83       	std	Z+3, r18	; 0x03
            g_uperLineLcd[0]='A'; g_uperLineLcd[1]='c'; g_uperLineLcd[2]='t';
    19be:	e6 e0       	ldi	r30, 0x06	; 6
    19c0:	f2 e0       	ldi	r31, 0x02	; 2
    19c2:	81 e4       	ldi	r24, 0x41	; 65
    19c4:	80 83       	st	Z, r24
    19c6:	83 e6       	ldi	r24, 0x63	; 99
    19c8:	81 83       	std	Z+1, r24	; 0x01
    19ca:	04 e7       	ldi	r16, 0x74	; 116
    19cc:	02 83       	std	Z+2, r16	; 0x02
            g_uperLineLcd[3]='i'; g_uperLineLcd[4]='v'; g_uperLineLcd[5]='e';
    19ce:	89 e6       	ldi	r24, 0x69	; 105
    19d0:	83 83       	std	Z+3, r24	; 0x03
    19d2:	86 e7       	ldi	r24, 0x76	; 118
    19d4:	84 83       	std	Z+4, r24	; 0x04
    19d6:	95 e6       	ldi	r25, 0x65	; 101
    19d8:	95 83       	std	Z+5, r25	; 0x05
            g_uperLineLcd[6]='C'; g_uperLineLcd[7]='o'; g_uperLineLcd[8]='d';
    19da:	b3 e4       	ldi	r27, 0x43	; 67
    19dc:	b6 83       	std	Z+6, r27	; 0x06
    19de:	af e6       	ldi	r26, 0x6F	; 111
    19e0:	a7 83       	std	Z+7, r26	; 0x07
    19e2:	74 e6       	ldi	r23, 0x64	; 100
    19e4:	70 87       	std	Z+8, r23	; 0x08
            g_uperLineLcd[9]='e'; g_uperLineLcd[10]=':'; g_uperLineLcd[11]=' ';
    19e6:	91 87       	std	Z+9, r25	; 0x09
    19e8:	6a e3       	ldi	r22, 0x3A	; 58
    19ea:	62 87       	std	Z+10, r22	; 0x0a
    19ec:	80 e2       	ldi	r24, 0x20	; 32
    19ee:	83 87       	std	Z+11, r24	; 0x0b
            g_uperLineLcd[12]=g_pinCorrect[0] + 0x30; g_uperLineLcd[13]=g_pinCorrect[1]+0x30;
    19f0:	50 5d       	subi	r21, 0xD0	; 208
    19f2:	54 87       	std	Z+12, r21	; 0x0c
    19f4:	40 5d       	subi	r20, 0xD0	; 208
    19f6:	45 87       	std	Z+13, r20	; 0x0d
            g_uperLineLcd[14]=g_pinCorrect[2] + 0x30; g_uperLineLcd[15]=g_pinCorrect[3]+0x30;
    19f8:	30 5d       	subi	r19, 0xD0	; 208
    19fa:	36 87       	std	Z+14, r19	; 0x0e
    19fc:	20 5d       	subi	r18, 0xD0	; 208
    19fe:	27 87       	std	Z+15, r18	; 0x0f
            g_lowerLineLcd[0]='E'; g_lowerLineLcd[1]='n'; g_lowerLineLcd[2]='t';
    1a00:	e2 ef       	ldi	r30, 0xF2	; 242
    1a02:	f1 e0       	ldi	r31, 0x01	; 1
    1a04:	25 e4       	ldi	r18, 0x45	; 69
    1a06:	20 83       	st	Z, r18
    1a08:	2e e6       	ldi	r18, 0x6E	; 110
    1a0a:	21 83       	std	Z+1, r18	; 0x01
    1a0c:	02 83       	std	Z+2, r16	; 0x02
            g_lowerLineLcd[3]='e'; g_lowerLineLcd[4]='r'; g_lowerLineLcd[5]='C';
    1a0e:	93 83       	std	Z+3, r25	; 0x03
    1a10:	22 e7       	ldi	r18, 0x72	; 114
    1a12:	24 83       	std	Z+4, r18	; 0x04
    1a14:	b5 83       	std	Z+5, r27	; 0x05
            g_lowerLineLcd[6]='o'; g_lowerLineLcd[7]='d'; g_lowerLineLcd[8]='e';
    1a16:	a6 83       	std	Z+6, r26	; 0x06
    1a18:	77 83       	std	Z+7, r23	; 0x07
    1a1a:	90 87       	std	Z+8, r25	; 0x08
            g_lowerLineLcd[9]=':'; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]=' ';
    1a1c:	61 87       	std	Z+9, r22	; 0x09
    1a1e:	82 87       	std	Z+10, r24	; 0x0a
    1a20:	83 87       	std	Z+11, r24	; 0x0b
            g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
    1a22:	84 87       	std	Z+12, r24	; 0x0c
    1a24:	85 87       	std	Z+13, r24	; 0x0d
    1a26:	86 87       	std	Z+14, r24	; 0x0e
            g_lowerLineLcd[15]=' ';
    1a28:	87 87       	std	Z+15, r24	; 0x0f
            g_poiterPinInside = 0;
    1a2a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <g_poiterPinInside>
          }
        }
        printLcdU();
    1a2e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
        printLcdL();
    1a32:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
        if(key == 0x2a){
    1a36:	1a 32       	cpi	r17, 0x2A	; 42
    1a38:	11 f0       	breq	.+4      	; 0x1a3e <operationLcd+0x1ee>
    1a3a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
          g_stateCodeLcd = 2;
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          g_changeStateLcd = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
          key = 0xff;
          initStateLcd2();
    1a4a:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1a4e:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 2){
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <operationLcd+0x208>
    1a56:	a1 c1       	rjmp	.+834    	; 0x1d9a <operationLcd+0x54a>
        g_uperLineLcd[5]=(g_timeSys.hour /10) + 0x30;
    1a58:	a2 e0       	ldi	r26, 0x02	; 2
    1a5a:	b2 e0       	ldi	r27, 0x02	; 2
    1a5c:	13 96       	adiw	r26, 0x03	; 3
    1a5e:	2c 91       	ld	r18, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	e6 e0       	ldi	r30, 0x06	; 6
    1a64:	f2 e0       	ldi	r31, 0x02	; 2
    1a66:	8d ec       	ldi	r24, 0xCD	; 205
    1a68:	28 9f       	mul	r18, r24
    1a6a:	91 2d       	mov	r25, r1
    1a6c:	11 24       	eor	r1, r1
    1a6e:	96 95       	lsr	r25
    1a70:	96 95       	lsr	r25
    1a72:	96 95       	lsr	r25
    1a74:	30 e3       	ldi	r19, 0x30	; 48
    1a76:	39 0f       	add	r19, r25
    1a78:	35 83       	std	Z+5, r19	; 0x05
        g_uperLineLcd[6]=(g_timeSys.hour%10) + 0x30; g_uperLineLcd[8]=(g_timeSys.minute/10)+0x30;
    1a7a:	99 0f       	add	r25, r25
    1a7c:	39 2f       	mov	r19, r25
    1a7e:	33 0f       	add	r19, r19
    1a80:	33 0f       	add	r19, r19
    1a82:	93 0f       	add	r25, r19
    1a84:	29 1b       	sub	r18, r25
    1a86:	20 5d       	subi	r18, 0xD0	; 208
    1a88:	26 83       	std	Z+6, r18	; 0x06
    1a8a:	12 96       	adiw	r26, 0x02	; 2
    1a8c:	2c 91       	ld	r18, X
    1a8e:	12 97       	sbiw	r26, 0x02	; 2
    1a90:	28 9f       	mul	r18, r24
    1a92:	91 2d       	mov	r25, r1
    1a94:	11 24       	eor	r1, r1
    1a96:	96 95       	lsr	r25
    1a98:	96 95       	lsr	r25
    1a9a:	96 95       	lsr	r25
    1a9c:	30 e3       	ldi	r19, 0x30	; 48
    1a9e:	39 0f       	add	r19, r25
    1aa0:	30 87       	std	Z+8, r19	; 0x08
        g_uperLineLcd[9]=(g_timeSys.minute%10) + 0x30; g_uperLineLcd[11]=(g_timeSys.sec/10)+0x30;
    1aa2:	99 0f       	add	r25, r25
    1aa4:	39 2f       	mov	r19, r25
    1aa6:	33 0f       	add	r19, r19
    1aa8:	33 0f       	add	r19, r19
    1aaa:	93 0f       	add	r25, r19
    1aac:	29 1b       	sub	r18, r25
    1aae:	20 5d       	subi	r18, 0xD0	; 208
    1ab0:	21 87       	std	Z+9, r18	; 0x09
    1ab2:	11 96       	adiw	r26, 0x01	; 1
    1ab4:	9c 91       	ld	r25, X
    1ab6:	98 9f       	mul	r25, r24
    1ab8:	81 2d       	mov	r24, r1
    1aba:	11 24       	eor	r1, r1
    1abc:	86 95       	lsr	r24
    1abe:	86 95       	lsr	r24
    1ac0:	86 95       	lsr	r24
    1ac2:	20 e3       	ldi	r18, 0x30	; 48
    1ac4:	28 0f       	add	r18, r24
    1ac6:	23 87       	std	Z+11, r18	; 0x0b
        g_uperLineLcd[12]=(g_timeSys.sec%10) + 0x30;
    1ac8:	88 0f       	add	r24, r24
    1aca:	28 2f       	mov	r18, r24
    1acc:	22 0f       	add	r18, r18
    1ace:	22 0f       	add	r18, r18
    1ad0:	82 0f       	add	r24, r18
    1ad2:	98 1b       	sub	r25, r24
    1ad4:	90 5d       	subi	r25, 0xD0	; 208
    1ad6:	94 87       	std	Z+12, r25	; 0x0c
        if(checkError()){
    1ad8:	0e 94 16 01 	call	0x22c	; 0x22c <checkError>
    1adc:	88 23       	and	r24, r24
    1ade:	19 f0       	breq	.+6      	; 0x1ae6 <operationLcd+0x296>
          g_uperLineLcd[15] = 0xff;
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <g_uperLineLcd+0xf>
        }
        if(stateMenuLcd == 0){
    1ae6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    1aea:	81 11       	cpse	r24, r1
    1aec:	1e c0       	rjmp	.+60     	; 0x1b2a <operationLcd+0x2da>
          g_lowerLineLcd[0]='1'; g_lowerLineLcd[1]='.'; g_lowerLineLcd[2]='E';
    1aee:	e2 ef       	ldi	r30, 0xF2	; 242
    1af0:	f1 e0       	ldi	r31, 0x01	; 1
    1af2:	81 e3       	ldi	r24, 0x31	; 49
    1af4:	80 83       	st	Z, r24
    1af6:	2e e2       	ldi	r18, 0x2E	; 46
    1af8:	21 83       	std	Z+1, r18	; 0x01
    1afa:	85 e4       	ldi	r24, 0x45	; 69
    1afc:	82 83       	std	Z+2, r24	; 0x02
          g_lowerLineLcd[3]='d'; g_lowerLineLcd[4]='i'; g_lowerLineLcd[5]='t';
    1afe:	84 e6       	ldi	r24, 0x64	; 100
    1b00:	83 83       	std	Z+3, r24	; 0x03
    1b02:	99 e6       	ldi	r25, 0x69	; 105
    1b04:	94 83       	std	Z+4, r25	; 0x04
    1b06:	84 e7       	ldi	r24, 0x74	; 116
    1b08:	85 83       	std	Z+5, r24	; 0x05
          g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='2';
    1b0a:	30 e2       	ldi	r19, 0x20	; 32
    1b0c:	36 83       	std	Z+6, r19	; 0x06
    1b0e:	37 83       	std	Z+7, r19	; 0x07
    1b10:	32 e3       	ldi	r19, 0x32	; 50
    1b12:	30 87       	std	Z+8, r19	; 0x08
          g_lowerLineLcd[9]='.'; g_lowerLineLcd[10]='S'; g_lowerLineLcd[11]='t';
    1b14:	21 87       	std	Z+9, r18	; 0x09
    1b16:	23 e5       	ldi	r18, 0x53	; 83
    1b18:	22 87       	std	Z+10, r18	; 0x0a
    1b1a:	83 87       	std	Z+11, r24	; 0x0b
          g_lowerLineLcd[12]='r'; g_lowerLineLcd[13]='i'; g_lowerLineLcd[14]='c';
    1b1c:	22 e7       	ldi	r18, 0x72	; 114
    1b1e:	24 87       	std	Z+12, r18	; 0x0c
    1b20:	95 87       	std	Z+13, r25	; 0x0d
    1b22:	93 e6       	ldi	r25, 0x63	; 99
    1b24:	96 87       	std	Z+14, r25	; 0x0e
          g_lowerLineLcd[15]='t';
    1b26:	87 87       	std	Z+15, r24	; 0x0f
    1b28:	a1 c0       	rjmp	.+322    	; 0x1c6c <operationLcd+0x41c>
        }else if(stateMenuLcd == 1){
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	f9 f4       	brne	.+62     	; 0x1b6c <operationLcd+0x31c>
          g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='3'; g_lowerLineLcd[2]='.';
    1b2e:	e2 ef       	ldi	r30, 0xF2	; 242
    1b30:	f1 e0       	ldi	r31, 0x01	; 1
    1b32:	80 e2       	ldi	r24, 0x20	; 32
    1b34:	80 83       	st	Z, r24
    1b36:	93 e3       	ldi	r25, 0x33	; 51
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	9e e2       	ldi	r25, 0x2E	; 46
    1b3c:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='T'; g_lowerLineLcd[4]='e'; g_lowerLineLcd[5]='s';
    1b3e:	94 e5       	ldi	r25, 0x54	; 84
    1b40:	93 83       	std	Z+3, r25	; 0x03
    1b42:	95 e6       	ldi	r25, 0x65	; 101
    1b44:	94 83       	std	Z+4, r25	; 0x04
    1b46:	23 e7       	ldi	r18, 0x73	; 115
    1b48:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]='t'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='K';
    1b4a:	24 e7       	ldi	r18, 0x74	; 116
    1b4c:	26 83       	std	Z+6, r18	; 0x06
    1b4e:	87 83       	std	Z+7, r24	; 0x07
    1b50:	2b e4       	ldi	r18, 0x4B	; 75
    1b52:	20 87       	std	Z+8, r18	; 0x08
          g_lowerLineLcd[9]='e'; g_lowerLineLcd[10]='y'; g_lowerLineLcd[11]='P';
    1b54:	91 87       	std	Z+9, r25	; 0x09
    1b56:	99 e7       	ldi	r25, 0x79	; 121
    1b58:	92 87       	std	Z+10, r25	; 0x0a
    1b5a:	90 e5       	ldi	r25, 0x50	; 80
    1b5c:	93 87       	std	Z+11, r25	; 0x0b
          g_lowerLineLcd[12]='a'; g_lowerLineLcd[13]='d'; g_lowerLineLcd[14]=' ';
    1b5e:	91 e6       	ldi	r25, 0x61	; 97
    1b60:	94 87       	std	Z+12, r25	; 0x0c
    1b62:	94 e6       	ldi	r25, 0x64	; 100
    1b64:	95 87       	std	Z+13, r25	; 0x0d
    1b66:	86 87       	std	Z+14, r24	; 0x0e
          g_lowerLineLcd[15]=' ';
    1b68:	87 87       	std	Z+15, r24	; 0x0f
    1b6a:	80 c0       	rjmp	.+256    	; 0x1c6c <operationLcd+0x41c>
        }else if(stateMenuLcd == 2){
    1b6c:	82 30       	cpi	r24, 0x02	; 2
    1b6e:	01 f5       	brne	.+64     	; 0x1bb0 <operationLcd+0x360>
          g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='4'; g_lowerLineLcd[2]='.';
    1b70:	e2 ef       	ldi	r30, 0xF2	; 242
    1b72:	f1 e0       	ldi	r31, 0x01	; 1
    1b74:	80 e2       	ldi	r24, 0x20	; 32
    1b76:	80 83       	st	Z, r24
    1b78:	94 e3       	ldi	r25, 0x34	; 52
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	9e e2       	ldi	r25, 0x2E	; 46
    1b7e:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='T'; g_lowerLineLcd[4]='e'; g_lowerLineLcd[5]='s';
    1b80:	94 e5       	ldi	r25, 0x54	; 84
    1b82:	93 83       	std	Z+3, r25	; 0x03
    1b84:	95 e6       	ldi	r25, 0x65	; 101
    1b86:	94 83       	std	Z+4, r25	; 0x04
    1b88:	93 e7       	ldi	r25, 0x73	; 115
    1b8a:	95 83       	std	Z+5, r25	; 0x05
          g_lowerLineLcd[6]='t'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='D';
    1b8c:	24 e7       	ldi	r18, 0x74	; 116
    1b8e:	26 83       	std	Z+6, r18	; 0x06
    1b90:	87 83       	std	Z+7, r24	; 0x07
    1b92:	24 e4       	ldi	r18, 0x44	; 68
    1b94:	20 87       	std	Z+8, r18	; 0x08
          g_lowerLineLcd[9]='i'; g_lowerLineLcd[10]='s'; g_lowerLineLcd[11]='p';
    1b96:	29 e6       	ldi	r18, 0x69	; 105
    1b98:	21 87       	std	Z+9, r18	; 0x09
    1b9a:	92 87       	std	Z+10, r25	; 0x0a
    1b9c:	90 e7       	ldi	r25, 0x70	; 112
    1b9e:	93 87       	std	Z+11, r25	; 0x0b
          g_lowerLineLcd[12]='l'; g_lowerLineLcd[13]='a'; g_lowerLineLcd[14]='y';
    1ba0:	9c e6       	ldi	r25, 0x6C	; 108
    1ba2:	94 87       	std	Z+12, r25	; 0x0c
    1ba4:	91 e6       	ldi	r25, 0x61	; 97
    1ba6:	95 87       	std	Z+13, r25	; 0x0d
    1ba8:	99 e7       	ldi	r25, 0x79	; 121
    1baa:	96 87       	std	Z+14, r25	; 0x0e
          g_lowerLineLcd[15]=' ';
    1bac:	87 87       	std	Z+15, r24	; 0x0f
    1bae:	5e c0       	rjmp	.+188    	; 0x1c6c <operationLcd+0x41c>
        }else if(stateMenuLcd == 3){
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	f9 f4       	brne	.+62     	; 0x1bf2 <operationLcd+0x3a2>
          g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='5'; g_lowerLineLcd[2]='.';
    1bb4:	e2 ef       	ldi	r30, 0xF2	; 242
    1bb6:	f1 e0       	ldi	r31, 0x01	; 1
    1bb8:	80 e2       	ldi	r24, 0x20	; 32
    1bba:	80 83       	st	Z, r24
    1bbc:	95 e3       	ldi	r25, 0x35	; 53
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	9e e2       	ldi	r25, 0x2E	; 46
    1bc2:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='I'; g_lowerLineLcd[4]='n'; g_lowerLineLcd[5]='f';
    1bc4:	99 e4       	ldi	r25, 0x49	; 73
    1bc6:	93 83       	std	Z+3, r25	; 0x03
    1bc8:	9e e6       	ldi	r25, 0x6E	; 110
    1bca:	94 83       	std	Z+4, r25	; 0x04
    1bcc:	26 e6       	ldi	r18, 0x66	; 102
    1bce:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]='o'; g_lowerLineLcd[7]='r'; g_lowerLineLcd[8]='m';
    1bd0:	2f e6       	ldi	r18, 0x6F	; 111
    1bd2:	26 83       	std	Z+6, r18	; 0x06
    1bd4:	32 e7       	ldi	r19, 0x72	; 114
    1bd6:	37 83       	std	Z+7, r19	; 0x07
    1bd8:	3d e6       	ldi	r19, 0x6D	; 109
    1bda:	30 87       	std	Z+8, r19	; 0x08
          g_lowerLineLcd[9]='a'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]='i';
    1bdc:	31 e6       	ldi	r19, 0x61	; 97
    1bde:	31 87       	std	Z+9, r19	; 0x09
    1be0:	34 e7       	ldi	r19, 0x74	; 116
    1be2:	32 87       	std	Z+10, r19	; 0x0a
    1be4:	39 e6       	ldi	r19, 0x69	; 105
    1be6:	33 87       	std	Z+11, r19	; 0x0b
          g_lowerLineLcd[12]='o'; g_lowerLineLcd[13]='n'; g_lowerLineLcd[14]=' ';
    1be8:	24 87       	std	Z+12, r18	; 0x0c
    1bea:	95 87       	std	Z+13, r25	; 0x0d
    1bec:	86 87       	std	Z+14, r24	; 0x0e
          g_lowerLineLcd[15]=' ';
    1bee:	87 87       	std	Z+15, r24	; 0x0f
    1bf0:	3d c0       	rjmp	.+122    	; 0x1c6c <operationLcd+0x41c>
        }else if(stateMenuLcd == 4){
    1bf2:	84 30       	cpi	r24, 0x04	; 4
    1bf4:	f1 f4       	brne	.+60     	; 0x1c32 <operationLcd+0x3e2>
          g_lowerLineLcd[0]='6'; g_lowerLineLcd[1]='.'; g_lowerLineLcd[2]=' ';
    1bf6:	e2 ef       	ldi	r30, 0xF2	; 242
    1bf8:	f1 e0       	ldi	r31, 0x01	; 1
    1bfa:	86 e3       	ldi	r24, 0x36	; 54
    1bfc:	80 83       	st	Z, r24
    1bfe:	8e e2       	ldi	r24, 0x2E	; 46
    1c00:	81 83       	std	Z+1, r24	; 0x01
    1c02:	30 e2       	ldi	r19, 0x20	; 32
    1c04:	32 83       	std	Z+2, r19	; 0x02
          g_lowerLineLcd[3]='C'; g_lowerLineLcd[4]='r'; g_lowerLineLcd[5]='e';
    1c06:	83 e4       	ldi	r24, 0x43	; 67
    1c08:	83 83       	std	Z+3, r24	; 0x03
    1c0a:	22 e7       	ldi	r18, 0x72	; 114
    1c0c:	24 83       	std	Z+4, r18	; 0x04
    1c0e:	85 e6       	ldi	r24, 0x65	; 101
    1c10:	85 83       	std	Z+5, r24	; 0x05
          g_lowerLineLcd[6]='a'; g_lowerLineLcd[7]='t'; g_lowerLineLcd[8]='e';
    1c12:	91 e6       	ldi	r25, 0x61	; 97
    1c14:	96 83       	std	Z+6, r25	; 0x06
    1c16:	94 e7       	ldi	r25, 0x74	; 116
    1c18:	97 83       	std	Z+7, r25	; 0x07
    1c1a:	80 87       	std	Z+8, r24	; 0x08
          g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]='R'; g_lowerLineLcd[11]='e';
    1c1c:	31 87       	std	Z+9, r19	; 0x09
    1c1e:	32 e5       	ldi	r19, 0x52	; 82
    1c20:	32 87       	std	Z+10, r19	; 0x0a
    1c22:	83 87       	std	Z+11, r24	; 0x0b
          g_lowerLineLcd[12]='p'; g_lowerLineLcd[13]='o'; g_lowerLineLcd[14]='r';
    1c24:	80 e7       	ldi	r24, 0x70	; 112
    1c26:	84 87       	std	Z+12, r24	; 0x0c
    1c28:	8f e6       	ldi	r24, 0x6F	; 111
    1c2a:	85 87       	std	Z+13, r24	; 0x0d
    1c2c:	26 87       	std	Z+14, r18	; 0x0e
          g_lowerLineLcd[15]='t';
    1c2e:	97 87       	std	Z+15, r25	; 0x0f
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <operationLcd+0x41c>
        }else if(stateMenuLcd == 5){
    1c32:	85 30       	cpi	r24, 0x05	; 5
    1c34:	d9 f4       	brne	.+54     	; 0x1c6c <operationLcd+0x41c>
          g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='7'; g_lowerLineLcd[2]='.';
    1c36:	e2 ef       	ldi	r30, 0xF2	; 242
    1c38:	f1 e0       	ldi	r31, 0x01	; 1
    1c3a:	80 e2       	ldi	r24, 0x20	; 32
    1c3c:	80 83       	st	Z, r24
    1c3e:	97 e3       	ldi	r25, 0x37	; 55
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	9e e2       	ldi	r25, 0x2E	; 46
    1c44:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='R'; g_lowerLineLcd[4]='e'; g_lowerLineLcd[5]='s';
    1c46:	92 e5       	ldi	r25, 0x52	; 82
    1c48:	93 83       	std	Z+3, r25	; 0x03
    1c4a:	95 e6       	ldi	r25, 0x65	; 101
    1c4c:	94 83       	std	Z+4, r25	; 0x04
    1c4e:	23 e7       	ldi	r18, 0x73	; 115
    1c50:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]='e'; g_lowerLineLcd[7]='t'; g_lowerLineLcd[8]=' ';
    1c52:	96 83       	std	Z+6, r25	; 0x06
    1c54:	34 e7       	ldi	r19, 0x74	; 116
    1c56:	37 83       	std	Z+7, r19	; 0x07
    1c58:	80 87       	std	Z+8, r24	; 0x08
          g_lowerLineLcd[9]='s'; g_lowerLineLcd[10]='y'; g_lowerLineLcd[11]='s';
    1c5a:	21 87       	std	Z+9, r18	; 0x09
    1c5c:	49 e7       	ldi	r20, 0x79	; 121
    1c5e:	42 87       	std	Z+10, r20	; 0x0a
    1c60:	23 87       	std	Z+11, r18	; 0x0b
          g_lowerLineLcd[12]='t'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='m';
    1c62:	34 87       	std	Z+12, r19	; 0x0c
    1c64:	95 87       	std	Z+13, r25	; 0x0d
    1c66:	9d e6       	ldi	r25, 0x6D	; 109
    1c68:	96 87       	std	Z+14, r25	; 0x0e
          g_lowerLineLcd[15]=' ';
    1c6a:	87 87       	std	Z+15, r24	; 0x0f
        }
        printLcdU();
    1c6c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
        printLcdL();
    1c70:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
        if(key == 0x31){
    1c74:	11 33       	cpi	r17, 0x31	; 49
    1c76:	39 f4       	brne	.+14     	; 0x1c86 <operationLcd+0x436>
          g_stateCodeLcd = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          key = 0xff;
          initStateLcd1();
    1c7e:	0e 94 44 07 	call	0xe88	; 0xe88 <initStateLcd1>
    1c82:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x32){
    1c86:	12 33       	cpi	r17, 0x32	; 50
    1c88:	41 f4       	brne	.+16     	; 0x1c9a <operationLcd+0x44a>
          g_stateCodeLcd = 3;
    1c8a:	83 e0       	ldi	r24, 0x03	; 3
    1c8c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          g_changeStateLcd = 1;
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1c96:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
          key = 0xff;
        }else if(key == 0x2a){
    1c9a:	1a 32       	cpi	r17, 0x2A	; 42
    1c9c:	51 f4       	brne	.+20     	; 0x1cb2 <operationLcd+0x462>
          stateMenuLcd --;
    1c9e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <stateMenuLcd>
          if(stateMenuLcd < 0){
            stateMenuLcd = 4;
          }
          g_changeStateLcd = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1cae:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x23){
    1cb2:	13 32       	cpi	r17, 0x23	; 35
    1cb4:	71 f4       	brne	.+28     	; 0x1cd2 <operationLcd+0x482>
          stateMenuLcd ++;
    1cb6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    1cba:	8f 5f       	subi	r24, 0xFF	; 255
    1cbc:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <stateMenuLcd>
          if(stateMenuLcd > 5){
    1cc0:	86 30       	cpi	r24, 0x06	; 6
    1cc2:	10 f0       	brcs	.+4      	; 0x1cc8 <operationLcd+0x478>
            stateMenuLcd = 0;
    1cc4:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <stateMenuLcd>
          }
          g_changeStateLcd = 1;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1cce:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x33){
    1cd2:	13 33       	cpi	r17, 0x33	; 51
    1cd4:	99 f4       	brne	.+38     	; 0x1cfc <operationLcd+0x4ac>
          g_errorCode[0] = 0;
    1cd6:	e1 ee       	ldi	r30, 0xE1	; 225
    1cd8:	f1 e0       	ldi	r31, 0x01	; 1
    1cda:	10 82       	st	Z, r1
          g_errorCode[1] = 0;
    1cdc:	11 82       	std	Z+1, r1	; 0x01
          g_errorCode[2] = 0;
    1cde:	12 82       	std	Z+2, r1	; 0x02
          g_errorSystem += testKeyPad();
    1ce0:	0e 94 62 09 	call	0x12c4	; 0x12c4 <testKeyPad>
    1ce4:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <g_errorSystem>
    1ce8:	89 0f       	add	r24, r25
    1cea:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <g_errorSystem>
          g_stateCodeLcd = 2;
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          initStateLcd2();
    1cf4:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1cf8:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x34){
    1cfc:	14 33       	cpi	r17, 0x34	; 52
    1cfe:	81 f4       	brne	.+32     	; 0x1d20 <operationLcd+0x4d0>
          g_errorCode[3] = 0;
    1d00:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <g_errorCode+0x3>
          g_errorSystem += testDisplay();
    1d04:	0e 94 1b 0b 	call	0x1636	; 0x1636 <testDisplay>
    1d08:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <g_errorSystem>
    1d0c:	89 0f       	add	r24, r25
    1d0e:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <g_errorSystem>
          g_stateCodeLcd = 2;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          initStateLcd2();
    1d18:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1d1c:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x35){
    1d20:	15 33       	cpi	r17, 0x35	; 53
    1d22:	51 f4       	brne	.+20     	; 0x1d38 <operationLcd+0x4e8>
          g_stateCodeLcd = 5;
    1d24:	85 e0       	ldi	r24, 0x05	; 5
    1d26:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          stateMenuLcd = 0;
    1d2a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <stateMenuLcd>
          g_changeStateLcd = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1d34:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <operationLcd+0x1508>
          key = 0xff;
        }else if(key == 0x36){
    1d38:	16 33       	cpi	r17, 0x36	; 54
    1d3a:	31 f5       	brne	.+76     	; 0x1d88 <operationLcd+0x538>
          g_stateCodeLcd = 6;
    1d3c:	86 e0       	ldi	r24, 0x06	; 6
    1d3e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          stateMenuLcd = 0;
    1d42:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <stateMenuLcd>
          g_changeStateLcd = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
          g_lowerLineLcd[0]='Y'; g_lowerLineLcd[1]='o'; g_lowerLineLcd[2]='u';
    1d4c:	e2 ef       	ldi	r30, 0xF2	; 242
    1d4e:	f1 e0       	ldi	r31, 0x01	; 1
    1d50:	89 e5       	ldi	r24, 0x59	; 89
    1d52:	80 83       	st	Z, r24
    1d54:	8f e6       	ldi	r24, 0x6F	; 111
    1d56:	81 83       	std	Z+1, r24	; 0x01
    1d58:	95 e7       	ldi	r25, 0x75	; 117
    1d5a:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='r'; g_lowerLineLcd[4]='C'; g_lowerLineLcd[5]='o';
    1d5c:	92 e7       	ldi	r25, 0x72	; 114
    1d5e:	93 83       	std	Z+3, r25	; 0x03
    1d60:	93 e4       	ldi	r25, 0x43	; 67
    1d62:	94 83       	std	Z+4, r25	; 0x04
    1d64:	85 83       	std	Z+5, r24	; 0x05
          g_lowerLineLcd[6]='d'; g_lowerLineLcd[7]='e'; g_lowerLineLcd[8]=':';
    1d66:	84 e6       	ldi	r24, 0x64	; 100
    1d68:	86 83       	std	Z+6, r24	; 0x06
    1d6a:	85 e6       	ldi	r24, 0x65	; 101
    1d6c:	87 83       	std	Z+7, r24	; 0x07
    1d6e:	8a e3       	ldi	r24, 0x3A	; 58
    1d70:	80 87       	std	Z+8, r24	; 0x08
          g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]=' ';
    1d72:	80 e2       	ldi	r24, 0x20	; 32
    1d74:	81 87       	std	Z+9, r24	; 0x09
    1d76:	82 87       	std	Z+10, r24	; 0x0a
    1d78:	83 87       	std	Z+11, r24	; 0x0b
          g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
    1d7a:	84 87       	std	Z+12, r24	; 0x0c
    1d7c:	85 87       	std	Z+13, r24	; 0x0d
    1d7e:	86 87       	std	Z+14, r24	; 0x0e
          g_lowerLineLcd[15]=' ';
    1d80:	87 87       	std	Z+15, r24	; 0x0f
          g_poiterEC = 0;
    1d82:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <g_poiterEC>
    1d86:	e8 c7       	rjmp	.+4048   	; 0x2d58 <operationLcd+0x1508>
          key = 0xff;
        }else if(key == 0x37){
    1d88:	17 33       	cpi	r17, 0x37	; 55
    1d8a:	09 f0       	breq	.+2      	; 0x1d8e <operationLcd+0x53e>
    1d8c:	e5 c7       	rjmp	.+4042   	; 0x2d58 <operationLcd+0x1508>
          g_stateCodeLcd = 7;
    1d8e:	87 e0       	ldi	r24, 0x07	; 7
    1d90:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          initStateLcd7();
    1d94:	0e 94 25 09 	call	0x124a	; 0x124a <initStateLcd7>
    1d98:	df c7       	rjmp	.+4030   	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 3){        //beforce confirm strict mode
    1d9a:	83 30       	cpi	r24, 0x03	; 3
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <operationLcd+0x550>
    1d9e:	4b c0       	rjmp	.+150    	; 0x1e36 <operationLcd+0x5e6>
        g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]='S';
    1da0:	e6 e0       	ldi	r30, 0x06	; 6
    1da2:	f2 e0       	ldi	r31, 0x02	; 2
    1da4:	80 e2       	ldi	r24, 0x20	; 32
    1da6:	80 83       	st	Z, r24
    1da8:	81 83       	std	Z+1, r24	; 0x01
    1daa:	93 e5       	ldi	r25, 0x53	; 83
    1dac:	92 83       	std	Z+2, r25	; 0x02
        g_uperLineLcd[3]='t'; g_uperLineLcd[4]='r'; g_uperLineLcd[5]='i';
    1dae:	24 e7       	ldi	r18, 0x74	; 116
    1db0:	23 83       	std	Z+3, r18	; 0x03
    1db2:	92 e7       	ldi	r25, 0x72	; 114
    1db4:	94 83       	std	Z+4, r25	; 0x04
    1db6:	39 e6       	ldi	r19, 0x69	; 105
    1db8:	35 83       	std	Z+5, r19	; 0x05
        g_uperLineLcd[6]='c'; g_uperLineLcd[7]='t'; g_uperLineLcd[8]=' ';
    1dba:	43 e6       	ldi	r20, 0x63	; 99
    1dbc:	46 83       	std	Z+6, r20	; 0x06
    1dbe:	27 83       	std	Z+7, r18	; 0x07
    1dc0:	80 87       	std	Z+8, r24	; 0x08
        g_uperLineLcd[9]='M'; g_uperLineLcd[10]='o'; g_uperLineLcd[11]='d';
    1dc2:	2d e4       	ldi	r18, 0x4D	; 77
    1dc4:	21 87       	std	Z+9, r18	; 0x09
    1dc6:	4f e6       	ldi	r20, 0x6F	; 111
    1dc8:	42 87       	std	Z+10, r20	; 0x0a
    1dca:	24 e6       	ldi	r18, 0x64	; 100
    1dcc:	23 87       	std	Z+11, r18	; 0x0b
        g_uperLineLcd[12]='e'; g_uperLineLcd[13]=' '; g_uperLineLcd[14]=' ';
    1dce:	25 e6       	ldi	r18, 0x65	; 101
    1dd0:	24 87       	std	Z+12, r18	; 0x0c
    1dd2:	85 87       	std	Z+13, r24	; 0x0d
    1dd4:	86 87       	std	Z+14, r24	; 0x0e
        g_uperLineLcd[15]=' ';
    1dd6:	87 87       	std	Z+15, r24	; 0x0f
        g_lowerLineLcd[0]='C'; g_lowerLineLcd[1]='o'; g_lowerLineLcd[2]='n';
    1dd8:	e2 ef       	ldi	r30, 0xF2	; 242
    1dda:	f1 e0       	ldi	r31, 0x01	; 1
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	50 83       	st	Z, r21
    1de0:	41 83       	std	Z+1, r20	; 0x01
    1de2:	4e e6       	ldi	r20, 0x6E	; 110
    1de4:	42 83       	std	Z+2, r20	; 0x02
        g_lowerLineLcd[3]='f'; g_lowerLineLcd[4]='i'; g_lowerLineLcd[5]='r';
    1de6:	46 e6       	ldi	r20, 0x66	; 102
    1de8:	43 83       	std	Z+3, r20	; 0x03
    1dea:	34 83       	std	Z+4, r19	; 0x04
    1dec:	95 83       	std	Z+5, r25	; 0x05
        g_lowerLineLcd[6]='m'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='P';
    1dee:	3d e6       	ldi	r19, 0x6D	; 109
    1df0:	36 83       	std	Z+6, r19	; 0x06
    1df2:	87 83       	std	Z+7, r24	; 0x07
    1df4:	30 e5       	ldi	r19, 0x50	; 80
    1df6:	30 87       	std	Z+8, r19	; 0x08
        g_lowerLineLcd[9]='r'; g_lowerLineLcd[10]='e'; g_lowerLineLcd[11]='s';
    1df8:	91 87       	std	Z+9, r25	; 0x09
    1dfa:	22 87       	std	Z+10, r18	; 0x0a
    1dfc:	93 e7       	ldi	r25, 0x73	; 115
    1dfe:	93 87       	std	Z+11, r25	; 0x0b
        g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]='#';
    1e00:	94 87       	std	Z+12, r25	; 0x0c
    1e02:	85 87       	std	Z+13, r24	; 0x0d
    1e04:	93 e2       	ldi	r25, 0x23	; 35
    1e06:	96 87       	std	Z+14, r25	; 0x0e
        g_lowerLineLcd[15]=' ';
    1e08:	87 87       	std	Z+15, r24	; 0x0f
        printLcdU();
    1e0a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
        printLcdL();
    1e0e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
        if(key == 0x23){
    1e12:	13 32       	cpi	r17, 0x23	; 35
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <operationLcd+0x5d4>
          g_stateCodeLcd = 4;
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          g_changeStateLcd = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    1e22:	9a c7       	rjmp	.+3892   	; 0x2d58 <operationLcd+0x1508>
          key = 0xff;
        }else if(key == 0x2a){
    1e24:	1a 32       	cpi	r17, 0x2A	; 42
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <operationLcd+0x5da>
    1e28:	97 c7       	rjmp	.+3886   	; 0x2d58 <operationLcd+0x1508>
          g_stateCodeLcd = 2;
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          key = 0xff;
          initStateLcd2();
    1e30:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1e34:	91 c7       	rjmp	.+3874   	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 4){
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	e1 f5       	brne	.+120    	; 0x1eb2 <operationLcd+0x662>
        g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]=' ';
    1e3a:	e6 e0       	ldi	r30, 0x06	; 6
    1e3c:	f2 e0       	ldi	r31, 0x02	; 2
    1e3e:	80 e2       	ldi	r24, 0x20	; 32
    1e40:	80 83       	st	Z, r24
    1e42:	81 83       	std	Z+1, r24	; 0x01
    1e44:	82 83       	std	Z+2, r24	; 0x02
        g_uperLineLcd[3]='S'; g_uperLineLcd[4]='T'; g_uperLineLcd[5]='R';
    1e46:	93 e5       	ldi	r25, 0x53	; 83
    1e48:	93 83       	std	Z+3, r25	; 0x03
    1e4a:	94 e5       	ldi	r25, 0x54	; 84
    1e4c:	94 83       	std	Z+4, r25	; 0x04
    1e4e:	22 e5       	ldi	r18, 0x52	; 82
    1e50:	25 83       	std	Z+5, r18	; 0x05
        g_uperLineLcd[6]='I'; g_uperLineLcd[7]='C'; g_uperLineLcd[8]='T';
    1e52:	29 e4       	ldi	r18, 0x49	; 73
    1e54:	26 83       	std	Z+6, r18	; 0x06
    1e56:	23 e4       	ldi	r18, 0x43	; 67
    1e58:	27 83       	std	Z+7, r18	; 0x07
    1e5a:	90 87       	std	Z+8, r25	; 0x08
        g_uperLineLcd[9]=' '; g_uperLineLcd[10]='M'; g_uperLineLcd[11]='O';
    1e5c:	81 87       	std	Z+9, r24	; 0x09
    1e5e:	9d e4       	ldi	r25, 0x4D	; 77
    1e60:	92 87       	std	Z+10, r25	; 0x0a
    1e62:	9f e4       	ldi	r25, 0x4F	; 79
    1e64:	93 87       	std	Z+11, r25	; 0x0b
        g_uperLineLcd[12]='D'; g_uperLineLcd[13]='E'; g_uperLineLcd[14]=' ';
    1e66:	94 e4       	ldi	r25, 0x44	; 68
    1e68:	94 87       	std	Z+12, r25	; 0x0c
    1e6a:	95 e4       	ldi	r25, 0x45	; 69
    1e6c:	95 87       	std	Z+13, r25	; 0x0d
    1e6e:	86 87       	std	Z+14, r24	; 0x0e
        g_uperLineLcd[15]=' ';
    1e70:	87 87       	std	Z+15, r24	; 0x0f
        g_lowerLineLcd[0]='='; g_lowerLineLcd[1]='='; g_lowerLineLcd[2]='=';
    1e72:	e2 ef       	ldi	r30, 0xF2	; 242
    1e74:	f1 e0       	ldi	r31, 0x01	; 1
    1e76:	8d e3       	ldi	r24, 0x3D	; 61
    1e78:	80 83       	st	Z, r24
    1e7a:	81 83       	std	Z+1, r24	; 0x01
    1e7c:	82 83       	std	Z+2, r24	; 0x02
        g_lowerLineLcd[3]='='; g_lowerLineLcd[4]='='; g_lowerLineLcd[5]='=';
    1e7e:	83 83       	std	Z+3, r24	; 0x03
    1e80:	84 83       	std	Z+4, r24	; 0x04
    1e82:	85 83       	std	Z+5, r24	; 0x05
        g_lowerLineLcd[6]='='; g_lowerLineLcd[7]='='; g_lowerLineLcd[8]='=';
    1e84:	86 83       	std	Z+6, r24	; 0x06
    1e86:	87 83       	std	Z+7, r24	; 0x07
    1e88:	80 87       	std	Z+8, r24	; 0x08
        g_lowerLineLcd[9]='='; g_lowerLineLcd[10]='='; g_lowerLineLcd[11]='=';
    1e8a:	81 87       	std	Z+9, r24	; 0x09
    1e8c:	82 87       	std	Z+10, r24	; 0x0a
    1e8e:	83 87       	std	Z+11, r24	; 0x0b
        g_lowerLineLcd[12]='='; g_lowerLineLcd[13]='='; g_lowerLineLcd[14]='=';
    1e90:	84 87       	std	Z+12, r24	; 0x0c
    1e92:	85 87       	std	Z+13, r24	; 0x0d
    1e94:	86 87       	std	Z+14, r24	; 0x0e
        g_lowerLineLcd[15]='=';
    1e96:	87 87       	std	Z+15, r24	; 0x0f
        printLcdU();
    1e98:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
        printLcdL();
    1e9c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
        if(key == 0x2a){
    1ea0:	1a 32       	cpi	r17, 0x2A	; 42
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <operationLcd+0x656>
    1ea4:	59 c7       	rjmp	.+3762   	; 0x2d58 <operationLcd+0x1508>
          g_stateCodeLcd = 2;
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          key = 0xff;
          initStateLcd2();
    1eac:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    1eb0:	53 c7       	rjmp	.+3750   	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 5){
    1eb2:	85 30       	cpi	r24, 0x05	; 5
    1eb4:	09 f0       	breq	.+2      	; 0x1eb8 <operationLcd+0x668>
    1eb6:	c0 c1       	rjmp	.+896    	; 0x2238 <operationLcd+0x9e8>
        if(key != 0x23 && key != 0x2a){
    1eb8:	13 32       	cpi	r17, 0x23	; 35
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <operationLcd+0x66e>
    1ebc:	a4 c1       	rjmp	.+840    	; 0x2206 <operationLcd+0x9b6>
    1ebe:	1a 32       	cpi	r17, 0x2A	; 42
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <operationLcd+0x674>
    1ec2:	a1 c1       	rjmp	.+834    	; 0x2206 <operationLcd+0x9b6>
          if(stateMenuLcd == 0){
    1ec4:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    1ec8:	81 11       	cpse	r24, r1
    1eca:	90 c0       	rjmp	.+288    	; 0x1fec <operationLcd+0x79c>
            if(checkError()){    //system with error
    1ecc:	0e 94 16 01 	call	0x22c	; 0x22c <checkError>
    1ed0:	88 23       	and	r24, r24
    1ed2:	09 f4       	brne	.+2      	; 0x1ed6 <operationLcd+0x686>
    1ed4:	4c c0       	rjmp	.+152    	; 0x1f6e <operationLcd+0x71e>
              g_uperLineLcd[0]='S'; g_uperLineLcd[1]='Y'; g_uperLineLcd[2]='S';
    1ed6:	e6 e0       	ldi	r30, 0x06	; 6
    1ed8:	f2 e0       	ldi	r31, 0x02	; 2
    1eda:	83 e5       	ldi	r24, 0x53	; 83
    1edc:	80 83       	st	Z, r24
    1ede:	99 e5       	ldi	r25, 0x59	; 89
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	82 83       	std	Z+2, r24	; 0x02
              g_uperLineLcd[3]='T'; g_uperLineLcd[4]='E'; g_uperLineLcd[5]='M';
    1ee4:	84 e5       	ldi	r24, 0x54	; 84
    1ee6:	83 83       	std	Z+3, r24	; 0x03
    1ee8:	95 e4       	ldi	r25, 0x45	; 69
    1eea:	94 83       	std	Z+4, r25	; 0x04
    1eec:	8d e4       	ldi	r24, 0x4D	; 77
    1eee:	85 83       	std	Z+5, r24	; 0x05
              g_uperLineLcd[6]=' '; g_uperLineLcd[7]='I'; g_uperLineLcd[8]='N';
    1ef0:	80 e2       	ldi	r24, 0x20	; 32
    1ef2:	86 83       	std	Z+6, r24	; 0x06
    1ef4:	29 e4       	ldi	r18, 0x49	; 73
    1ef6:	27 83       	std	Z+7, r18	; 0x07
    1ef8:	2e e4       	ldi	r18, 0x4E	; 78
    1efa:	20 87       	std	Z+8, r18	; 0x08
              g_uperLineLcd[9]=' '; g_uperLineLcd[10]='E'; g_uperLineLcd[11]='R';
    1efc:	81 87       	std	Z+9, r24	; 0x09
    1efe:	92 87       	std	Z+10, r25	; 0x0a
    1f00:	92 e5       	ldi	r25, 0x52	; 82
    1f02:	93 87       	std	Z+11, r25	; 0x0b
              g_uperLineLcd[12]='R'; g_uperLineLcd[13]='O'; g_uperLineLcd[14]='R';
    1f04:	94 87       	std	Z+12, r25	; 0x0c
    1f06:	2f e4       	ldi	r18, 0x4F	; 79
    1f08:	25 87       	std	Z+13, r18	; 0x0d
    1f0a:	96 87       	std	Z+14, r25	; 0x0e
              g_uperLineLcd[15]=' ';
    1f0c:	87 87       	std	Z+15, r24	; 0x0f
              g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    1f0e:	e2 ef       	ldi	r30, 0xF2	; 242
    1f10:	f1 e0       	ldi	r31, 0x01	; 1
    1f12:	90 e5       	ldi	r25, 0x50	; 80
    1f14:	90 83       	st	Z, r25
    1f16:	92 e7       	ldi	r25, 0x72	; 114
    1f18:	91 83       	std	Z+1, r25	; 0x01
    1f1a:	95 e6       	ldi	r25, 0x65	; 101
    1f1c:	92 83       	std	Z+2, r25	; 0x02
              g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]=' ';
    1f1e:	23 e7       	ldi	r18, 0x73	; 115
    1f20:	23 83       	std	Z+3, r18	; 0x03
    1f22:	24 83       	std	Z+4, r18	; 0x04
    1f24:	85 83       	std	Z+5, r24	; 0x05
              g_lowerLineLcd[6]='#'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='t';
    1f26:	23 e2       	ldi	r18, 0x23	; 35
    1f28:	26 83       	std	Z+6, r18	; 0x06
    1f2a:	87 83       	std	Z+7, r24	; 0x07
    1f2c:	24 e7       	ldi	r18, 0x74	; 116
    1f2e:	20 87       	std	Z+8, r18	; 0x08
              g_lowerLineLcd[9]='o'; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]='v';
    1f30:	2f e6       	ldi	r18, 0x6F	; 111
    1f32:	21 87       	std	Z+9, r18	; 0x09
    1f34:	82 87       	std	Z+10, r24	; 0x0a
    1f36:	26 e7       	ldi	r18, 0x76	; 118
    1f38:	23 87       	std	Z+11, r18	; 0x0b
              g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='w';
    1f3a:	29 e6       	ldi	r18, 0x69	; 105
    1f3c:	24 87       	std	Z+12, r18	; 0x0c
    1f3e:	95 87       	std	Z+13, r25	; 0x0d
    1f40:	97 e7       	ldi	r25, 0x77	; 119
    1f42:	96 87       	std	Z+14, r25	; 0x0e
              g_lowerLineLcd[15]=' ';
    1f44:	87 87       	std	Z+15, r24	; 0x0f
              printLcdU();
    1f46:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    1f4a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
              buzzer(1);
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    1f54:	2f ef       	ldi	r18, 0xFF	; 255
    1f56:	84 e3       	ldi	r24, 0x34	; 52
    1f58:	9c e0       	ldi	r25, 0x0C	; 12
    1f5a:	21 50       	subi	r18, 0x01	; 1
    1f5c:	80 40       	sbci	r24, 0x00	; 0
    1f5e:	90 40       	sbci	r25, 0x00	; 0
    1f60:	e1 f7       	brne	.-8      	; 0x1f5a <operationLcd+0x70a>
    1f62:	00 c0       	rjmp	.+0      	; 0x1f64 <operationLcd+0x714>
    1f64:	00 00       	nop
              _delay_ms(500);
              buzzer(0);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    1f6c:	f5 c6       	rjmp	.+3562   	; 0x2d58 <operationLcd+0x1508>
            }else{        //System normal
              g_uperLineLcd[0]='S'; g_uperLineLcd[1]='Y'; g_uperLineLcd[2]='S';
    1f6e:	e6 e0       	ldi	r30, 0x06	; 6
    1f70:	f2 e0       	ldi	r31, 0x02	; 2
    1f72:	83 e5       	ldi	r24, 0x53	; 83
    1f74:	80 83       	st	Z, r24
    1f76:	99 e5       	ldi	r25, 0x59	; 89
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	82 83       	std	Z+2, r24	; 0x02
              g_uperLineLcd[3]='T'; g_uperLineLcd[4]='E'; g_uperLineLcd[5]='M';
    1f7c:	84 e5       	ldi	r24, 0x54	; 84
    1f7e:	83 83       	std	Z+3, r24	; 0x03
    1f80:	85 e4       	ldi	r24, 0x45	; 69
    1f82:	84 83       	std	Z+4, r24	; 0x04
    1f84:	9d e4       	ldi	r25, 0x4D	; 77
    1f86:	95 83       	std	Z+5, r25	; 0x05
              g_uperLineLcd[6]=' '; g_uperLineLcd[7]='I'; g_uperLineLcd[8]='N';
    1f88:	80 e2       	ldi	r24, 0x20	; 32
    1f8a:	86 83       	std	Z+6, r24	; 0x06
    1f8c:	29 e4       	ldi	r18, 0x49	; 73
    1f8e:	27 83       	std	Z+7, r18	; 0x07
    1f90:	2e e4       	ldi	r18, 0x4E	; 78
    1f92:	20 87       	std	Z+8, r18	; 0x08
              g_uperLineLcd[9]=' '; g_uperLineLcd[10]='N'; g_uperLineLcd[11]='O';
    1f94:	81 87       	std	Z+9, r24	; 0x09
    1f96:	22 87       	std	Z+10, r18	; 0x0a
    1f98:	2f e4       	ldi	r18, 0x4F	; 79
    1f9a:	23 87       	std	Z+11, r18	; 0x0b
              g_uperLineLcd[12]='R'; g_uperLineLcd[13]='M'; g_uperLineLcd[14]='A';
    1f9c:	22 e5       	ldi	r18, 0x52	; 82
    1f9e:	24 87       	std	Z+12, r18	; 0x0c
    1fa0:	95 87       	std	Z+13, r25	; 0x0d
    1fa2:	91 e4       	ldi	r25, 0x41	; 65
    1fa4:	96 87       	std	Z+14, r25	; 0x0e
              g_uperLineLcd[15]='L';
    1fa6:	9c e4       	ldi	r25, 0x4C	; 76
    1fa8:	97 87       	std	Z+15, r25	; 0x0f
              g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='r'; g_lowerLineLcd[2]='e';
    1faa:	e2 ef       	ldi	r30, 0xF2	; 242
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	90 e5       	ldi	r25, 0x50	; 80
    1fb0:	90 83       	st	Z, r25
    1fb2:	92 e7       	ldi	r25, 0x72	; 114
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	95 e6       	ldi	r25, 0x65	; 101
    1fb8:	92 83       	std	Z+2, r25	; 0x02
              g_lowerLineLcd[3]='s'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]=' ';
    1fba:	23 e7       	ldi	r18, 0x73	; 115
    1fbc:	23 83       	std	Z+3, r18	; 0x03
    1fbe:	24 83       	std	Z+4, r18	; 0x04
    1fc0:	85 83       	std	Z+5, r24	; 0x05
              g_lowerLineLcd[6]='#'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='t';
    1fc2:	23 e2       	ldi	r18, 0x23	; 35
    1fc4:	26 83       	std	Z+6, r18	; 0x06
    1fc6:	87 83       	std	Z+7, r24	; 0x07
    1fc8:	24 e7       	ldi	r18, 0x74	; 116
    1fca:	20 87       	std	Z+8, r18	; 0x08
              g_lowerLineLcd[9]='o'; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]='v';
    1fcc:	2f e6       	ldi	r18, 0x6F	; 111
    1fce:	21 87       	std	Z+9, r18	; 0x09
    1fd0:	82 87       	std	Z+10, r24	; 0x0a
    1fd2:	26 e7       	ldi	r18, 0x76	; 118
    1fd4:	23 87       	std	Z+11, r18	; 0x0b
              g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='e'; g_lowerLineLcd[14]='w';
    1fd6:	29 e6       	ldi	r18, 0x69	; 105
    1fd8:	24 87       	std	Z+12, r18	; 0x0c
    1fda:	95 87       	std	Z+13, r25	; 0x0d
    1fdc:	97 e7       	ldi	r25, 0x77	; 119
    1fde:	96 87       	std	Z+14, r25	; 0x0e
              g_lowerLineLcd[15]=' ';
    1fe0:	87 87       	std	Z+15, r24	; 0x0f
              printLcdU();
    1fe2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    1fe6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    1fea:	b6 c6       	rjmp	.+3436   	; 0x2d58 <operationLcd+0x1508>
            }
          }else if(stateMenuLcd == 1){
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <operationLcd+0x7a2>
    1ff0:	40 c0       	rjmp	.+128    	; 0x2072 <operationLcd+0x822>
            g_uperLineLcd[0]='1'; g_uperLineLcd[1]='.'; g_uperLineLcd[2]='K';
    1ff2:	e6 e0       	ldi	r30, 0x06	; 6
    1ff4:	f2 e0       	ldi	r31, 0x02	; 2
    1ff6:	81 e3       	ldi	r24, 0x31	; 49
    1ff8:	80 83       	st	Z, r24
    1ffa:	8e e2       	ldi	r24, 0x2E	; 46
    1ffc:	81 83       	std	Z+1, r24	; 0x01
    1ffe:	8b e4       	ldi	r24, 0x4B	; 75
    2000:	82 83       	std	Z+2, r24	; 0x02
            g_uperLineLcd[3]='e'; g_uperLineLcd[4]='y'; g_uperLineLcd[5]='p';
    2002:	95 e6       	ldi	r25, 0x65	; 101
    2004:	93 83       	std	Z+3, r25	; 0x03
    2006:	89 e7       	ldi	r24, 0x79	; 121
    2008:	84 83       	std	Z+4, r24	; 0x04
    200a:	80 e7       	ldi	r24, 0x70	; 112
    200c:	85 83       	std	Z+5, r24	; 0x05
            g_uperLineLcd[6]='a'; g_uperLineLcd[7]='d'; g_uperLineLcd[8]=' ';
    200e:	81 e6       	ldi	r24, 0x61	; 97
    2010:	86 83       	std	Z+6, r24	; 0x06
    2012:	24 e6       	ldi	r18, 0x64	; 100
    2014:	27 83       	std	Z+7, r18	; 0x07
    2016:	80 e2       	ldi	r24, 0x20	; 32
    2018:	80 87       	std	Z+8, r24	; 0x08
            g_uperLineLcd[9]='I'; g_uperLineLcd[10]='n'; g_uperLineLcd[11]='s';
    201a:	39 e4       	ldi	r19, 0x49	; 73
    201c:	31 87       	std	Z+9, r19	; 0x09
    201e:	3e e6       	ldi	r19, 0x6E	; 110
    2020:	32 87       	std	Z+10, r19	; 0x0a
    2022:	33 e7       	ldi	r19, 0x73	; 115
    2024:	33 87       	std	Z+11, r19	; 0x0b
            g_uperLineLcd[12]='i'; g_uperLineLcd[13]='d'; g_uperLineLcd[14]='e';
    2026:	39 e6       	ldi	r19, 0x69	; 105
    2028:	34 87       	std	Z+12, r19	; 0x0c
    202a:	25 87       	std	Z+13, r18	; 0x0d
    202c:	96 87       	std	Z+14, r25	; 0x0e
            g_uperLineLcd[15]=' ';
    202e:	87 87       	std	Z+15, r24	; 0x0f
            if(g_errorCode[0] == 0){
    2030:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <g_errorCode>
    2034:	81 11       	cpse	r24, r1
    2036:	07 c0       	rjmp	.+14     	; 0x2046 <operationLcd+0x7f6>
              setNormalData();
    2038:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setNormalData>
              printLcdU();
    203c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    2040:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    2044:	89 c6       	rjmp	.+3346   	; 0x2d58 <operationLcd+0x1508>
            }else{
              setErrorData();
    2046:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setErrorData>
              printLcdU();
    204a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    204e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
              buzzer(1);
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2058:	2f ef       	ldi	r18, 0xFF	; 255
    205a:	84 e3       	ldi	r24, 0x34	; 52
    205c:	9c e0       	ldi	r25, 0x0C	; 12
    205e:	21 50       	subi	r18, 0x01	; 1
    2060:	80 40       	sbci	r24, 0x00	; 0
    2062:	90 40       	sbci	r25, 0x00	; 0
    2064:	e1 f7       	brne	.-8      	; 0x205e <operationLcd+0x80e>
    2066:	00 c0       	rjmp	.+0      	; 0x2068 <operationLcd+0x818>
    2068:	00 00       	nop
              _delay_ms(500);
              buzzer(0);
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2070:	73 c6       	rjmp	.+3302   	; 0x2d58 <operationLcd+0x1508>
            }
          }else if(stateMenuLcd == 2){
    2072:	82 30       	cpi	r24, 0x02	; 2
    2074:	09 f0       	breq	.+2      	; 0x2078 <operationLcd+0x828>
    2076:	41 c0       	rjmp	.+130    	; 0x20fa <operationLcd+0x8aa>
            g_uperLineLcd[0]='2'; g_uperLineLcd[1]='.'; g_uperLineLcd[2]='K';
    2078:	e6 e0       	ldi	r30, 0x06	; 6
    207a:	f2 e0       	ldi	r31, 0x02	; 2
    207c:	82 e3       	ldi	r24, 0x32	; 50
    207e:	80 83       	st	Z, r24
    2080:	8e e2       	ldi	r24, 0x2E	; 46
    2082:	81 83       	std	Z+1, r24	; 0x01
    2084:	8b e4       	ldi	r24, 0x4B	; 75
    2086:	82 83       	std	Z+2, r24	; 0x02
            g_uperLineLcd[3]='e'; g_uperLineLcd[4]='y'; g_uperLineLcd[5]='p';
    2088:	85 e6       	ldi	r24, 0x65	; 101
    208a:	83 83       	std	Z+3, r24	; 0x03
    208c:	99 e7       	ldi	r25, 0x79	; 121
    208e:	94 83       	std	Z+4, r25	; 0x04
    2090:	90 e7       	ldi	r25, 0x70	; 112
    2092:	95 83       	std	Z+5, r25	; 0x05
            g_uperLineLcd[6]='a'; g_uperLineLcd[7]='d'; g_uperLineLcd[8]=' ';
    2094:	91 e6       	ldi	r25, 0x61	; 97
    2096:	96 83       	std	Z+6, r25	; 0x06
    2098:	94 e6       	ldi	r25, 0x64	; 100
    209a:	97 83       	std	Z+7, r25	; 0x07
    209c:	20 e2       	ldi	r18, 0x20	; 32
    209e:	20 87       	std	Z+8, r18	; 0x08
            g_uperLineLcd[9]='O'; g_uperLineLcd[10]='u'; g_uperLineLcd[11]='t';
    20a0:	2f e4       	ldi	r18, 0x4F	; 79
    20a2:	21 87       	std	Z+9, r18	; 0x09
    20a4:	25 e7       	ldi	r18, 0x75	; 117
    20a6:	22 87       	std	Z+10, r18	; 0x0a
    20a8:	24 e7       	ldi	r18, 0x74	; 116
    20aa:	23 87       	std	Z+11, r18	; 0x0b
            g_uperLineLcd[12]='s'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='d';
    20ac:	23 e7       	ldi	r18, 0x73	; 115
    20ae:	24 87       	std	Z+12, r18	; 0x0c
    20b0:	29 e6       	ldi	r18, 0x69	; 105
    20b2:	25 87       	std	Z+13, r18	; 0x0d
    20b4:	96 87       	std	Z+14, r25	; 0x0e
            g_uperLineLcd[15]='e';
    20b6:	87 87       	std	Z+15, r24	; 0x0f
            if(g_errorCode[1] == 0){
    20b8:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <g_errorCode+0x1>
    20bc:	81 11       	cpse	r24, r1
    20be:	07 c0       	rjmp	.+14     	; 0x20ce <operationLcd+0x87e>
              setNormalData();
    20c0:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setNormalData>
              printLcdU();
    20c4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    20c8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    20cc:	45 c6       	rjmp	.+3210   	; 0x2d58 <operationLcd+0x1508>
            }else{
              setErrorData();
    20ce:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setErrorData>
              printLcdU();
    20d2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    20d6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
              buzzer(1);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    20e0:	2f ef       	ldi	r18, 0xFF	; 255
    20e2:	84 e3       	ldi	r24, 0x34	; 52
    20e4:	9c e0       	ldi	r25, 0x0C	; 12
    20e6:	21 50       	subi	r18, 0x01	; 1
    20e8:	80 40       	sbci	r24, 0x00	; 0
    20ea:	90 40       	sbci	r25, 0x00	; 0
    20ec:	e1 f7       	brne	.-8      	; 0x20e6 <operationLcd+0x896>
    20ee:	00 c0       	rjmp	.+0      	; 0x20f0 <operationLcd+0x8a0>
    20f0:	00 00       	nop
              _delay_ms(500);
              buzzer(0);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    20f8:	2f c6       	rjmp	.+3166   	; 0x2d58 <operationLcd+0x1508>
            }
          }else if(stateMenuLcd == 3){
    20fa:	83 30       	cpi	r24, 0x03	; 3
    20fc:	09 f0       	breq	.+2      	; 0x2100 <operationLcd+0x8b0>
    20fe:	40 c0       	rjmp	.+128    	; 0x2180 <operationLcd+0x930>
            g_uperLineLcd[0]='3'; g_uperLineLcd[1]='.'; g_uperLineLcd[2]='S';
    2100:	e6 e0       	ldi	r30, 0x06	; 6
    2102:	f2 e0       	ldi	r31, 0x02	; 2
    2104:	83 e3       	ldi	r24, 0x33	; 51
    2106:	80 83       	st	Z, r24
    2108:	8e e2       	ldi	r24, 0x2E	; 46
    210a:	81 83       	std	Z+1, r24	; 0x01
    210c:	83 e5       	ldi	r24, 0x53	; 83
    210e:	82 83       	std	Z+2, r24	; 0x02
            g_uperLineLcd[3]='w'; g_uperLineLcd[4]='i'; g_uperLineLcd[5]='t';
    2110:	87 e7       	ldi	r24, 0x77	; 119
    2112:	83 83       	std	Z+3, r24	; 0x03
    2114:	89 e6       	ldi	r24, 0x69	; 105
    2116:	84 83       	std	Z+4, r24	; 0x04
    2118:	94 e7       	ldi	r25, 0x74	; 116
    211a:	95 83       	std	Z+5, r25	; 0x05
            g_uperLineLcd[6]='c'; g_uperLineLcd[7]='h'; g_uperLineLcd[8]='C';
    211c:	83 e6       	ldi	r24, 0x63	; 99
    211e:	86 83       	std	Z+6, r24	; 0x06
    2120:	88 e6       	ldi	r24, 0x68	; 104
    2122:	87 83       	std	Z+7, r24	; 0x07
    2124:	83 e4       	ldi	r24, 0x43	; 67
    2126:	80 87       	std	Z+8, r24	; 0x08
            g_uperLineLcd[9]='o'; g_uperLineLcd[10]='n'; g_uperLineLcd[11]='t';
    2128:	8f e6       	ldi	r24, 0x6F	; 111
    212a:	81 87       	std	Z+9, r24	; 0x09
    212c:	2e e6       	ldi	r18, 0x6E	; 110
    212e:	22 87       	std	Z+10, r18	; 0x0a
    2130:	93 87       	std	Z+11, r25	; 0x0b
            g_uperLineLcd[12]='r'; g_uperLineLcd[13]='o'; g_uperLineLcd[14]='l';
    2132:	92 e7       	ldi	r25, 0x72	; 114
    2134:	94 87       	std	Z+12, r25	; 0x0c
    2136:	85 87       	std	Z+13, r24	; 0x0d
    2138:	8c e6       	ldi	r24, 0x6C	; 108
    213a:	86 87       	std	Z+14, r24	; 0x0e
            g_uperLineLcd[15]='l';
    213c:	87 87       	std	Z+15, r24	; 0x0f
            if(g_errorCode[2] == 0){
    213e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <g_errorCode+0x2>
    2142:	81 11       	cpse	r24, r1
    2144:	07 c0       	rjmp	.+14     	; 0x2154 <operationLcd+0x904>
              setNormalData();
    2146:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setNormalData>
              printLcdU();
    214a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    214e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    2152:	02 c6       	rjmp	.+3076   	; 0x2d58 <operationLcd+0x1508>
            }else{
              setErrorData();
    2154:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setErrorData>
              printLcdU();
    2158:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    215c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
              buzzer(1);
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2166:	2f ef       	ldi	r18, 0xFF	; 255
    2168:	84 e3       	ldi	r24, 0x34	; 52
    216a:	9c e0       	ldi	r25, 0x0C	; 12
    216c:	21 50       	subi	r18, 0x01	; 1
    216e:	80 40       	sbci	r24, 0x00	; 0
    2170:	90 40       	sbci	r25, 0x00	; 0
    2172:	e1 f7       	brne	.-8      	; 0x216c <operationLcd+0x91c>
    2174:	00 c0       	rjmp	.+0      	; 0x2176 <operationLcd+0x926>
    2176:	00 00       	nop
              _delay_ms(500);
              buzzer(0);
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    217e:	ec c5       	rjmp	.+3032   	; 0x2d58 <operationLcd+0x1508>
            }
          }else if(stateMenuLcd == 4){
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	09 f0       	breq	.+2      	; 0x2186 <operationLcd+0x936>
    2184:	e9 c5       	rjmp	.+3026   	; 0x2d58 <operationLcd+0x1508>
            g_uperLineLcd[0]=' '; g_uperLineLcd[1]='4'; g_uperLineLcd[2]='.';
    2186:	e6 e0       	ldi	r30, 0x06	; 6
    2188:	f2 e0       	ldi	r31, 0x02	; 2
    218a:	80 e2       	ldi	r24, 0x20	; 32
    218c:	80 83       	st	Z, r24
    218e:	94 e3       	ldi	r25, 0x34	; 52
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	9e e2       	ldi	r25, 0x2E	; 46
    2194:	92 83       	std	Z+2, r25	; 0x02
            g_uperLineLcd[3]='D'; g_uperLineLcd[4]='i'; g_uperLineLcd[5]='s';
    2196:	94 e4       	ldi	r25, 0x44	; 68
    2198:	93 83       	std	Z+3, r25	; 0x03
    219a:	99 e6       	ldi	r25, 0x69	; 105
    219c:	94 83       	std	Z+4, r25	; 0x04
    219e:	93 e7       	ldi	r25, 0x73	; 115
    21a0:	95 83       	std	Z+5, r25	; 0x05
            g_uperLineLcd[6]='p'; g_uperLineLcd[7]='l'; g_uperLineLcd[8]='a';
    21a2:	90 e7       	ldi	r25, 0x70	; 112
    21a4:	96 83       	std	Z+6, r25	; 0x06
    21a6:	9c e6       	ldi	r25, 0x6C	; 108
    21a8:	97 83       	std	Z+7, r25	; 0x07
    21aa:	91 e6       	ldi	r25, 0x61	; 97
    21ac:	90 87       	std	Z+8, r25	; 0x08
            g_uperLineLcd[9]='y'; g_uperLineLcd[10]=' '; g_uperLineLcd[11]='L';
    21ae:	99 e7       	ldi	r25, 0x79	; 121
    21b0:	91 87       	std	Z+9, r25	; 0x09
    21b2:	82 87       	std	Z+10, r24	; 0x0a
    21b4:	9c e4       	ldi	r25, 0x4C	; 76
    21b6:	93 87       	std	Z+11, r25	; 0x0b
            g_uperLineLcd[12]='c'; g_uperLineLcd[13]='d'; g_uperLineLcd[14]=' ';
    21b8:	93 e6       	ldi	r25, 0x63	; 99
    21ba:	94 87       	std	Z+12, r25	; 0x0c
    21bc:	94 e6       	ldi	r25, 0x64	; 100
    21be:	95 87       	std	Z+13, r25	; 0x0d
    21c0:	86 87       	std	Z+14, r24	; 0x0e
            g_uperLineLcd[15]=' ';
    21c2:	87 87       	std	Z+15, r24	; 0x0f
            if(g_errorCode[3] == 0){
    21c4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <g_errorCode+0x3>
    21c8:	81 11       	cpse	r24, r1
    21ca:	07 c0       	rjmp	.+14     	; 0x21da <operationLcd+0x98a>
              setNormalData();
    21cc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <setNormalData>
              printLcdU();
    21d0:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    21d4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    21d8:	bf c5       	rjmp	.+2942   	; 0x2d58 <operationLcd+0x1508>
            }else{
              setErrorData();
    21da:	0e 94 d7 00 	call	0x1ae	; 0x1ae <setErrorData>
              printLcdU();
    21de:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
              printLcdL();
    21e2:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
              buzzer(1);
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    21ec:	2f ef       	ldi	r18, 0xFF	; 255
    21ee:	84 e3       	ldi	r24, 0x34	; 52
    21f0:	9c e0       	ldi	r25, 0x0C	; 12
    21f2:	21 50       	subi	r18, 0x01	; 1
    21f4:	80 40       	sbci	r24, 0x00	; 0
    21f6:	90 40       	sbci	r25, 0x00	; 0
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <operationLcd+0x9a2>
    21fa:	00 c0       	rjmp	.+0      	; 0x21fc <operationLcd+0x9ac>
    21fc:	00 00       	nop
              _delay_ms(500);
              buzzer(0);
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2204:	a9 c5       	rjmp	.+2898   	; 0x2d58 <operationLcd+0x1508>
            }
          }
        }else{
          if(key == 0x23){
    2206:	13 32       	cpi	r17, 0x23	; 35
    2208:	71 f4       	brne	.+28     	; 0x2226 <operationLcd+0x9d6>
            g_changeStateLcd = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
            stateMenuLcd ++;
    2210:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <stateMenuLcd>
            if(stateMenuLcd > 4){
    221a:	85 30       	cpi	r24, 0x05	; 5
    221c:	08 f4       	brcc	.+2      	; 0x2220 <operationLcd+0x9d0>
    221e:	9c c5       	rjmp	.+2872   	; 0x2d58 <operationLcd+0x1508>
              stateMenuLcd = 0;
    2220:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <stateMenuLcd>
    2224:	99 c5       	rjmp	.+2866   	; 0x2d58 <operationLcd+0x1508>
            }
          }else if(key == 0x2a){
    2226:	1a 32       	cpi	r17, 0x2A	; 42
    2228:	09 f0       	breq	.+2      	; 0x222c <operationLcd+0x9dc>
    222a:	96 c5       	rjmp	.+2860   	; 0x2d58 <operationLcd+0x1508>
            g_stateCodeLcd = 2;
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
            initStateLcd2();
    2232:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    2236:	90 c5       	rjmp	.+2848   	; 0x2d58 <operationLcd+0x1508>
          }
        }
      }else if(g_stateCodeLcd == 6){
    2238:	86 30       	cpi	r24, 0x06	; 6
    223a:	09 f0       	breq	.+2      	; 0x223e <operationLcd+0x9ee>
    223c:	00 c5       	rjmp	.+2560   	; 0x2c3e <operationLcd+0x13ee>
        if(stateMenuLcd == 0){      //create report enter engineer code
    223e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <stateMenuLcd>
    2242:	81 11       	cpse	r24, r1
    2244:	6b c0       	rjmp	.+214    	; 0x231c <operationLcd+0xacc>
          g_uperLineLcd[0]='1'; g_uperLineLcd[1]='.'; g_uperLineLcd[2]='E';
    2246:	e6 e0       	ldi	r30, 0x06	; 6
    2248:	f2 e0       	ldi	r31, 0x02	; 2
    224a:	81 e3       	ldi	r24, 0x31	; 49
    224c:	80 83       	st	Z, r24
    224e:	8e e2       	ldi	r24, 0x2E	; 46
    2250:	81 83       	std	Z+1, r24	; 0x01
    2252:	85 e4       	ldi	r24, 0x45	; 69
    2254:	82 83       	std	Z+2, r24	; 0x02
          g_uperLineLcd[3]='n'; g_uperLineLcd[4]='g'; g_uperLineLcd[5]='i';
    2256:	8e e6       	ldi	r24, 0x6E	; 110
    2258:	83 83       	std	Z+3, r24	; 0x03
    225a:	97 e6       	ldi	r25, 0x67	; 103
    225c:	94 83       	std	Z+4, r25	; 0x04
    225e:	99 e6       	ldi	r25, 0x69	; 105
    2260:	95 83       	std	Z+5, r25	; 0x05
          g_uperLineLcd[6]='n'; g_uperLineLcd[7]='e'; g_uperLineLcd[8]='e';
    2262:	86 83       	std	Z+6, r24	; 0x06
    2264:	85 e6       	ldi	r24, 0x65	; 101
    2266:	87 83       	std	Z+7, r24	; 0x07
    2268:	80 87       	std	Z+8, r24	; 0x08
          g_uperLineLcd[9]='r'; g_uperLineLcd[10]=' '; g_uperLineLcd[11]='C';
    226a:	92 e7       	ldi	r25, 0x72	; 114
    226c:	91 87       	std	Z+9, r25	; 0x09
    226e:	90 e2       	ldi	r25, 0x20	; 32
    2270:	92 87       	std	Z+10, r25	; 0x0a
    2272:	23 e4       	ldi	r18, 0x43	; 67
    2274:	23 87       	std	Z+11, r18	; 0x0b
          g_uperLineLcd[12]='o'; g_uperLineLcd[13]='d'; g_uperLineLcd[14]='e';
    2276:	2f e6       	ldi	r18, 0x6F	; 111
    2278:	24 87       	std	Z+12, r18	; 0x0c
    227a:	24 e6       	ldi	r18, 0x64	; 100
    227c:	25 87       	std	Z+13, r18	; 0x0d
    227e:	86 87       	std	Z+14, r24	; 0x0e
          g_uperLineLcd[15]=' ';
    2280:	97 87       	std	Z+15, r25	; 0x0f
          if(key >= 0x30 && key <= 0x39){
    2282:	80 ed       	ldi	r24, 0xD0	; 208
    2284:	81 0f       	add	r24, r17
    2286:	8a 30       	cpi	r24, 0x0A	; 10
    2288:	d0 f4       	brcc	.+52     	; 0x22be <operationLcd+0xa6e>
            if(g_poiterEC != 7){
    228a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <g_poiterEC>
    228e:	87 30       	cpi	r24, 0x07	; 7
    2290:	29 f0       	breq	.+10     	; 0x229c <operationLcd+0xa4c>
              g_lowerLineLcd[9+g_poiterEC] = key;
    2292:	e8 2f       	mov	r30, r24
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	e5 50       	subi	r30, 0x05	; 5
    2298:	fe 4f       	sbci	r31, 0xFE	; 254
    229a:	10 83       	st	Z, r17
            }
            g_engineerCode[g_poiterEC] = key;
    229c:	e8 2f       	mov	r30, r24
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	e8 52       	subi	r30, 0x28	; 40
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	10 83       	st	Z, r17
            g_poiterEC ++;
    22a6:	8f 5f       	subi	r24, 0xFF	; 255
    22a8:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <g_poiterEC>
            if(g_poiterEC == 7){
    22ac:	87 30       	cpi	r24, 0x07	; 7
    22ae:	11 f4       	brne	.+4      	; 0x22b4 <operationLcd+0xa64>
              g_poiterEC = 0;
    22b0:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <g_poiterEC>
            }
            g_changeStateLcd = 1;
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
            key = 0xff;
    22ba:	1f ef       	ldi	r17, 0xFF	; 255
    22bc:	22 c0       	rjmp	.+68     	; 0x2302 <operationLcd+0xab2>
          }else if(key == 0x23){
    22be:	13 32       	cpi	r17, 0x23	; 35
    22c0:	01 f5       	brne	.+64     	; 0x2302 <operationLcd+0xab2>
            stateMenuLcd = 1;
    22c2:	91 e0       	ldi	r25, 0x01	; 1
    22c4:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <stateMenuLcd>
            g_lowerLineLcd[0]='D'; g_lowerLineLcd[1]='a'; g_lowerLineLcd[2]='t';
    22c8:	e2 ef       	ldi	r30, 0xF2	; 242
    22ca:	f1 e0       	ldi	r31, 0x01	; 1
    22cc:	84 e4       	ldi	r24, 0x44	; 68
    22ce:	80 83       	st	Z, r24
    22d0:	81 e6       	ldi	r24, 0x61	; 97
    22d2:	81 83       	std	Z+1, r24	; 0x01
    22d4:	84 e7       	ldi	r24, 0x74	; 116
    22d6:	82 83       	std	Z+2, r24	; 0x02
            g_lowerLineLcd[3]='e'; g_lowerLineLcd[4]=':'; g_lowerLineLcd[5]=' ';
    22d8:	85 e6       	ldi	r24, 0x65	; 101
    22da:	83 83       	std	Z+3, r24	; 0x03
    22dc:	8a e3       	ldi	r24, 0x3A	; 58
    22de:	84 83       	std	Z+4, r24	; 0x04
    22e0:	80 e2       	ldi	r24, 0x20	; 32
    22e2:	85 83       	std	Z+5, r24	; 0x05
            g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='-'; g_lowerLineLcd[8]=' ';
    22e4:	86 83       	std	Z+6, r24	; 0x06
    22e6:	2d e2       	ldi	r18, 0x2D	; 45
    22e8:	27 83       	std	Z+7, r18	; 0x07
    22ea:	80 87       	std	Z+8, r24	; 0x08
            g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]='-'; g_lowerLineLcd[11]=' ';
    22ec:	81 87       	std	Z+9, r24	; 0x09
    22ee:	22 87       	std	Z+10, r18	; 0x0a
    22f0:	83 87       	std	Z+11, r24	; 0x0b
            g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
    22f2:	84 87       	std	Z+12, r24	; 0x0c
    22f4:	85 87       	std	Z+13, r24	; 0x0d
    22f6:	86 87       	std	Z+14, r24	; 0x0e
            g_lowerLineLcd[15]=' ';
    22f8:	87 87       	std	Z+15, r24	; 0x0f
            g_changeStateLcd = 1;
    22fa:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <g_changeStateLcd>
            g_poiterEC = 0;
    22fe:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <g_poiterEC>
          }
          printLcdU();
    2302:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          printLcdL();
    2306:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          if(key == 0x2a){
    230a:	1a 32       	cpi	r17, 0x2A	; 42
    230c:	09 f0       	breq	.+2      	; 0x2310 <operationLcd+0xac0>
    230e:	24 c5       	rjmp	.+2632   	; 0x2d58 <operationLcd+0x1508>
            g_stateCodeLcd = 2;
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
            key = 0xff;
            initStateLcd2();
    2316:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    231a:	1e c5       	rjmp	.+2620   	; 0x2d58 <operationLcd+0x1508>
          }
        }else if(stateMenuLcd == 1){   //Enter date-time
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	09 f0       	breq	.+2      	; 0x2322 <operationLcd+0xad2>
    2320:	56 c0       	rjmp	.+172    	; 0x23ce <operationLcd+0xb7e>
          g_uperLineLcd[0]=' '; g_uperLineLcd[1]=' '; g_uperLineLcd[2]='2';
    2322:	e6 e0       	ldi	r30, 0x06	; 6
    2324:	f2 e0       	ldi	r31, 0x02	; 2
    2326:	80 e2       	ldi	r24, 0x20	; 32
    2328:	80 83       	st	Z, r24
    232a:	81 83       	std	Z+1, r24	; 0x01
    232c:	92 e3       	ldi	r25, 0x32	; 50
    232e:	92 83       	std	Z+2, r25	; 0x02
          g_uperLineLcd[3]='.'; g_uperLineLcd[4]=' '; g_uperLineLcd[5]='D';
    2330:	9e e2       	ldi	r25, 0x2E	; 46
    2332:	93 83       	std	Z+3, r25	; 0x03
    2334:	84 83       	std	Z+4, r24	; 0x04
    2336:	94 e4       	ldi	r25, 0x44	; 68
    2338:	95 83       	std	Z+5, r25	; 0x05
          g_uperLineLcd[6]='a'; g_uperLineLcd[7]='t'; g_uperLineLcd[8]='e';
    233a:	91 e6       	ldi	r25, 0x61	; 97
    233c:	96 83       	std	Z+6, r25	; 0x06
    233e:	94 e7       	ldi	r25, 0x74	; 116
    2340:	97 83       	std	Z+7, r25	; 0x07
    2342:	95 e6       	ldi	r25, 0x65	; 101
    2344:	90 87       	std	Z+8, r25	; 0x08
          g_uperLineLcd[9]=' '; g_uperLineLcd[10]='T'; g_uperLineLcd[11]='i';
    2346:	81 87       	std	Z+9, r24	; 0x09
    2348:	24 e5       	ldi	r18, 0x54	; 84
    234a:	22 87       	std	Z+10, r18	; 0x0a
    234c:	29 e6       	ldi	r18, 0x69	; 105
    234e:	23 87       	std	Z+11, r18	; 0x0b
          g_uperLineLcd[12]='m'; g_uperLineLcd[13]='e'; g_uperLineLcd[14]=' ';
    2350:	2d e6       	ldi	r18, 0x6D	; 109
    2352:	24 87       	std	Z+12, r18	; 0x0c
    2354:	95 87       	std	Z+13, r25	; 0x0d
    2356:	86 87       	std	Z+14, r24	; 0x0e
          g_uperLineLcd[15]=' ';
    2358:	87 87       	std	Z+15, r24	; 0x0f
          if(key >= 0x30 && key <= 0x39){
    235a:	80 ed       	ldi	r24, 0xD0	; 208
    235c:	81 0f       	add	r24, r17
    235e:	8a 30       	cpi	r24, 0x0A	; 10
    2360:	08 f5       	brcc	.+66     	; 0x23a4 <operationLcd+0xb54>
            if(g_poiterEC != 11){
    2362:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <g_poiterEC>
    2366:	8b 30       	cpi	r24, 0x0B	; 11
    2368:	29 f0       	breq	.+10     	; 0x2374 <operationLcd+0xb24>
              g_lowerLineLcd[5+g_poiterEC] = key;
    236a:	e8 2f       	mov	r30, r24
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	e9 50       	subi	r30, 0x09	; 9
    2370:	fe 4f       	sbci	r31, 0xFE	; 254
    2372:	10 83       	st	Z, r17
            }
            g_dateTime[g_poiterEC] = key;
    2374:	e8 2f       	mov	r30, r24
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	e0 50       	subi	r30, 0x00	; 0
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	10 83       	st	Z, r17
            g_poiterEC ++;
    237e:	8f 5f       	subi	r24, 0xFF	; 255
    2380:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <g_poiterEC>
            if(g_poiterEC == 2){
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	21 f4       	brne	.+8      	; 0x2390 <operationLcd+0xb40>
              g_poiterEC ++;
    2388:	8f 5f       	subi	r24, 0xFF	; 255
    238a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <g_poiterEC>
    238e:	05 c0       	rjmp	.+10     	; 0x239a <operationLcd+0xb4a>
            }else if(g_poiterEC == 5){
    2390:	85 30       	cpi	r24, 0x05	; 5
    2392:	19 f4       	brne	.+6      	; 0x239a <operationLcd+0xb4a>
              g_poiterEC ++;
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <g_poiterEC>
            }
            g_changeStateLcd = 1;
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
            key = 0xff;
    23a0:	1f ef       	ldi	r17, 0xFF	; 255
    23a2:	08 c0       	rjmp	.+16     	; 0x23b4 <operationLcd+0xb64>
          }else if(key == 0x23){
    23a4:	13 32       	cpi	r17, 0x23	; 35
    23a6:	31 f4       	brne	.+12     	; 0x23b4 <operationLcd+0xb64>
            stateMenuLcd = 2;
    23a8:	82 e0       	ldi	r24, 0x02	; 2
    23aa:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <stateMenuLcd>
            g_changeStateLcd = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
          }
          printLcdU();
    23b4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          printLcdL();
    23b8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          if(key == 0x2a){
    23bc:	1a 32       	cpi	r17, 0x2A	; 42
    23be:	09 f0       	breq	.+2      	; 0x23c2 <operationLcd+0xb72>
    23c0:	cb c4       	rjmp	.+2454   	; 0x2d58 <operationLcd+0x1508>
            g_stateCodeLcd = 2;
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
            key = 0xff;
            initStateLcd2();
    23c8:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    23cc:	c5 c4       	rjmp	.+2442   	; 0x2d58 <operationLcd+0x1508>
          }
        }else if(stateMenuLcd == 2){ //Setup complete
    23ce:	82 30       	cpi	r24, 0x02	; 2
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <operationLcd+0xb84>
    23d2:	49 c0       	rjmp	.+146    	; 0x2466 <operationLcd+0xc16>
          g_uperLineLcd[0]=' '; g_uperLineLcd[1]='S'; g_uperLineLcd[2]='e';
    23d4:	e6 e0       	ldi	r30, 0x06	; 6
    23d6:	f2 e0       	ldi	r31, 0x02	; 2
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	80 83       	st	Z, r24
    23dc:	93 e5       	ldi	r25, 0x53	; 83
    23de:	91 83       	std	Z+1, r25	; 0x01
    23e0:	95 e6       	ldi	r25, 0x65	; 101
    23e2:	92 83       	std	Z+2, r25	; 0x02
          g_uperLineLcd[3]='t'; g_uperLineLcd[4]='u'; g_uperLineLcd[5]='p';
    23e4:	34 e7       	ldi	r19, 0x74	; 116
    23e6:	33 83       	std	Z+3, r19	; 0x03
    23e8:	25 e7       	ldi	r18, 0x75	; 117
    23ea:	24 83       	std	Z+4, r18	; 0x04
    23ec:	20 e7       	ldi	r18, 0x70	; 112
    23ee:	25 83       	std	Z+5, r18	; 0x05
          g_uperLineLcd[6]=' '; g_uperLineLcd[7]='C'; g_uperLineLcd[8]='o';
    23f0:	86 83       	std	Z+6, r24	; 0x06
    23f2:	43 e4       	ldi	r20, 0x43	; 67
    23f4:	47 83       	std	Z+7, r20	; 0x07
    23f6:	4f e6       	ldi	r20, 0x6F	; 111
    23f8:	40 87       	std	Z+8, r20	; 0x08
          g_uperLineLcd[9]='m'; g_uperLineLcd[10]='p'; g_uperLineLcd[11]='l';
    23fa:	4d e6       	ldi	r20, 0x6D	; 109
    23fc:	41 87       	std	Z+9, r20	; 0x09
    23fe:	22 87       	std	Z+10, r18	; 0x0a
    2400:	2c e6       	ldi	r18, 0x6C	; 108
    2402:	23 87       	std	Z+11, r18	; 0x0b
          g_uperLineLcd[12]='e'; g_uperLineLcd[13]='t'; g_uperLineLcd[14]='e';
    2404:	94 87       	std	Z+12, r25	; 0x0c
    2406:	35 87       	std	Z+13, r19	; 0x0d
    2408:	96 87       	std	Z+14, r25	; 0x0e
          g_uperLineLcd[15]=' ';
    240a:	87 87       	std	Z+15, r24	; 0x0f
          g_lowerLineLcd[0]=' '; g_lowerLineLcd[1]='P'; g_lowerLineLcd[2]='l';
    240c:	e2 ef       	ldi	r30, 0xF2	; 242
    240e:	f1 e0       	ldi	r31, 0x01	; 1
    2410:	80 83       	st	Z, r24
    2412:	30 e5       	ldi	r19, 0x50	; 80
    2414:	31 83       	std	Z+1, r19	; 0x01
    2416:	22 83       	std	Z+2, r18	; 0x02
          g_lowerLineLcd[3]='e'; g_lowerLineLcd[4]='a'; g_lowerLineLcd[5]='s';
    2418:	93 83       	std	Z+3, r25	; 0x03
    241a:	21 e6       	ldi	r18, 0x61	; 97
    241c:	24 83       	std	Z+4, r18	; 0x04
    241e:	23 e7       	ldi	r18, 0x73	; 115
    2420:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]='e'; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='P';
    2422:	96 83       	std	Z+6, r25	; 0x06
    2424:	87 83       	std	Z+7, r24	; 0x07
    2426:	30 87       	std	Z+8, r19	; 0x08
          g_lowerLineLcd[9]='r'; g_lowerLineLcd[10]='e'; g_lowerLineLcd[11]='s';
    2428:	32 e7       	ldi	r19, 0x72	; 114
    242a:	31 87       	std	Z+9, r19	; 0x09
    242c:	92 87       	std	Z+10, r25	; 0x0a
    242e:	23 87       	std	Z+11, r18	; 0x0b
          g_lowerLineLcd[12]='s'; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]='#';
    2430:	24 87       	std	Z+12, r18	; 0x0c
    2432:	85 87       	std	Z+13, r24	; 0x0d
    2434:	93 e2       	ldi	r25, 0x23	; 35
    2436:	96 87       	std	Z+14, r25	; 0x0e
          g_lowerLineLcd[15]=' ';
    2438:	87 87       	std	Z+15, r24	; 0x0f
          printLcdU();
    243a:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          printLcdL();
    243e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          if(key == 0x2a){
    2442:	1a 32       	cpi	r17, 0x2A	; 42
    2444:	31 f4       	brne	.+12     	; 0x2452 <operationLcd+0xc02>
            g_stateCodeLcd = 2;
    2446:	82 e0       	ldi	r24, 0x02	; 2
    2448:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
            key = 0xff;
            initStateLcd2();
    244c:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    2450:	83 c4       	rjmp	.+2310   	; 0x2d58 <operationLcd+0x1508>
          }else if(key == 0x23){
    2452:	13 32       	cpi	r17, 0x23	; 35
    2454:	09 f0       	breq	.+2      	; 0x2458 <operationLcd+0xc08>
    2456:	80 c4       	rjmp	.+2304   	; 0x2d58 <operationLcd+0x1508>
            stateMenuLcd = 3;
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <stateMenuLcd>
            g_changeStateLcd = 1;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <g_changeStateLcd>
    2464:	79 c4       	rjmp	.+2290   	; 0x2d58 <operationLcd+0x1508>
          }
        }else if(stateMenuLcd == 3){
    2466:	83 30       	cpi	r24, 0x03	; 3
    2468:	09 f0       	breq	.+2      	; 0x246c <operationLcd+0xc1c>
    246a:	76 c4       	rjmp	.+2284   	; 0x2d58 <operationLcd+0x1508>
          unsigned char i = 0;
          unsigned char string[20];
          string[0]='='; string[1]='='; string[2]='=';
    246c:	8d e3       	ldi	r24, 0x3D	; 61
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	8a 83       	std	Y+2, r24	; 0x02
    2472:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='='; string[4]='='; string[5]='=';
    2474:	8c 83       	std	Y+4, r24	; 0x04
    2476:	8d 83       	std	Y+5, r24	; 0x05
    2478:	8e 83       	std	Y+6, r24	; 0x06
          string[6]='='; string[7]='='; string[8]='=';
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	88 87       	std	Y+8, r24	; 0x08
    247e:	89 87       	std	Y+9, r24	; 0x09
          string[9]='='; string[10]='='; string[11]='=';
    2480:	8a 87       	std	Y+10, r24	; 0x0a
    2482:	8b 87       	std	Y+11, r24	; 0x0b
    2484:	8c 87       	std	Y+12, r24	; 0x0c
          string[12]='='; string[13]='='; string[14]='=';
    2486:	8d 87       	std	Y+13, r24	; 0x0d
    2488:	8e 87       	std	Y+14, r24	; 0x0e
    248a:	8f 87       	std	Y+15, r24	; 0x0f
          string[15]='='; string[16]='='; string[17]='=';
    248c:	88 8b       	std	Y+16, r24	; 0x10
    248e:	89 8b       	std	Y+17, r24	; 0x11
    2490:	8a 8b       	std	Y+18, r24	; 0x12
          string[18]='='; string[19]='=';
    2492:	8b 8b       	std	Y+19, r24	; 0x13
    2494:	8c 8b       	std	Y+20, r24	; 0x14
          g_uperLineLcd[0]='C'; g_uperLineLcd[1]='r'; g_uperLineLcd[2]='e';
    2496:	e6 e0       	ldi	r30, 0x06	; 6
    2498:	f2 e0       	ldi	r31, 0x02	; 2
    249a:	83 e4       	ldi	r24, 0x43	; 67
    249c:	80 83       	st	Z, r24
    249e:	72 e7       	ldi	r23, 0x72	; 114
    24a0:	71 83       	std	Z+1, r23	; 0x01
    24a2:	25 e6       	ldi	r18, 0x65	; 101
    24a4:	22 83       	std	Z+2, r18	; 0x02
          g_uperLineLcd[3]='a'; g_uperLineLcd[4]='t'; g_uperLineLcd[5]='i';
    24a6:	41 e6       	ldi	r20, 0x61	; 97
    24a8:	43 83       	std	Z+3, r20	; 0x03
    24aa:	94 e7       	ldi	r25, 0x74	; 116
    24ac:	94 83       	std	Z+4, r25	; 0x04
    24ae:	39 e6       	ldi	r19, 0x69	; 105
    24b0:	35 83       	std	Z+5, r19	; 0x05
          g_uperLineLcd[6]='n'; g_uperLineLcd[7]='g'; g_uperLineLcd[8]=' ';
    24b2:	6e e6       	ldi	r22, 0x6E	; 110
    24b4:	66 83       	std	Z+6, r22	; 0x06
    24b6:	57 e6       	ldi	r21, 0x67	; 103
    24b8:	57 83       	std	Z+7, r21	; 0x07
    24ba:	80 e2       	ldi	r24, 0x20	; 32
    24bc:	80 87       	std	Z+8, r24	; 0x08
          g_uperLineLcd[9]='R'; g_uperLineLcd[10]='e'; g_uperLineLcd[11]='p';
    24be:	a2 e5       	ldi	r26, 0x52	; 82
    24c0:	a1 87       	std	Z+9, r26	; 0x09
    24c2:	22 87       	std	Z+10, r18	; 0x0a
    24c4:	a0 e7       	ldi	r26, 0x70	; 112
    24c6:	a3 87       	std	Z+11, r26	; 0x0b
          g_uperLineLcd[12]='o'; g_uperLineLcd[13]='r'; g_uperLineLcd[14]='t';
    24c8:	af e6       	ldi	r26, 0x6F	; 111
    24ca:	a4 87       	std	Z+12, r26	; 0x0c
    24cc:	75 87       	std	Z+13, r23	; 0x0d
    24ce:	96 87       	std	Z+14, r25	; 0x0e
          g_uperLineLcd[15]=' ';   //Creating report
    24d0:	87 87       	std	Z+15, r24	; 0x0f
          g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='l'; g_lowerLineLcd[2]='e';
    24d2:	e2 ef       	ldi	r30, 0xF2	; 242
    24d4:	f1 e0       	ldi	r31, 0x01	; 1
    24d6:	70 e5       	ldi	r23, 0x50	; 80
    24d8:	70 83       	st	Z, r23
    24da:	7c e6       	ldi	r23, 0x6C	; 108
    24dc:	71 83       	std	Z+1, r23	; 0x01
    24de:	22 83       	std	Z+2, r18	; 0x02
          g_lowerLineLcd[3]='a'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]='e';
    24e0:	43 83       	std	Z+3, r20	; 0x03
    24e2:	73 e7       	ldi	r23, 0x73	; 115
    24e4:	74 83       	std	Z+4, r23	; 0x04
    24e6:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='W'; g_lowerLineLcd[8]='a';
    24e8:	86 83       	std	Z+6, r24	; 0x06
    24ea:	27 e5       	ldi	r18, 0x57	; 87
    24ec:	27 83       	std	Z+7, r18	; 0x07
    24ee:	40 87       	std	Z+8, r20	; 0x08
          g_lowerLineLcd[9]='i'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]='t';
    24f0:	31 87       	std	Z+9, r19	; 0x09
    24f2:	92 87       	std	Z+10, r25	; 0x0a
    24f4:	93 87       	std	Z+11, r25	; 0x0b
          g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='n'; g_lowerLineLcd[14]='g';
    24f6:	34 87       	std	Z+12, r19	; 0x0c
    24f8:	65 87       	std	Z+13, r22	; 0x0d
    24fa:	56 87       	std	Z+14, r21	; 0x0e
          g_lowerLineLcd[15]=' '; //Please waitting
    24fc:	87 87       	std	Z+15, r24	; 0x0f
          printLcdU();
    24fe:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          printLcdL();
    2502:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          for(i = 0; i<20; i++){
    2506:	10 e0       	ldi	r17, 0x00	; 0
    2508:	0a c0       	rjmp	.+20     	; 0x251e <operationLcd+0xcce>
            USART_Transmit(string[i]);
    250a:	e1 e0       	ldi	r30, 0x01	; 1
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	ec 0f       	add	r30, r28
    2510:	fd 1f       	adc	r31, r29
    2512:	e1 0f       	add	r30, r17
    2514:	f1 1d       	adc	r31, r1
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          g_lowerLineLcd[9]='i'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]='t';
          g_lowerLineLcd[12]='i'; g_lowerLineLcd[13]='n'; g_lowerLineLcd[14]='g';
          g_lowerLineLcd[15]=' '; //Please waitting
          printLcdU();
          printLcdL();
          for(i = 0; i<20; i++){
    251c:	1f 5f       	subi	r17, 0xFF	; 255
    251e:	14 31       	cpi	r17, 0x14	; 20
    2520:	a0 f3       	brcs	.-24     	; 0x250a <operationLcd+0xcba>
            USART_Transmit(string[i]);
          }
          USART_Transmit('\n');
    2522:	8a e0       	ldi	r24, 0x0A	; 10
    2524:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    2528:	2f ef       	ldi	r18, 0xFF	; 255
    252a:	84 e3       	ldi	r24, 0x34	; 52
    252c:	9c e0       	ldi	r25, 0x0C	; 12
    252e:	21 50       	subi	r18, 0x01	; 1
    2530:	80 40       	sbci	r24, 0x00	; 0
    2532:	90 40       	sbci	r25, 0x00	; 0
    2534:	e1 f7       	brne	.-8      	; 0x252e <operationLcd+0xcde>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <operationLcd+0xce8>
    2538:	00 00       	nop
          _delay_ms(500);
          if(g_engineerCode[0] == 0x32 && g_engineerCode[5] == 0x37 && g_engineerCode[6] == 0x37){
    253a:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <g_engineerCode>
    253e:	82 33       	cpi	r24, 0x32	; 50
    2540:	09 f0       	breq	.+2      	; 0x2544 <operationLcd+0xcf4>
    2542:	4b c0       	rjmp	.+150    	; 0x25da <operationLcd+0xd8a>
    2544:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <g_engineerCode+0x5>
    2548:	87 33       	cpi	r24, 0x37	; 55
    254a:	09 f0       	breq	.+2      	; 0x254e <operationLcd+0xcfe>
    254c:	46 c0       	rjmp	.+140    	; 0x25da <operationLcd+0xd8a>
    254e:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <g_engineerCode+0x6>
    2552:	87 33       	cpi	r24, 0x37	; 55
    2554:	09 f0       	breq	.+2      	; 0x2558 <operationLcd+0xd08>
    2556:	41 c0       	rjmp	.+130    	; 0x25da <operationLcd+0xd8a>
            string[0]='E'; string[1]='n'; string[2]='g';
    2558:	85 e4       	ldi	r24, 0x45	; 69
    255a:	89 83       	std	Y+1, r24	; 0x01
    255c:	8e e6       	ldi	r24, 0x6E	; 110
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	97 e6       	ldi	r25, 0x67	; 103
    2562:	9b 83       	std	Y+3, r25	; 0x03
            string[3]='i'; string[4]='n'; string[5]='e';
    2564:	99 e6       	ldi	r25, 0x69	; 105
    2566:	9c 83       	std	Y+4, r25	; 0x04
    2568:	8d 83       	std	Y+5, r24	; 0x05
    256a:	95 e6       	ldi	r25, 0x65	; 101
    256c:	9e 83       	std	Y+6, r25	; 0x06
            string[6]='e'; string[7]='r'; string[8]=':';
    256e:	9f 83       	std	Y+7, r25	; 0x07
    2570:	92 e7       	ldi	r25, 0x72	; 114
    2572:	98 87       	std	Y+8, r25	; 0x08
    2574:	9a e3       	ldi	r25, 0x3A	; 58
    2576:	99 87       	std	Y+9, r25	; 0x09
            string[9]='T'; string[10]='h'; string[11]='a';
    2578:	34 e5       	ldi	r19, 0x54	; 84
    257a:	3a 87       	std	Y+10, r19	; 0x0a
    257c:	98 e6       	ldi	r25, 0x68	; 104
    257e:	9b 87       	std	Y+11, r25	; 0x0b
    2580:	21 e6       	ldi	r18, 0x61	; 97
    2582:	2c 87       	std	Y+12, r18	; 0x0c
            string[12]='n'; string[13]='h'; string[14]=' ';
    2584:	8d 87       	std	Y+13, r24	; 0x0d
    2586:	9e 87       	std	Y+14, r25	; 0x0e
    2588:	90 e2       	ldi	r25, 0x20	; 32
    258a:	9f 87       	std	Y+15, r25	; 0x0f
            string[15]='T'; string[16]='o'; string[17]='a';
    258c:	38 8b       	std	Y+16, r19	; 0x10
    258e:	3f e6       	ldi	r19, 0x6F	; 111
    2590:	39 8b       	std	Y+17, r19	; 0x11
    2592:	2a 8b       	std	Y+18, r18	; 0x12
            string[18]='n'; string[19]=' ';
    2594:	8b 8b       	std	Y+19, r24	; 0x13
    2596:	9c 8b       	std	Y+20, r25	; 0x14
            i = 0;
            for(i = 0; i<20; i++){
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	0a c0       	rjmp	.+20     	; 0x25b0 <operationLcd+0xd60>
              USART_Transmit(string[i]);
    259c:	e1 e0       	ldi	r30, 0x01	; 1
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	ec 0f       	add	r30, r28
    25a2:	fd 1f       	adc	r31, r29
    25a4:	e1 0f       	add	r30, r17
    25a6:	f1 1d       	adc	r31, r1
    25a8:	80 81       	ld	r24, Z
    25aa:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='T'; string[10]='h'; string[11]='a';
            string[12]='n'; string[13]='h'; string[14]=' ';
            string[15]='T'; string[16]='o'; string[17]='a';
            string[18]='n'; string[19]=' ';
            i = 0;
            for(i = 0; i<20; i++){
    25ae:	1f 5f       	subi	r17, 0xFF	; 255
    25b0:	14 31       	cpi	r17, 0x14	; 20
    25b2:	a0 f3       	brcs	.-24     	; 0x259c <operationLcd+0xd4c>
              USART_Transmit(string[i]);
            }
            USART_Transmit(':');
    25b4:	8a e3       	ldi	r24, 0x3A	; 58
    25b6:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            for(i=0; i<7;i++){
    25ba:	10 e0       	ldi	r17, 0x00	; 0
    25bc:	08 c0       	rjmp	.+16     	; 0x25ce <operationLcd+0xd7e>
              USART_Transmit(g_engineerCode[i]);
    25be:	e1 2f       	mov	r30, r17
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	e8 52       	subi	r30, 0x28	; 40
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 81       	ld	r24, Z
    25c8:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            i = 0;
            for(i = 0; i<20; i++){
              USART_Transmit(string[i]);
            }
            USART_Transmit(':');
            for(i=0; i<7;i++){
    25cc:	1f 5f       	subi	r17, 0xFF	; 255
    25ce:	17 30       	cpi	r17, 0x07	; 7
    25d0:	b0 f3       	brcs	.-20     	; 0x25be <operationLcd+0xd6e>
              USART_Transmit(g_engineerCode[i]);
            }
            USART_Transmit('\n');
    25d2:	8a e0       	ldi	r24, 0x0A	; 10
    25d4:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    25d8:	34 c0       	rjmp	.+104    	; 0x2642 <operationLcd+0xdf2>
          }else{
            string[0]='E'; string[1]='n'; string[2]='g';
    25da:	85 e4       	ldi	r24, 0x45	; 69
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	8e e6       	ldi	r24, 0x6E	; 110
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	97 e6       	ldi	r25, 0x67	; 103
    25e4:	9b 83       	std	Y+3, r25	; 0x03
            string[3]='i'; string[4]='n'; string[5]='e';
    25e6:	99 e6       	ldi	r25, 0x69	; 105
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8d 83       	std	Y+5, r24	; 0x05
    25ec:	95 e6       	ldi	r25, 0x65	; 101
    25ee:	9e 83       	std	Y+6, r25	; 0x06
            string[6]='e'; string[7]='r'; string[8]=':';
    25f0:	9f 83       	std	Y+7, r25	; 0x07
    25f2:	92 e7       	ldi	r25, 0x72	; 114
    25f4:	98 87       	std	Y+8, r25	; 0x08
    25f6:	9a e3       	ldi	r25, 0x3A	; 58
    25f8:	99 87       	std	Y+9, r25	; 0x09
            string[9]='U'; string[10]='n'; string[11]='k';
    25fa:	95 e5       	ldi	r25, 0x55	; 85
    25fc:	9a 87       	std	Y+10, r25	; 0x0a
    25fe:	8b 87       	std	Y+11, r24	; 0x0b
    2600:	9b e6       	ldi	r25, 0x6B	; 107
    2602:	9c 87       	std	Y+12, r25	; 0x0c
            string[12]='n'; string[13]='o'; string[14]='w';
    2604:	8d 87       	std	Y+13, r24	; 0x0d
    2606:	8f e6       	ldi	r24, 0x6F	; 111
    2608:	8e 87       	std	Y+14, r24	; 0x0e
    260a:	87 e7       	ldi	r24, 0x77	; 119
    260c:	8f 87       	std	Y+15, r24	; 0x0f
            string[15]=' '; string[16]='D'; string[17]='a';
    260e:	80 e2       	ldi	r24, 0x20	; 32
    2610:	88 8b       	std	Y+16, r24	; 0x10
    2612:	84 e4       	ldi	r24, 0x44	; 68
    2614:	89 8b       	std	Y+17, r24	; 0x11
    2616:	81 e6       	ldi	r24, 0x61	; 97
    2618:	8a 8b       	std	Y+18, r24	; 0x12
            string[18]='t'; string[19]='a';
    261a:	94 e7       	ldi	r25, 0x74	; 116
    261c:	9b 8b       	std	Y+19, r25	; 0x13
    261e:	8c 8b       	std	Y+20, r24	; 0x14
            i = 0;
            for(i = 0; i<20; i++){
    2620:	10 e0       	ldi	r17, 0x00	; 0
    2622:	0a c0       	rjmp	.+20     	; 0x2638 <operationLcd+0xde8>
              USART_Transmit(string[i]);
    2624:	e1 e0       	ldi	r30, 0x01	; 1
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	ec 0f       	add	r30, r28
    262a:	fd 1f       	adc	r31, r29
    262c:	e1 0f       	add	r30, r17
    262e:	f1 1d       	adc	r31, r1
    2630:	80 81       	ld	r24, Z
    2632:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='U'; string[10]='n'; string[11]='k';
            string[12]='n'; string[13]='o'; string[14]='w';
            string[15]=' '; string[16]='D'; string[17]='a';
            string[18]='t'; string[19]='a';
            i = 0;
            for(i = 0; i<20; i++){
    2636:	1f 5f       	subi	r17, 0xFF	; 255
    2638:	14 31       	cpi	r17, 0x14	; 20
    263a:	a0 f3       	brcs	.-24     	; 0x2624 <operationLcd+0xdd4>
              USART_Transmit(string[i]);
            }
            USART_Transmit('\n');
    263c:	8a e0       	ldi	r24, 0x0A	; 10
    263e:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    2642:	2f ef       	ldi	r18, 0xFF	; 255
    2644:	86 e1       	ldi	r24, 0x16	; 22
    2646:	91 e1       	ldi	r25, 0x11	; 17
    2648:	21 50       	subi	r18, 0x01	; 1
    264a:	80 40       	sbci	r24, 0x00	; 0
    264c:	90 40       	sbci	r25, 0x00	; 0
    264e:	e1 f7       	brne	.-8      	; 0x2648 <operationLcd+0xdf8>
    2650:	00 c0       	rjmp	.+0      	; 0x2652 <operationLcd+0xe02>
    2652:	00 00       	nop
          }
          _delay_ms(700);
          string[0]='D'; string[1]='a'; string[2]='t';
    2654:	84 e4       	ldi	r24, 0x44	; 68
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	91 e6       	ldi	r25, 0x61	; 97
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	84 e7       	ldi	r24, 0x74	; 116
    265e:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='a'; string[4]=' '; string[5]='t';
    2660:	9c 83       	std	Y+4, r25	; 0x04
    2662:	90 e2       	ldi	r25, 0x20	; 32
    2664:	9d 83       	std	Y+5, r25	; 0x05
    2666:	8e 83       	std	Y+6, r24	; 0x06
          string[6]='i'; string[7]='m'; string[8]='e';
    2668:	89 e6       	ldi	r24, 0x69	; 105
    266a:	8f 83       	std	Y+7, r24	; 0x07
    266c:	8d e6       	ldi	r24, 0x6D	; 109
    266e:	88 87       	std	Y+8, r24	; 0x08
    2670:	85 e6       	ldi	r24, 0x65	; 101
    2672:	89 87       	std	Y+9, r24	; 0x09
          string[9]=':';
    2674:	8a e3       	ldi	r24, 0x3A	; 58
    2676:	8a 87       	std	Y+10, r24	; 0x0a
          i = 0;
          for(i = 0; i<10; i++){
    2678:	10 e0       	ldi	r17, 0x00	; 0
    267a:	0a c0       	rjmp	.+20     	; 0x2690 <operationLcd+0xe40>
              USART_Transmit(string[i]);
    267c:	e1 e0       	ldi	r30, 0x01	; 1
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	ec 0f       	add	r30, r28
    2682:	fd 1f       	adc	r31, r29
    2684:	e1 0f       	add	r30, r17
    2686:	f1 1d       	adc	r31, r1
    2688:	80 81       	ld	r24, Z
    268a:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[0]='D'; string[1]='a'; string[2]='t';
          string[3]='a'; string[4]=' '; string[5]='t';
          string[6]='i'; string[7]='m'; string[8]='e';
          string[9]=':';
          i = 0;
          for(i = 0; i<10; i++){
    268e:	1f 5f       	subi	r17, 0xFF	; 255
    2690:	1a 30       	cpi	r17, 0x0A	; 10
    2692:	a0 f3       	brcs	.-24     	; 0x267c <operationLcd+0xe2c>
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	08 c0       	rjmp	.+16     	; 0x26a8 <operationLcd+0xe58>
              USART_Transmit(string[i]);
          }
          for(i=0; i<10; i++){
            USART_Transmit(g_dateTime[i]);
    2698:	e1 2f       	mov	r30, r17
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	e0 50       	subi	r30, 0x00	; 0
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[9]=':';
          i = 0;
          for(i = 0; i<10; i++){
              USART_Transmit(string[i]);
          }
          for(i=0; i<10; i++){
    26a6:	1f 5f       	subi	r17, 0xFF	; 255
    26a8:	1a 30       	cpi	r17, 0x0A	; 10
    26aa:	b0 f3       	brcs	.-20     	; 0x2698 <operationLcd+0xe48>
            USART_Transmit(g_dateTime[i]);
          }
          USART_Transmit('\n');
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    26b2:	2f ef       	ldi	r18, 0xFF	; 255
    26b4:	84 e3       	ldi	r24, 0x34	; 52
    26b6:	9c e0       	ldi	r25, 0x0C	; 12
    26b8:	21 50       	subi	r18, 0x01	; 1
    26ba:	80 40       	sbci	r24, 0x00	; 0
    26bc:	90 40       	sbci	r25, 0x00	; 0
    26be:	e1 f7       	brne	.-8      	; 0x26b8 <operationLcd+0xe68>
    26c0:	00 c0       	rjmp	.+0      	; 0x26c2 <operationLcd+0xe72>
    26c2:	00 00       	nop
          _delay_ms(500);
          string[0]='H'; string[1]='e'; string[2]='a';
    26c4:	88 e4       	ldi	r24, 0x48	; 72
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	95 e6       	ldi	r25, 0x65	; 101
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	81 e6       	ldi	r24, 0x61	; 97
    26ce:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='l'; string[4]='t'; string[5]='h';
    26d0:	8c e6       	ldi	r24, 0x6C	; 108
    26d2:	8c 83       	std	Y+4, r24	; 0x04
    26d4:	24 e7       	ldi	r18, 0x74	; 116
    26d6:	2d 83       	std	Y+5, r18	; 0x05
    26d8:	88 e6       	ldi	r24, 0x68	; 104
    26da:	8e 83       	std	Y+6, r24	; 0x06
          string[6]=' '; string[7]='o'; string[8]='f';
    26dc:	80 e2       	ldi	r24, 0x20	; 32
    26de:	8f 83       	std	Y+7, r24	; 0x07
    26e0:	3f e6       	ldi	r19, 0x6F	; 111
    26e2:	38 87       	std	Y+8, r19	; 0x08
    26e4:	36 e6       	ldi	r19, 0x66	; 102
    26e6:	39 87       	std	Y+9, r19	; 0x09
          string[9]=' '; string[10]='s'; string[11]='y';
    26e8:	8a 87       	std	Y+10, r24	; 0x0a
    26ea:	33 e7       	ldi	r19, 0x73	; 115
    26ec:	3b 87       	std	Y+11, r19	; 0x0b
    26ee:	49 e7       	ldi	r20, 0x79	; 121
    26f0:	4c 87       	std	Y+12, r20	; 0x0c
          string[12]='s'; string[13]='t'; string[14]='e';
    26f2:	3d 87       	std	Y+13, r19	; 0x0d
    26f4:	2e 87       	std	Y+14, r18	; 0x0e
    26f6:	9f 87       	std	Y+15, r25	; 0x0f
          string[15]='m'; string[16]=' '; string[17]=' ';
    26f8:	9d e6       	ldi	r25, 0x6D	; 109
    26fa:	98 8b       	std	Y+16, r25	; 0x10
    26fc:	89 8b       	std	Y+17, r24	; 0x11
    26fe:	8a 8b       	std	Y+18, r24	; 0x12
          string[18]=' '; string[19]=' ';
    2700:	8b 8b       	std	Y+19, r24	; 0x13
    2702:	8c 8b       	std	Y+20, r24	; 0x14
          i = 0;
          for(i=0; i<20; i++){
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	0a c0       	rjmp	.+20     	; 0x271c <operationLcd+0xecc>
            USART_Transmit(string[i]);
    2708:	e1 e0       	ldi	r30, 0x01	; 1
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	ec 0f       	add	r30, r28
    270e:	fd 1f       	adc	r31, r29
    2710:	e1 0f       	add	r30, r17
    2712:	f1 1d       	adc	r31, r1
    2714:	80 81       	ld	r24, Z
    2716:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[9]=' '; string[10]='s'; string[11]='y';
          string[12]='s'; string[13]='t'; string[14]='e';
          string[15]='m'; string[16]=' '; string[17]=' ';
          string[18]=' '; string[19]=' ';
          i = 0;
          for(i=0; i<20; i++){
    271a:	1f 5f       	subi	r17, 0xFF	; 255
    271c:	14 31       	cpi	r17, 0x14	; 20
    271e:	a0 f3       	brcs	.-24     	; 0x2708 <operationLcd+0xeb8>
            USART_Transmit(string[i]);
          }
          USART_Transmit('\n');
    2720:	8a e0       	ldi	r24, 0x0A	; 10
    2722:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[0]='1'; string[1]='.'; string[2]='S';
    2726:	81 e3       	ldi	r24, 0x31	; 49
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	8e e2       	ldi	r24, 0x2E	; 46
    272c:	8a 83       	std	Y+2, r24	; 0x02
    272e:	83 e5       	ldi	r24, 0x53	; 83
    2730:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='y'; string[4]='s'; string[5]='t';
    2732:	89 e7       	ldi	r24, 0x79	; 121
    2734:	8c 83       	std	Y+4, r24	; 0x04
    2736:	93 e7       	ldi	r25, 0x73	; 115
    2738:	9d 83       	std	Y+5, r25	; 0x05
    273a:	84 e7       	ldi	r24, 0x74	; 116
    273c:	8e 83       	std	Y+6, r24	; 0x06
          string[6]='e'; string[7]='m'; string[8]=' ';
    273e:	25 e6       	ldi	r18, 0x65	; 101
    2740:	2f 83       	std	Y+7, r18	; 0x07
    2742:	8d e6       	ldi	r24, 0x6D	; 109
    2744:	88 87       	std	Y+8, r24	; 0x08
    2746:	80 e2       	ldi	r24, 0x20	; 32
    2748:	89 87       	std	Y+9, r24	; 0x09
          string[9]='k'; string[10]='e'; string[11]='y';
    274a:	3b e6       	ldi	r19, 0x6B	; 107
    274c:	3a 87       	std	Y+10, r19	; 0x0a
    274e:	2b 87       	std	Y+11, r18	; 0x0b
          string[12]='p'; string[13]='a'; string[14]='d';
    2750:	20 e7       	ldi	r18, 0x70	; 112
    2752:	2d 87       	std	Y+13, r18	; 0x0d
    2754:	21 e6       	ldi	r18, 0x61	; 97
    2756:	2e 87       	std	Y+14, r18	; 0x0e
    2758:	24 e6       	ldi	r18, 0x64	; 100
    275a:	2f 87       	std	Y+15, r18	; 0x0f
          string[15]=' '; string[16]='i'; string[17]='n';
    275c:	88 8b       	std	Y+16, r24	; 0x10
    275e:	89 e6       	ldi	r24, 0x69	; 105
    2760:	89 8b       	std	Y+17, r24	; 0x11
    2762:	2e e6       	ldi	r18, 0x6E	; 110
    2764:	2a 8b       	std	Y+18, r18	; 0x12
          string[18]='s'; string[19]='i';
    2766:	9b 8b       	std	Y+19, r25	; 0x13
    2768:	8c 8b       	std	Y+20, r24	; 0x14
          i = 0;
          for(i=0; i<20; i++){
    276a:	10 e0       	ldi	r17, 0x00	; 0
    276c:	0a c0       	rjmp	.+20     	; 0x2782 <operationLcd+0xf32>
            USART_Transmit(string[i]);
    276e:	e1 e0       	ldi	r30, 0x01	; 1
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	ec 0f       	add	r30, r28
    2774:	fd 1f       	adc	r31, r29
    2776:	e1 0f       	add	r30, r17
    2778:	f1 1d       	adc	r31, r1
    277a:	80 81       	ld	r24, Z
    277c:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[9]='k'; string[10]='e'; string[11]='y';
          string[12]='p'; string[13]='a'; string[14]='d';
          string[15]=' '; string[16]='i'; string[17]='n';
          string[18]='s'; string[19]='i';
          i = 0;
          for(i=0; i<20; i++){
    2780:	1f 5f       	subi	r17, 0xFF	; 255
    2782:	14 31       	cpi	r17, 0x14	; 20
    2784:	a0 f3       	brcs	.-24     	; 0x276e <operationLcd+0xf1e>
            USART_Transmit(string[i]);
          }
          USART_Transmit('d');
    2786:	84 e6       	ldi	r24, 0x64	; 100
    2788:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          USART_Transmit('e');
    278c:	85 e6       	ldi	r24, 0x65	; 101
    278e:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          USART_Transmit(':');
    2792:	8a e3       	ldi	r24, 0x3A	; 58
    2794:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          if(g_errorCode[0] == 0){
    2798:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <g_errorCode>
    279c:	81 11       	cpse	r24, r1
    279e:	22 c0       	rjmp	.+68     	; 0x27e4 <operationLcd+0xf94>
            string[0]='G'; string[1]='O'; string[2]='O';
    27a0:	87 e4       	ldi	r24, 0x47	; 71
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	8f e4       	ldi	r24, 0x4F	; 79
    27a6:	8a 83       	std	Y+2, r24	; 0x02
    27a8:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='D'; string[4]=' '; string[5]='H';
    27aa:	84 e4       	ldi	r24, 0x44	; 68
    27ac:	8c 83       	std	Y+4, r24	; 0x04
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	88 e4       	ldi	r24, 0x48	; 72
    27b4:	8e 83       	std	Y+6, r24	; 0x06
            string[6]='e'; string[7]='a'; string[8]='l';
    27b6:	81 e6       	ldi	r24, 0x61	; 97
    27b8:	88 87       	std	Y+8, r24	; 0x08
    27ba:	8c e6       	ldi	r24, 0x6C	; 108
    27bc:	89 87       	std	Y+9, r24	; 0x09
            string[9]='t'; string[10]='h';
    27be:	84 e7       	ldi	r24, 0x74	; 116
    27c0:	8a 87       	std	Y+10, r24	; 0x0a
    27c2:	88 e6       	ldi	r24, 0x68	; 104
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
            i = 0;
            for(i=0; i<11; i++){
    27c6:	10 e0       	ldi	r17, 0x00	; 0
    27c8:	0a c0       	rjmp	.+20     	; 0x27de <operationLcd+0xf8e>
              USART_Transmit(string[i]);
    27ca:	e1 e0       	ldi	r30, 0x01	; 1
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	ec 0f       	add	r30, r28
    27d0:	fd 1f       	adc	r31, r29
    27d2:	e1 0f       	add	r30, r17
    27d4:	f1 1d       	adc	r31, r1
    27d6:	80 81       	ld	r24, Z
    27d8:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[0]='G'; string[1]='O'; string[2]='O';
            string[3]='D'; string[4]=' '; string[5]='H';
            string[6]='e'; string[7]='a'; string[8]='l';
            string[9]='t'; string[10]='h';
            i = 0;
            for(i=0; i<11; i++){
    27dc:	1f 5f       	subi	r17, 0xFF	; 255
    27de:	1b 30       	cpi	r17, 0x0B	; 11
    27e0:	a0 f3       	brcs	.-24     	; 0x27ca <operationLcd+0xf7a>
    27e2:	30 c0       	rjmp	.+96     	; 0x2844 <operationLcd+0xff4>
              USART_Transmit(string[i]);
            }
          }else{
            string[0]='E'; string[1]='R'; string[2]='R';
    27e4:	85 e4       	ldi	r24, 0x45	; 69
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	82 e5       	ldi	r24, 0x52	; 82
    27ea:	8a 83       	std	Y+2, r24	; 0x02
    27ec:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='O'; string[4]='R'; string[5]=' ';
    27ee:	9f e4       	ldi	r25, 0x4F	; 79
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	30 e2       	ldi	r19, 0x20	; 32
    27f6:	3e 83       	std	Y+6, r19	; 0x06
            string[6]='M'; string[7]='o'; string[8]='d';
    27f8:	8d e4       	ldi	r24, 0x4D	; 77
    27fa:	8f 83       	std	Y+7, r24	; 0x07
    27fc:	8f e6       	ldi	r24, 0x6F	; 111
    27fe:	88 87       	std	Y+8, r24	; 0x08
    2800:	84 e6       	ldi	r24, 0x64	; 100
    2802:	89 87       	std	Y+9, r24	; 0x09
            string[9]='u'; string[10]='l'; string[11]='e';
    2804:	95 e7       	ldi	r25, 0x75	; 117
    2806:	9a 87       	std	Y+10, r25	; 0x0a
    2808:	2c e6       	ldi	r18, 0x6C	; 108
    280a:	2b 87       	std	Y+11, r18	; 0x0b
    280c:	85 e6       	ldi	r24, 0x65	; 101
    280e:	8c 87       	std	Y+12, r24	; 0x0c
            string[12]=' '; string[13]='f'; string[14]='a';
    2810:	3d 87       	std	Y+13, r19	; 0x0d
    2812:	36 e6       	ldi	r19, 0x66	; 102
    2814:	3e 87       	std	Y+14, r19	; 0x0e
    2816:	31 e6       	ldi	r19, 0x61	; 97
    2818:	3f 87       	std	Y+15, r19	; 0x0f
            string[15]='i'; string[16]='l'; string[17]='u';
    281a:	39 e6       	ldi	r19, 0x69	; 105
    281c:	38 8b       	std	Y+16, r19	; 0x10
    281e:	29 8b       	std	Y+17, r18	; 0x11
    2820:	9a 8b       	std	Y+18, r25	; 0x12
            string[18]='r'; string[19]='e';
    2822:	92 e7       	ldi	r25, 0x72	; 114
    2824:	9b 8b       	std	Y+19, r25	; 0x13
    2826:	8c 8b       	std	Y+20, r24	; 0x14
            i = 0;
            for(i=0; i<20; i++){
    2828:	10 e0       	ldi	r17, 0x00	; 0
    282a:	0a c0       	rjmp	.+20     	; 0x2840 <operationLcd+0xff0>
              USART_Transmit(string[i]);
    282c:	e1 e0       	ldi	r30, 0x01	; 1
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	ec 0f       	add	r30, r28
    2832:	fd 1f       	adc	r31, r29
    2834:	e1 0f       	add	r30, r17
    2836:	f1 1d       	adc	r31, r1
    2838:	80 81       	ld	r24, Z
    283a:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='u'; string[10]='l'; string[11]='e';
            string[12]=' '; string[13]='f'; string[14]='a';
            string[15]='i'; string[16]='l'; string[17]='u';
            string[18]='r'; string[19]='e';
            i = 0;
            for(i=0; i<20; i++){
    283e:	1f 5f       	subi	r17, 0xFF	; 255
    2840:	14 31       	cpi	r17, 0x14	; 20
    2842:	a0 f3       	brcs	.-24     	; 0x282c <operationLcd+0xfdc>
              USART_Transmit(string[i]);
            }
          }
          USART_Transmit('\n');
    2844:	8a e0       	ldi	r24, 0x0A	; 10
    2846:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[0]='2'; string[1]='.'; string[2]='S';
    284a:	82 e3       	ldi	r24, 0x32	; 50
    284c:	89 83       	std	Y+1, r24	; 0x01
    284e:	8e e2       	ldi	r24, 0x2E	; 46
    2850:	8a 83       	std	Y+2, r24	; 0x02
    2852:	83 e5       	ldi	r24, 0x53	; 83
    2854:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='y'; string[4]='s'; string[5]='t';
    2856:	39 e7       	ldi	r19, 0x79	; 121
    2858:	3c 83       	std	Y+4, r19	; 0x04
    285a:	83 e7       	ldi	r24, 0x73	; 115
    285c:	8d 83       	std	Y+5, r24	; 0x05
    285e:	94 e7       	ldi	r25, 0x74	; 116
    2860:	9e 83       	std	Y+6, r25	; 0x06
          string[6]='e'; string[7]='m'; string[8]=' ';
    2862:	45 e6       	ldi	r20, 0x65	; 101
    2864:	4f 83       	std	Y+7, r20	; 0x07
    2866:	2d e6       	ldi	r18, 0x6D	; 109
    2868:	28 87       	std	Y+8, r18	; 0x08
    286a:	20 e2       	ldi	r18, 0x20	; 32
    286c:	29 87       	std	Y+9, r18	; 0x09
          string[9]='k'; string[10]='e'; string[11]='y';
    286e:	5b e6       	ldi	r21, 0x6B	; 107
    2870:	5a 87       	std	Y+10, r21	; 0x0a
    2872:	4b 87       	std	Y+11, r20	; 0x0b
    2874:	3c 87       	std	Y+12, r19	; 0x0c
          string[12]='p'; string[13]='a'; string[14]='d';
    2876:	30 e7       	ldi	r19, 0x70	; 112
    2878:	3d 87       	std	Y+13, r19	; 0x0d
    287a:	31 e6       	ldi	r19, 0x61	; 97
    287c:	3e 87       	std	Y+14, r19	; 0x0e
    287e:	34 e6       	ldi	r19, 0x64	; 100
    2880:	3f 87       	std	Y+15, r19	; 0x0f
          string[15]=' '; string[16]='o'; string[17]='u';
    2882:	28 8b       	std	Y+16, r18	; 0x10
    2884:	2f e6       	ldi	r18, 0x6F	; 111
    2886:	29 8b       	std	Y+17, r18	; 0x11
    2888:	25 e7       	ldi	r18, 0x75	; 117
    288a:	2a 8b       	std	Y+18, r18	; 0x12
          string[18]='t'; string[19]='s';
    288c:	9b 8b       	std	Y+19, r25	; 0x13
    288e:	8c 8b       	std	Y+20, r24	; 0x14
          i = 0;
          for(i=0; i<20; i++){
    2890:	10 e0       	ldi	r17, 0x00	; 0
    2892:	0a c0       	rjmp	.+20     	; 0x28a8 <operationLcd+0x1058>
              USART_Transmit(string[i]);
    2894:	e1 e0       	ldi	r30, 0x01	; 1
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	ec 0f       	add	r30, r28
    289a:	fd 1f       	adc	r31, r29
    289c:	e1 0f       	add	r30, r17
    289e:	f1 1d       	adc	r31, r1
    28a0:	80 81       	ld	r24, Z
    28a2:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[9]='k'; string[10]='e'; string[11]='y';
          string[12]='p'; string[13]='a'; string[14]='d';
          string[15]=' '; string[16]='o'; string[17]='u';
          string[18]='t'; string[19]='s';
          i = 0;
          for(i=0; i<20; i++){
    28a6:	1f 5f       	subi	r17, 0xFF	; 255
    28a8:	14 31       	cpi	r17, 0x14	; 20
    28aa:	a0 f3       	brcs	.-24     	; 0x2894 <operationLcd+0x1044>
              USART_Transmit(string[i]);
          }
          USART_Transmit('i');
    28ac:	89 e6       	ldi	r24, 0x69	; 105
    28ae:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          USART_Transmit('d');
    28b2:	84 e6       	ldi	r24, 0x64	; 100
    28b4:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          USART_Transmit('e');
    28b8:	85 e6       	ldi	r24, 0x65	; 101
    28ba:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          USART_Transmit(':');
    28be:	8a e3       	ldi	r24, 0x3A	; 58
    28c0:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          if(g_errorCode[1] == 0){
    28c4:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <g_errorCode+0x1>
    28c8:	81 11       	cpse	r24, r1
    28ca:	22 c0       	rjmp	.+68     	; 0x2910 <operationLcd+0x10c0>
            string[0]='G'; string[1]='O'; string[2]='O';
    28cc:	87 e4       	ldi	r24, 0x47	; 71
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	8f e4       	ldi	r24, 0x4F	; 79
    28d2:	8a 83       	std	Y+2, r24	; 0x02
    28d4:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='D'; string[4]=' '; string[5]='H';
    28d6:	84 e4       	ldi	r24, 0x44	; 68
    28d8:	8c 83       	std	Y+4, r24	; 0x04
    28da:	80 e2       	ldi	r24, 0x20	; 32
    28dc:	8d 83       	std	Y+5, r24	; 0x05
    28de:	88 e4       	ldi	r24, 0x48	; 72
    28e0:	8e 83       	std	Y+6, r24	; 0x06
            string[6]='e'; string[7]='a'; string[8]='l';
    28e2:	81 e6       	ldi	r24, 0x61	; 97
    28e4:	88 87       	std	Y+8, r24	; 0x08
    28e6:	8c e6       	ldi	r24, 0x6C	; 108
    28e8:	89 87       	std	Y+9, r24	; 0x09
            string[9]='t'; string[10]='h';
    28ea:	84 e7       	ldi	r24, 0x74	; 116
    28ec:	8a 87       	std	Y+10, r24	; 0x0a
    28ee:	88 e6       	ldi	r24, 0x68	; 104
    28f0:	8b 87       	std	Y+11, r24	; 0x0b
            i = 0;
            for(i=0; i<11; i++){
    28f2:	10 e0       	ldi	r17, 0x00	; 0
    28f4:	0a c0       	rjmp	.+20     	; 0x290a <operationLcd+0x10ba>
              USART_Transmit(string[i]);
    28f6:	e1 e0       	ldi	r30, 0x01	; 1
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	ec 0f       	add	r30, r28
    28fc:	fd 1f       	adc	r31, r29
    28fe:	e1 0f       	add	r30, r17
    2900:	f1 1d       	adc	r31, r1
    2902:	80 81       	ld	r24, Z
    2904:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[0]='G'; string[1]='O'; string[2]='O';
            string[3]='D'; string[4]=' '; string[5]='H';
            string[6]='e'; string[7]='a'; string[8]='l';
            string[9]='t'; string[10]='h';
            i = 0;
            for(i=0; i<11; i++){
    2908:	1f 5f       	subi	r17, 0xFF	; 255
    290a:	1b 30       	cpi	r17, 0x0B	; 11
    290c:	a0 f3       	brcs	.-24     	; 0x28f6 <operationLcd+0x10a6>
    290e:	2f c0       	rjmp	.+94     	; 0x296e <operationLcd+0x111e>
              USART_Transmit(string[i]);
            }
          }else{
            string[0]='E'; string[1]='R'; string[2]='R';
    2910:	85 e4       	ldi	r24, 0x45	; 69
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	82 e5       	ldi	r24, 0x52	; 82
    2916:	8a 83       	std	Y+2, r24	; 0x02
    2918:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='O'; string[4]='R'; string[5]=' ';
    291a:	9f e4       	ldi	r25, 0x4F	; 79
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	20 e2       	ldi	r18, 0x20	; 32
    2922:	2e 83       	std	Y+6, r18	; 0x06
            string[6]='M'; string[7]='o'; string[8]='d';
    2924:	8d e4       	ldi	r24, 0x4D	; 77
    2926:	8f 83       	std	Y+7, r24	; 0x07
    2928:	8f e6       	ldi	r24, 0x6F	; 111
    292a:	88 87       	std	Y+8, r24	; 0x08
    292c:	84 e6       	ldi	r24, 0x64	; 100
    292e:	89 87       	std	Y+9, r24	; 0x09
            string[9]='u'; string[10]='l'; string[11]='e';
    2930:	85 e7       	ldi	r24, 0x75	; 117
    2932:	8a 87       	std	Y+10, r24	; 0x0a
    2934:	9c e6       	ldi	r25, 0x6C	; 108
    2936:	9b 87       	std	Y+11, r25	; 0x0b
    2938:	85 e6       	ldi	r24, 0x65	; 101
    293a:	8c 87       	std	Y+12, r24	; 0x0c
            string[12]=' '; string[13]='f'; string[14]='a';
    293c:	2d 87       	std	Y+13, r18	; 0x0d
    293e:	26 e6       	ldi	r18, 0x66	; 102
    2940:	2e 87       	std	Y+14, r18	; 0x0e
    2942:	21 e6       	ldi	r18, 0x61	; 97
    2944:	2f 87       	std	Y+15, r18	; 0x0f
            string[15]='i'; string[16]='l'; string[17]='u';
    2946:	29 e6       	ldi	r18, 0x69	; 105
    2948:	28 8b       	std	Y+16, r18	; 0x10
    294a:	99 8b       	std	Y+17, r25	; 0x11
            string[18]='r'; string[19]='e';
    294c:	92 e7       	ldi	r25, 0x72	; 114
    294e:	9b 8b       	std	Y+19, r25	; 0x13
    2950:	8c 8b       	std	Y+20, r24	; 0x14
            i = 0;
            for(i=0; i<20; i++){
    2952:	10 e0       	ldi	r17, 0x00	; 0
    2954:	0a c0       	rjmp	.+20     	; 0x296a <operationLcd+0x111a>
              USART_Transmit(string[i]);
    2956:	e1 e0       	ldi	r30, 0x01	; 1
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	ec 0f       	add	r30, r28
    295c:	fd 1f       	adc	r31, r29
    295e:	e1 0f       	add	r30, r17
    2960:	f1 1d       	adc	r31, r1
    2962:	80 81       	ld	r24, Z
    2964:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='u'; string[10]='l'; string[11]='e';
            string[12]=' '; string[13]='f'; string[14]='a';
            string[15]='i'; string[16]='l'; string[17]='u';
            string[18]='r'; string[19]='e';
            i = 0;
            for(i=0; i<20; i++){
    2968:	1f 5f       	subi	r17, 0xFF	; 255
    296a:	14 31       	cpi	r17, 0x14	; 20
    296c:	a0 f3       	brcs	.-24     	; 0x2956 <operationLcd+0x1106>
              USART_Transmit(string[i]);
            }
          }
          USART_Transmit('\n');
    296e:	8a e0       	ldi	r24, 0x0A	; 10
    2970:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[0]='3'; string[1]='.'; string[2]='S';
    2974:	83 e3       	ldi	r24, 0x33	; 51
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	8e e2       	ldi	r24, 0x2E	; 46
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	23 e5       	ldi	r18, 0x53	; 83
    297e:	2b 83       	std	Y+3, r18	; 0x03
          string[3]='y'; string[4]='s'; string[5]='t';
    2980:	89 e7       	ldi	r24, 0x79	; 121
    2982:	8c 83       	std	Y+4, r24	; 0x04
    2984:	83 e7       	ldi	r24, 0x73	; 115
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	94 e7       	ldi	r25, 0x74	; 116
    298a:	9e 83       	std	Y+6, r25	; 0x06
          string[6]='e'; string[7]='m'; string[8]=' ';
    298c:	85 e6       	ldi	r24, 0x65	; 101
    298e:	8f 83       	std	Y+7, r24	; 0x07
    2990:	8d e6       	ldi	r24, 0x6D	; 109
    2992:	88 87       	std	Y+8, r24	; 0x08
    2994:	80 e2       	ldi	r24, 0x20	; 32
    2996:	89 87       	std	Y+9, r24	; 0x09
          string[9]='S'; string[10]='w'; string[11]='i';
    2998:	2a 87       	std	Y+10, r18	; 0x0a
    299a:	27 e7       	ldi	r18, 0x77	; 119
    299c:	2b 87       	std	Y+11, r18	; 0x0b
    299e:	29 e6       	ldi	r18, 0x69	; 105
    29a0:	2c 87       	std	Y+12, r18	; 0x0c
          string[12]='t'; string[13]='c'; string[14]='h';
    29a2:	9d 87       	std	Y+13, r25	; 0x0d
    29a4:	93 e6       	ldi	r25, 0x63	; 99
    29a6:	9e 87       	std	Y+14, r25	; 0x0e
    29a8:	98 e6       	ldi	r25, 0x68	; 104
    29aa:	9f 87       	std	Y+15, r25	; 0x0f
          string[15]=':'; string[16]=' ';
    29ac:	9a e3       	ldi	r25, 0x3A	; 58
    29ae:	98 8b       	std	Y+16, r25	; 0x10
    29b0:	89 8b       	std	Y+17, r24	; 0x11
          i = 0;
          for(i=0; i<17; i++){
    29b2:	10 e0       	ldi	r17, 0x00	; 0
    29b4:	0a c0       	rjmp	.+20     	; 0x29ca <operationLcd+0x117a>
              USART_Transmit(string[i]);
    29b6:	e1 e0       	ldi	r30, 0x01	; 1
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	ec 0f       	add	r30, r28
    29bc:	fd 1f       	adc	r31, r29
    29be:	e1 0f       	add	r30, r17
    29c0:	f1 1d       	adc	r31, r1
    29c2:	80 81       	ld	r24, Z
    29c4:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[6]='e'; string[7]='m'; string[8]=' ';
          string[9]='S'; string[10]='w'; string[11]='i';
          string[12]='t'; string[13]='c'; string[14]='h';
          string[15]=':'; string[16]=' ';
          i = 0;
          for(i=0; i<17; i++){
    29c8:	1f 5f       	subi	r17, 0xFF	; 255
    29ca:	11 31       	cpi	r17, 0x11	; 17
    29cc:	a0 f3       	brcs	.-24     	; 0x29b6 <operationLcd+0x1166>
              USART_Transmit(string[i]);
          }
          if(g_errorCode[2] == 0){
    29ce:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <g_errorCode+0x2>
    29d2:	81 11       	cpse	r24, r1
    29d4:	22 c0       	rjmp	.+68     	; 0x2a1a <operationLcd+0x11ca>
            string[0]='G'; string[1]='O'; string[2]='O';
    29d6:	87 e4       	ldi	r24, 0x47	; 71
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	8f e4       	ldi	r24, 0x4F	; 79
    29dc:	8a 83       	std	Y+2, r24	; 0x02
    29de:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='D'; string[4]=' '; string[5]='H';
    29e0:	84 e4       	ldi	r24, 0x44	; 68
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	80 e2       	ldi	r24, 0x20	; 32
    29e6:	8d 83       	std	Y+5, r24	; 0x05
    29e8:	88 e4       	ldi	r24, 0x48	; 72
    29ea:	8e 83       	std	Y+6, r24	; 0x06
            string[6]='e'; string[7]='a'; string[8]='l';
    29ec:	81 e6       	ldi	r24, 0x61	; 97
    29ee:	88 87       	std	Y+8, r24	; 0x08
    29f0:	8c e6       	ldi	r24, 0x6C	; 108
    29f2:	89 87       	std	Y+9, r24	; 0x09
            string[9]='t'; string[10]='h';
    29f4:	84 e7       	ldi	r24, 0x74	; 116
    29f6:	8a 87       	std	Y+10, r24	; 0x0a
    29f8:	88 e6       	ldi	r24, 0x68	; 104
    29fa:	8b 87       	std	Y+11, r24	; 0x0b
            i = 0;
            for(i=0; i<11; i++){
    29fc:	10 e0       	ldi	r17, 0x00	; 0
    29fe:	0a c0       	rjmp	.+20     	; 0x2a14 <operationLcd+0x11c4>
              USART_Transmit(string[i]);
    2a00:	e1 e0       	ldi	r30, 0x01	; 1
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	ec 0f       	add	r30, r28
    2a06:	fd 1f       	adc	r31, r29
    2a08:	e1 0f       	add	r30, r17
    2a0a:	f1 1d       	adc	r31, r1
    2a0c:	80 81       	ld	r24, Z
    2a0e:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[0]='G'; string[1]='O'; string[2]='O';
            string[3]='D'; string[4]=' '; string[5]='H';
            string[6]='e'; string[7]='a'; string[8]='l';
            string[9]='t'; string[10]='h';
            i = 0;
            for(i=0; i<11; i++){
    2a12:	1f 5f       	subi	r17, 0xFF	; 255
    2a14:	1b 30       	cpi	r17, 0x0B	; 11
    2a16:	a0 f3       	brcs	.-24     	; 0x2a00 <operationLcd+0x11b0>
    2a18:	30 c0       	rjmp	.+96     	; 0x2a7a <operationLcd+0x122a>
              USART_Transmit(string[i]);
            }
          }else{
            string[0]='E'; string[1]='R'; string[2]='R';
    2a1a:	85 e4       	ldi	r24, 0x45	; 69
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	82 e5       	ldi	r24, 0x52	; 82
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='O'; string[4]='R'; string[5]=' ';
    2a24:	9f e4       	ldi	r25, 0x4F	; 79
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8d 83       	std	Y+5, r24	; 0x05
    2a2a:	30 e2       	ldi	r19, 0x20	; 32
    2a2c:	3e 83       	std	Y+6, r19	; 0x06
            string[6]='M'; string[7]='o'; string[8]='d';
    2a2e:	8d e4       	ldi	r24, 0x4D	; 77
    2a30:	8f 83       	std	Y+7, r24	; 0x07
    2a32:	8f e6       	ldi	r24, 0x6F	; 111
    2a34:	88 87       	std	Y+8, r24	; 0x08
    2a36:	84 e6       	ldi	r24, 0x64	; 100
    2a38:	89 87       	std	Y+9, r24	; 0x09
            string[9]='u'; string[10]='l'; string[11]='e';
    2a3a:	95 e7       	ldi	r25, 0x75	; 117
    2a3c:	9a 87       	std	Y+10, r25	; 0x0a
    2a3e:	2c e6       	ldi	r18, 0x6C	; 108
    2a40:	2b 87       	std	Y+11, r18	; 0x0b
    2a42:	85 e6       	ldi	r24, 0x65	; 101
    2a44:	8c 87       	std	Y+12, r24	; 0x0c
            string[12]=' '; string[13]='f'; string[14]='a';
    2a46:	3d 87       	std	Y+13, r19	; 0x0d
    2a48:	36 e6       	ldi	r19, 0x66	; 102
    2a4a:	3e 87       	std	Y+14, r19	; 0x0e
    2a4c:	31 e6       	ldi	r19, 0x61	; 97
    2a4e:	3f 87       	std	Y+15, r19	; 0x0f
            string[15]='i'; string[16]='l'; string[17]='u';
    2a50:	39 e6       	ldi	r19, 0x69	; 105
    2a52:	38 8b       	std	Y+16, r19	; 0x10
    2a54:	29 8b       	std	Y+17, r18	; 0x11
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
            string[18]='r'; string[19]='e';
    2a58:	92 e7       	ldi	r25, 0x72	; 114
    2a5a:	9b 8b       	std	Y+19, r25	; 0x13
    2a5c:	8c 8b       	std	Y+20, r24	; 0x14
            i = 0;
            for(i=0; i<20; i++){
    2a5e:	10 e0       	ldi	r17, 0x00	; 0
    2a60:	0a c0       	rjmp	.+20     	; 0x2a76 <operationLcd+0x1226>
              USART_Transmit(string[i]);
    2a62:	e1 e0       	ldi	r30, 0x01	; 1
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	ec 0f       	add	r30, r28
    2a68:	fd 1f       	adc	r31, r29
    2a6a:	e1 0f       	add	r30, r17
    2a6c:	f1 1d       	adc	r31, r1
    2a6e:	80 81       	ld	r24, Z
    2a70:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='u'; string[10]='l'; string[11]='e';
            string[12]=' '; string[13]='f'; string[14]='a';
            string[15]='i'; string[16]='l'; string[17]='u';
            string[18]='r'; string[19]='e';
            i = 0;
            for(i=0; i<20; i++){
    2a74:	1f 5f       	subi	r17, 0xFF	; 255
    2a76:	14 31       	cpi	r17, 0x14	; 20
    2a78:	a0 f3       	brcs	.-24     	; 0x2a62 <operationLcd+0x1212>
              USART_Transmit(string[i]);
            }
          }
          USART_Transmit('\n');
    2a7a:	8a e0       	ldi	r24, 0x0A	; 10
    2a7c:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[0]='4'; string[1]='.'; string[2]='S';
    2a80:	84 e3       	ldi	r24, 0x34	; 52
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	8e e2       	ldi	r24, 0x2E	; 46
    2a86:	8a 83       	std	Y+2, r24	; 0x02
    2a88:	83 e5       	ldi	r24, 0x53	; 83
    2a8a:	8b 83       	std	Y+3, r24	; 0x03
          string[3]='y'; string[4]='s'; string[5]='t';
    2a8c:	89 e7       	ldi	r24, 0x79	; 121
    2a8e:	8c 83       	std	Y+4, r24	; 0x04
    2a90:	93 e7       	ldi	r25, 0x73	; 115
    2a92:	9d 83       	std	Y+5, r25	; 0x05
    2a94:	24 e7       	ldi	r18, 0x74	; 116
    2a96:	2e 83       	std	Y+6, r18	; 0x06
          string[6]='e'; string[7]='m'; string[8]=' ';
    2a98:	25 e6       	ldi	r18, 0x65	; 101
    2a9a:	2f 83       	std	Y+7, r18	; 0x07
    2a9c:	2d e6       	ldi	r18, 0x6D	; 109
    2a9e:	28 87       	std	Y+8, r18	; 0x08
    2aa0:	20 e2       	ldi	r18, 0x20	; 32
    2aa2:	29 87       	std	Y+9, r18	; 0x09
          string[9]='L'; string[10]='c'; string[11]='d';
    2aa4:	3c e4       	ldi	r19, 0x4C	; 76
    2aa6:	3a 87       	std	Y+10, r19	; 0x0a
    2aa8:	33 e6       	ldi	r19, 0x63	; 99
    2aaa:	3b 87       	std	Y+11, r19	; 0x0b
    2aac:	34 e6       	ldi	r19, 0x64	; 100
    2aae:	3c 87       	std	Y+12, r19	; 0x0c
          string[12]=' '; string[13]='D'; string[14]='i';
    2ab0:	2d 87       	std	Y+13, r18	; 0x0d
    2ab2:	24 e4       	ldi	r18, 0x44	; 68
    2ab4:	2e 87       	std	Y+14, r18	; 0x0e
    2ab6:	29 e6       	ldi	r18, 0x69	; 105
    2ab8:	2f 87       	std	Y+15, r18	; 0x0f
          string[15]='s'; string[16]='p'; string[17]='l';
    2aba:	98 8b       	std	Y+16, r25	; 0x10
    2abc:	90 e7       	ldi	r25, 0x70	; 112
    2abe:	99 8b       	std	Y+17, r25	; 0x11
    2ac0:	9c e6       	ldi	r25, 0x6C	; 108
    2ac2:	9a 8b       	std	Y+18, r25	; 0x12
          string[18]='a'; string[19]='y';
    2ac4:	91 e6       	ldi	r25, 0x61	; 97
    2ac6:	9b 8b       	std	Y+19, r25	; 0x13
    2ac8:	8c 8b       	std	Y+20, r24	; 0x14
          for(i=0; i<20; i++){
    2aca:	10 e0       	ldi	r17, 0x00	; 0
    2acc:	0a c0       	rjmp	.+20     	; 0x2ae2 <operationLcd+0x1292>
              USART_Transmit(string[i]);
    2ace:	e1 e0       	ldi	r30, 0x01	; 1
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	ec 0f       	add	r30, r28
    2ad4:	fd 1f       	adc	r31, r29
    2ad6:	e1 0f       	add	r30, r17
    2ad8:	f1 1d       	adc	r31, r1
    2ada:	80 81       	ld	r24, Z
    2adc:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          string[6]='e'; string[7]='m'; string[8]=' ';
          string[9]='L'; string[10]='c'; string[11]='d';
          string[12]=' '; string[13]='D'; string[14]='i';
          string[15]='s'; string[16]='p'; string[17]='l';
          string[18]='a'; string[19]='y';
          for(i=0; i<20; i++){
    2ae0:	1f 5f       	subi	r17, 0xFF	; 255
    2ae2:	14 31       	cpi	r17, 0x14	; 20
    2ae4:	a0 f3       	brcs	.-24     	; 0x2ace <operationLcd+0x127e>
              USART_Transmit(string[i]);
          }
          if(g_errorCode[3] == 0){
    2ae6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <g_errorCode+0x3>
    2aea:	81 11       	cpse	r24, r1
    2aec:	22 c0       	rjmp	.+68     	; 0x2b32 <operationLcd+0x12e2>
            string[0]='G'; string[1]='O'; string[2]='O';
    2aee:	87 e4       	ldi	r24, 0x47	; 71
    2af0:	89 83       	std	Y+1, r24	; 0x01
    2af2:	8f e4       	ldi	r24, 0x4F	; 79
    2af4:	8a 83       	std	Y+2, r24	; 0x02
    2af6:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='D'; string[4]=' '; string[5]='H';
    2af8:	84 e4       	ldi	r24, 0x44	; 68
    2afa:	8c 83       	std	Y+4, r24	; 0x04
    2afc:	80 e2       	ldi	r24, 0x20	; 32
    2afe:	8d 83       	std	Y+5, r24	; 0x05
    2b00:	88 e4       	ldi	r24, 0x48	; 72
    2b02:	8e 83       	std	Y+6, r24	; 0x06
            string[6]='e'; string[7]='a'; string[8]='l';
    2b04:	81 e6       	ldi	r24, 0x61	; 97
    2b06:	88 87       	std	Y+8, r24	; 0x08
    2b08:	8c e6       	ldi	r24, 0x6C	; 108
    2b0a:	89 87       	std	Y+9, r24	; 0x09
            string[9]='t'; string[10]='h';
    2b0c:	84 e7       	ldi	r24, 0x74	; 116
    2b0e:	8a 87       	std	Y+10, r24	; 0x0a
    2b10:	88 e6       	ldi	r24, 0x68	; 104
    2b12:	8b 87       	std	Y+11, r24	; 0x0b
            i = 0;
            for(i=0; i<11; i++){
    2b14:	10 e0       	ldi	r17, 0x00	; 0
    2b16:	0a c0       	rjmp	.+20     	; 0x2b2c <operationLcd+0x12dc>
              USART_Transmit(string[i]);
    2b18:	e1 e0       	ldi	r30, 0x01	; 1
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	ec 0f       	add	r30, r28
    2b1e:	fd 1f       	adc	r31, r29
    2b20:	e1 0f       	add	r30, r17
    2b22:	f1 1d       	adc	r31, r1
    2b24:	80 81       	ld	r24, Z
    2b26:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[0]='G'; string[1]='O'; string[2]='O';
            string[3]='D'; string[4]=' '; string[5]='H';
            string[6]='e'; string[7]='a'; string[8]='l';
            string[9]='t'; string[10]='h';
            i = 0;
            for(i=0; i<11; i++){
    2b2a:	1f 5f       	subi	r17, 0xFF	; 255
    2b2c:	1b 30       	cpi	r17, 0x0B	; 11
    2b2e:	a0 f3       	brcs	.-24     	; 0x2b18 <operationLcd+0x12c8>
    2b30:	2f c0       	rjmp	.+94     	; 0x2b90 <operationLcd+0x1340>
              USART_Transmit(string[i]);
            }
          }else{
            string[0]='E'; string[1]='R'; string[2]='R';
    2b32:	85 e4       	ldi	r24, 0x45	; 69
    2b34:	89 83       	std	Y+1, r24	; 0x01
    2b36:	82 e5       	ldi	r24, 0x52	; 82
    2b38:	8a 83       	std	Y+2, r24	; 0x02
    2b3a:	8b 83       	std	Y+3, r24	; 0x03
            string[3]='O'; string[4]='R'; string[5]=' ';
    2b3c:	9f e4       	ldi	r25, 0x4F	; 79
    2b3e:	9c 83       	std	Y+4, r25	; 0x04
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	80 e2       	ldi	r24, 0x20	; 32
    2b44:	8e 83       	std	Y+6, r24	; 0x06
            string[6]='M'; string[7]='o'; string[8]='d';
    2b46:	8d e4       	ldi	r24, 0x4D	; 77
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	8f e6       	ldi	r24, 0x6F	; 111
    2b4c:	88 87       	std	Y+8, r24	; 0x08
    2b4e:	84 e6       	ldi	r24, 0x64	; 100
    2b50:	89 87       	std	Y+9, r24	; 0x09
            string[9]='u'; string[10]='l'; string[11]='e';
    2b52:	95 e7       	ldi	r25, 0x75	; 117
    2b54:	9a 87       	std	Y+10, r25	; 0x0a
    2b56:	2c e6       	ldi	r18, 0x6C	; 108
    2b58:	2b 87       	std	Y+11, r18	; 0x0b
    2b5a:	85 e6       	ldi	r24, 0x65	; 101
    2b5c:	8c 87       	std	Y+12, r24	; 0x0c
            string[12]=' '; string[13]='f'; string[14]='a';
    2b5e:	36 e6       	ldi	r19, 0x66	; 102
    2b60:	3e 87       	std	Y+14, r19	; 0x0e
    2b62:	31 e6       	ldi	r19, 0x61	; 97
    2b64:	3f 87       	std	Y+15, r19	; 0x0f
            string[15]='i'; string[16]='l'; string[17]='u';
    2b66:	39 e6       	ldi	r19, 0x69	; 105
    2b68:	38 8b       	std	Y+16, r19	; 0x10
    2b6a:	29 8b       	std	Y+17, r18	; 0x11
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
            string[18]='r'; string[19]='e';
    2b6e:	92 e7       	ldi	r25, 0x72	; 114
    2b70:	9b 8b       	std	Y+19, r25	; 0x13
    2b72:	8c 8b       	std	Y+20, r24	; 0x14
            i = 0;
            for(i=0; i<20; i++){
    2b74:	10 e0       	ldi	r17, 0x00	; 0
    2b76:	0a c0       	rjmp	.+20     	; 0x2b8c <operationLcd+0x133c>
              USART_Transmit(string[i]);
    2b78:	e1 e0       	ldi	r30, 0x01	; 1
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	ec 0f       	add	r30, r28
    2b7e:	fd 1f       	adc	r31, r29
    2b80:	e1 0f       	add	r30, r17
    2b82:	f1 1d       	adc	r31, r1
    2b84:	80 81       	ld	r24, Z
    2b86:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
            string[9]='u'; string[10]='l'; string[11]='e';
            string[12]=' '; string[13]='f'; string[14]='a';
            string[15]='i'; string[16]='l'; string[17]='u';
            string[18]='r'; string[19]='e';
            i = 0;
            for(i=0; i<20; i++){
    2b8a:	1f 5f       	subi	r17, 0xFF	; 255
    2b8c:	14 31       	cpi	r17, 0x14	; 20
    2b8e:	a0 f3       	brcs	.-24     	; 0x2b78 <operationLcd+0x1328>
              USART_Transmit(string[i]);
            }
          }
          USART_Transmit('\n');
    2b90:	8a e0       	ldi	r24, 0x0A	; 10
    2b92:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
    2b96:	2f ef       	ldi	r18, 0xFF	; 255
    2b98:	8b e4       	ldi	r24, 0x4B	; 75
    2b9a:	9d e1       	ldi	r25, 0x1D	; 29
    2b9c:	21 50       	subi	r18, 0x01	; 1
    2b9e:	80 40       	sbci	r24, 0x00	; 0
    2ba0:	90 40       	sbci	r25, 0x00	; 0
    2ba2:	e1 f7       	brne	.-8      	; 0x2b9c <operationLcd+0x134c>
    2ba4:	00 c0       	rjmp	.+0      	; 0x2ba6 <operationLcd+0x1356>
    2ba6:	00 00       	nop
          _delay_ms(1200);
          g_uperLineLcd[0]='R'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='p';
    2ba8:	e6 e0       	ldi	r30, 0x06	; 6
    2baa:	f2 e0       	ldi	r31, 0x02	; 2
    2bac:	42 e5       	ldi	r20, 0x52	; 82
    2bae:	40 83       	st	Z, r20
    2bb0:	85 e6       	ldi	r24, 0x65	; 101
    2bb2:	81 83       	std	Z+1, r24	; 0x01
    2bb4:	50 e7       	ldi	r21, 0x70	; 112
    2bb6:	52 83       	std	Z+2, r21	; 0x02
          g_uperLineLcd[3]='o'; g_uperLineLcd[4]='r'; g_uperLineLcd[5]='t';
    2bb8:	6f e6       	ldi	r22, 0x6F	; 111
    2bba:	63 83       	std	Z+3, r22	; 0x03
    2bbc:	32 e7       	ldi	r19, 0x72	; 114
    2bbe:	34 83       	std	Z+4, r19	; 0x04
    2bc0:	24 e7       	ldi	r18, 0x74	; 116
    2bc2:	25 83       	std	Z+5, r18	; 0x05
          g_uperLineLcd[6]=' '; g_uperLineLcd[7]='C'; g_uperLineLcd[8]='o';
    2bc4:	90 e2       	ldi	r25, 0x20	; 32
    2bc6:	96 83       	std	Z+6, r25	; 0x06
    2bc8:	73 e4       	ldi	r23, 0x43	; 67
    2bca:	77 83       	std	Z+7, r23	; 0x07
    2bcc:	60 87       	std	Z+8, r22	; 0x08
          g_uperLineLcd[9]='m'; g_uperLineLcd[10]='p'; g_uperLineLcd[11]='l';
    2bce:	6d e6       	ldi	r22, 0x6D	; 109
    2bd0:	61 87       	std	Z+9, r22	; 0x09
    2bd2:	52 87       	std	Z+10, r21	; 0x0a
    2bd4:	5c e6       	ldi	r21, 0x6C	; 108
    2bd6:	53 87       	std	Z+11, r21	; 0x0b
          g_uperLineLcd[12]='e'; g_uperLineLcd[13]='t'; g_uperLineLcd[14]='e';
    2bd8:	84 87       	std	Z+12, r24	; 0x0c
    2bda:	25 87       	std	Z+13, r18	; 0x0d
    2bdc:	86 87       	std	Z+14, r24	; 0x0e
          g_uperLineLcd[15]='d';
    2bde:	54 e6       	ldi	r21, 0x64	; 100
    2be0:	57 87       	std	Z+15, r21	; 0x0f
          g_lowerLineLcd[0]='R'; g_lowerLineLcd[1]='e'; g_lowerLineLcd[2]='t';
    2be2:	e2 ef       	ldi	r30, 0xF2	; 242
    2be4:	f1 e0       	ldi	r31, 0x01	; 1
    2be6:	40 83       	st	Z, r20
    2be8:	81 83       	std	Z+1, r24	; 0x01
    2bea:	22 83       	std	Z+2, r18	; 0x02
          g_lowerLineLcd[3]='u'; g_lowerLineLcd[4]='r'; g_lowerLineLcd[5]='n';
    2bec:	25 e7       	ldi	r18, 0x75	; 117
    2bee:	23 83       	std	Z+3, r18	; 0x03
    2bf0:	34 83       	std	Z+4, r19	; 0x04
    2bf2:	2e e6       	ldi	r18, 0x6E	; 110
    2bf4:	25 83       	std	Z+5, r18	; 0x05
          g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='i'; g_lowerLineLcd[8]='n';
    2bf6:	96 83       	std	Z+6, r25	; 0x06
    2bf8:	39 e6       	ldi	r19, 0x69	; 105
    2bfa:	37 83       	std	Z+7, r19	; 0x07
    2bfc:	20 87       	std	Z+8, r18	; 0x08
          g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]='f'; g_lowerLineLcd[11]='e';
    2bfe:	91 87       	std	Z+9, r25	; 0x09
    2c00:	96 e6       	ldi	r25, 0x66	; 102
    2c02:	92 87       	std	Z+10, r25	; 0x0a
    2c04:	83 87       	std	Z+11, r24	; 0x0b
          g_lowerLineLcd[12]='w'; g_lowerLineLcd[13]='S'; g_lowerLineLcd[14]='e';
    2c06:	97 e7       	ldi	r25, 0x77	; 119
    2c08:	94 87       	std	Z+12, r25	; 0x0c
    2c0a:	93 e5       	ldi	r25, 0x53	; 83
    2c0c:	95 87       	std	Z+13, r25	; 0x0d
    2c0e:	86 87       	std	Z+14, r24	; 0x0e
          g_lowerLineLcd[15]='c';
    2c10:	83 e6       	ldi	r24, 0x63	; 99
    2c12:	87 87       	std	Z+15, r24	; 0x0f
          printLcdU();
    2c14:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          printLcdL();
    2c18:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          soundPushButton();
    2c1c:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
    2c20:	2f ef       	ldi	r18, 0xFF	; 255
    2c22:	83 ed       	ldi	r24, 0xD3	; 211
    2c24:	90 e3       	ldi	r25, 0x30	; 48
    2c26:	21 50       	subi	r18, 0x01	; 1
    2c28:	80 40       	sbci	r24, 0x00	; 0
    2c2a:	90 40       	sbci	r25, 0x00	; 0
    2c2c:	e1 f7       	brne	.-8      	; 0x2c26 <operationLcd+0x13d6>
    2c2e:	00 c0       	rjmp	.+0      	; 0x2c30 <operationLcd+0x13e0>
    2c30:	00 00       	nop
          _delay_ms(2000);
          g_stateCodeLcd = 2;
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          key = 0xff;
          initStateLcd2();
    2c38:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    2c3c:	8d c0       	rjmp	.+282    	; 0x2d58 <operationLcd+0x1508>
        }
      }else if(g_stateCodeLcd == 7){
    2c3e:	87 30       	cpi	r24, 0x07	; 7
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <operationLcd+0x13f4>
    2c42:	8a c0       	rjmp	.+276    	; 0x2d58 <operationLcd+0x1508>
        if(key == 0x23){
    2c44:	13 32       	cpi	r17, 0x23	; 35
    2c46:	09 f0       	breq	.+2      	; 0x2c4a <operationLcd+0x13fa>
    2c48:	80 c0       	rjmp	.+256    	; 0x2d4a <operationLcd+0x14fa>
          g_uperLineLcd[0]='R'; g_uperLineLcd[1]='e'; g_uperLineLcd[2]='s';
    2c4a:	e6 e0       	ldi	r30, 0x06	; 6
    2c4c:	f2 e0       	ldi	r31, 0x02	; 2
    2c4e:	82 e5       	ldi	r24, 0x52	; 82
    2c50:	80 83       	st	Z, r24
    2c52:	95 e6       	ldi	r25, 0x65	; 101
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	33 e7       	ldi	r19, 0x73	; 115
    2c58:	32 83       	std	Z+2, r19	; 0x02
          g_uperLineLcd[3]='e'; g_uperLineLcd[4]='t'; g_uperLineLcd[5]='t';
    2c5a:	93 83       	std	Z+3, r25	; 0x03
    2c5c:	24 e7       	ldi	r18, 0x74	; 116
    2c5e:	24 83       	std	Z+4, r18	; 0x04
    2c60:	25 83       	std	Z+5, r18	; 0x05
          g_uperLineLcd[6]='i'; g_uperLineLcd[7]='n'; g_uperLineLcd[8]='g';
    2c62:	49 e6       	ldi	r20, 0x69	; 105
    2c64:	46 83       	std	Z+6, r20	; 0x06
    2c66:	8e e6       	ldi	r24, 0x6E	; 110
    2c68:	87 83       	std	Z+7, r24	; 0x07
    2c6a:	87 e6       	ldi	r24, 0x67	; 103
    2c6c:	80 87       	std	Z+8, r24	; 0x08
          g_uperLineLcd[9]=' '; g_uperLineLcd[10]='S'; g_uperLineLcd[11]='y';
    2c6e:	80 e2       	ldi	r24, 0x20	; 32
    2c70:	81 87       	std	Z+9, r24	; 0x09
    2c72:	53 e5       	ldi	r21, 0x53	; 83
    2c74:	52 87       	std	Z+10, r21	; 0x0a
    2c76:	59 e7       	ldi	r21, 0x79	; 121
    2c78:	53 87       	std	Z+11, r21	; 0x0b
          g_uperLineLcd[12]='s'; g_uperLineLcd[13]='t'; g_uperLineLcd[14]='e';
    2c7a:	34 87       	std	Z+12, r19	; 0x0c
    2c7c:	25 87       	std	Z+13, r18	; 0x0d
    2c7e:	96 87       	std	Z+14, r25	; 0x0e
          g_uperLineLcd[15]='m';
    2c80:	5d e6       	ldi	r21, 0x6D	; 109
    2c82:	57 87       	std	Z+15, r21	; 0x0f
          g_lowerLineLcd[0]='P'; g_lowerLineLcd[1]='l'; g_lowerLineLcd[2]='e';
    2c84:	e2 ef       	ldi	r30, 0xF2	; 242
    2c86:	f1 e0       	ldi	r31, 0x01	; 1
    2c88:	50 e5       	ldi	r21, 0x50	; 80
    2c8a:	50 83       	st	Z, r21
    2c8c:	5c e6       	ldi	r21, 0x6C	; 108
    2c8e:	51 83       	std	Z+1, r21	; 0x01
    2c90:	92 83       	std	Z+2, r25	; 0x02
          g_lowerLineLcd[3]='a'; g_lowerLineLcd[4]='s'; g_lowerLineLcd[5]='e';
    2c92:	51 e6       	ldi	r21, 0x61	; 97
    2c94:	53 83       	std	Z+3, r21	; 0x03
    2c96:	34 83       	std	Z+4, r19	; 0x04
    2c98:	95 83       	std	Z+5, r25	; 0x05
          g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]='W'; g_lowerLineLcd[8]='a';
    2c9a:	86 83       	std	Z+6, r24	; 0x06
    2c9c:	97 e5       	ldi	r25, 0x57	; 87
    2c9e:	97 83       	std	Z+7, r25	; 0x07
    2ca0:	50 87       	std	Z+8, r21	; 0x08
          g_lowerLineLcd[9]='i'; g_lowerLineLcd[10]='t'; g_lowerLineLcd[11]=' ';
    2ca2:	41 87       	std	Z+9, r20	; 0x09
    2ca4:	22 87       	std	Z+10, r18	; 0x0a
    2ca6:	83 87       	std	Z+11, r24	; 0x0b
          g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
    2ca8:	84 87       	std	Z+12, r24	; 0x0c
    2caa:	85 87       	std	Z+13, r24	; 0x0d
    2cac:	86 87       	std	Z+14, r24	; 0x0e
          g_lowerLineLcd[15]=' ';
    2cae:	87 87       	std	Z+15, r24	; 0x0f
          printLcdL();
    2cb0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
          printLcdU();
    2cb4:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
          unsigned char tempCounter = 0;
          USART_TransmitTime();
    2cb8:	0e 94 31 01 	call	0x262	; 0x262 <USART_TransmitTime>
          writeCommandLCD(0xC0 + 11);
    2cbc:	8b ec       	ldi	r24, 0xCB	; 203
    2cbe:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
          writeDataLCD('.');
    2cc2:	8e e2       	ldi	r24, 0x2E	; 46
    2cc4:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    2cc8:	2f ef       	ldi	r18, 0xFF	; 255
    2cca:	82 e5       	ldi	r24, 0x52	; 82
    2ccc:	97 e0       	ldi	r25, 0x07	; 7
    2cce:	21 50       	subi	r18, 0x01	; 1
    2cd0:	80 40       	sbci	r24, 0x00	; 0
    2cd2:	90 40       	sbci	r25, 0x00	; 0
    2cd4:	e1 f7       	brne	.-8      	; 0x2cce <operationLcd+0x147e>
    2cd6:	00 c0       	rjmp	.+0      	; 0x2cd8 <operationLcd+0x1488>
    2cd8:	00 00       	nop
          _delay_ms(300);
          char tempText2[] = "[Causion] System has been reseted.\n";
    2cda:	84 e2       	ldi	r24, 0x24	; 36
    2cdc:	e9 ea       	ldi	r30, 0xA9	; 169
    2cde:	f1 e0       	ldi	r31, 0x01	; 1
    2ce0:	de 01       	movw	r26, r28
    2ce2:	11 96       	adiw	r26, 0x01	; 1
    2ce4:	01 90       	ld	r0, Z+
    2ce6:	0d 92       	st	X+, r0
    2ce8:	8a 95       	dec	r24
    2cea:	e1 f7       	brne	.-8      	; 0x2ce4 <operationLcd+0x1494>
          writeDataLCD('.');
    2cec:	8e e2       	ldi	r24, 0x2E	; 46
    2cee:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
    2cf2:	2f ef       	ldi	r18, 0xFF	; 255
    2cf4:	80 e7       	ldi	r24, 0x70	; 112
    2cf6:	92 e0       	ldi	r25, 0x02	; 2
    2cf8:	21 50       	subi	r18, 0x01	; 1
    2cfa:	80 40       	sbci	r24, 0x00	; 0
    2cfc:	90 40       	sbci	r25, 0x00	; 0
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <operationLcd+0x14a8>
    2d00:	00 c0       	rjmp	.+0      	; 0x2d02 <operationLcd+0x14b2>
    2d02:	00 00       	nop
          _delay_ms(100);
          writeDataLCD('.');
    2d04:	8e e2       	ldi	r24, 0x2E	; 46
    2d06:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
          for(tempCounter = 0; tempCounter < 35; tempCounter ++){
    2d0a:	10 e0       	ldi	r17, 0x00	; 0
    2d0c:	0a c0       	rjmp	.+20     	; 0x2d22 <operationLcd+0x14d2>
            USART_Transmit(tempText2[tempCounter]);
    2d0e:	e1 e0       	ldi	r30, 0x01	; 1
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	ec 0f       	add	r30, r28
    2d14:	fd 1f       	adc	r31, r29
    2d16:	e1 0f       	add	r30, r17
    2d18:	f1 1d       	adc	r31, r1
    2d1a:	80 81       	ld	r24, Z
    2d1c:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
          _delay_ms(300);
          char tempText2[] = "[Causion] System has been reseted.\n";
          writeDataLCD('.');
          _delay_ms(100);
          writeDataLCD('.');
          for(tempCounter = 0; tempCounter < 35; tempCounter ++){
    2d20:	1f 5f       	subi	r17, 0xFF	; 255
    2d22:	13 32       	cpi	r17, 0x23	; 35
    2d24:	a0 f3       	brcs	.-24     	; 0x2d0e <operationLcd+0x14be>
            USART_Transmit(tempText2[tempCounter]);
          }
          writeDataLCD('.');
    2d26:	8e e2       	ldi	r24, 0x2E	; 46
    2d28:	0e 94 e5 03 	call	0x7ca	; 0x7ca <writeDataLCD>
          soundPushButton();
    2d2c:	0e 94 ef 01 	call	0x3de	; 0x3de <soundPushButton>
    2d30:	2f ef       	ldi	r18, 0xFF	; 255
    2d32:	81 ee       	ldi	r24, 0xE1	; 225
    2d34:	94 e0       	ldi	r25, 0x04	; 4
    2d36:	21 50       	subi	r18, 0x01	; 1
    2d38:	80 40       	sbci	r24, 0x00	; 0
    2d3a:	90 40       	sbci	r25, 0x00	; 0
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <operationLcd+0x14e6>
    2d3e:	00 c0       	rjmp	.+0      	; 0x2d40 <operationLcd+0x14f0>
    2d40:	00 00       	nop
          _delay_ms(200);
          MCUSR = MCUSR & 0b11111101; 
    2d42:	84 b7       	in	r24, 0x34	; 52
    2d44:	8d 7f       	andi	r24, 0xFD	; 253
    2d46:	84 bf       	out	0x34, r24	; 52
    2d48:	07 c0       	rjmp	.+14     	; 0x2d58 <operationLcd+0x1508>
        }else if(key == 0x2a){
    2d4a:	1a 32       	cpi	r17, 0x2A	; 42
    2d4c:	29 f4       	brne	.+10     	; 0x2d58 <operationLcd+0x1508>
          g_stateCodeLcd = 2;
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <g_stateCodeLcd>
          initStateLcd2();
    2d54:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
        }
      }
    }
  }
}
    2d58:	a4 96       	adiw	r28, 0x24	; 36
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <testLight>:
    2d6e:	2f ef       	ldi	r18, 0xFF	; 255
    2d70:	81 ee       	ldi	r24, 0xE1	; 225
    2d72:	94 e0       	ldi	r25, 0x04	; 4
    2d74:	21 50       	subi	r18, 0x01	; 1
    2d76:	80 40       	sbci	r24, 0x00	; 0
    2d78:	90 40       	sbci	r25, 0x00	; 0
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <testLight+0x6>
    2d7c:	00 c0       	rjmp	.+0      	; 0x2d7e <testLight+0x10>
    2d7e:	00 00       	nop
  testting = 0;
  return result;
}
void testLight(){
  _delay_ms(200);
  writeCommandLCD(0x0c);
    2d80:	8c e0       	ldi	r24, 0x0C	; 12
    2d82:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  g_remainLcd = 10;
    2d86:	8a e0       	ldi	r24, 0x0A	; 10
    2d88:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <g_remainLcd>
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]='T'; g_uperLineLcd[2]='E';
    2d8c:	e6 e0       	ldi	r30, 0x06	; 6
    2d8e:	f2 e0       	ldi	r31, 0x02	; 2
    2d90:	90 e2       	ldi	r25, 0x20	; 32
    2d92:	90 83       	st	Z, r25
    2d94:	84 e5       	ldi	r24, 0x54	; 84
    2d96:	81 83       	std	Z+1, r24	; 0x01
    2d98:	35 e4       	ldi	r19, 0x45	; 69
    2d9a:	32 83       	std	Z+2, r19	; 0x02
  g_uperLineLcd[3]='S'; g_uperLineLcd[4]='T'; g_uperLineLcd[5]=' ';
    2d9c:	23 e5       	ldi	r18, 0x53	; 83
    2d9e:	23 83       	std	Z+3, r18	; 0x03
    2da0:	84 83       	std	Z+4, r24	; 0x04
    2da2:	95 83       	std	Z+5, r25	; 0x05
  g_uperLineLcd[6]='O'; g_uperLineLcd[7]='P'; g_uperLineLcd[8]='E';
    2da4:	2f e4       	ldi	r18, 0x4F	; 79
    2da6:	26 83       	std	Z+6, r18	; 0x06
    2da8:	40 e5       	ldi	r20, 0x50	; 80
    2daa:	47 83       	std	Z+7, r20	; 0x07
    2dac:	30 87       	std	Z+8, r19	; 0x08
  g_uperLineLcd[9]='R'; g_uperLineLcd[10]='A'; g_uperLineLcd[11]='T';
    2dae:	32 e5       	ldi	r19, 0x52	; 82
    2db0:	31 87       	std	Z+9, r19	; 0x09
    2db2:	31 e4       	ldi	r19, 0x41	; 65
    2db4:	32 87       	std	Z+10, r19	; 0x0a
    2db6:	83 87       	std	Z+11, r24	; 0x0b
  g_uperLineLcd[12]='I'; g_uperLineLcd[13]='O'; g_uperLineLcd[14]='N';
    2db8:	39 e4       	ldi	r19, 0x49	; 73
    2dba:	34 87       	std	Z+12, r19	; 0x0c
    2dbc:	25 87       	std	Z+13, r18	; 0x0d
    2dbe:	3e e4       	ldi	r19, 0x4E	; 78
    2dc0:	36 87       	std	Z+14, r19	; 0x0e
  g_uperLineLcd[15]=' ';
    2dc2:	97 87       	std	Z+15, r25	; 0x0f
  g_lowerLineLcd[0]='O'; g_lowerLineLcd[1]='n'; g_lowerLineLcd[2]='l';
    2dc4:	e2 ef       	ldi	r30, 0xF2	; 242
    2dc6:	f1 e0       	ldi	r31, 0x01	; 1
    2dc8:	20 83       	st	Z, r18
    2dca:	2e e6       	ldi	r18, 0x6E	; 110
    2dcc:	21 83       	std	Z+1, r18	; 0x01
    2dce:	3c e6       	ldi	r19, 0x6C	; 108
    2dd0:	32 83       	std	Z+2, r19	; 0x02
  g_lowerLineLcd[3]='y'; g_lowerLineLcd[4]=' '; g_lowerLineLcd[5]='f';
    2dd2:	39 e7       	ldi	r19, 0x79	; 121
    2dd4:	33 83       	std	Z+3, r19	; 0x03
    2dd6:	94 83       	std	Z+4, r25	; 0x04
    2dd8:	96 e6       	ldi	r25, 0x66	; 102
    2dda:	95 83       	std	Z+5, r25	; 0x05
  g_lowerLineLcd[6]='o'; g_lowerLineLcd[7]='r'; g_lowerLineLcd[8]='T';
    2ddc:	9f e6       	ldi	r25, 0x6F	; 111
    2dde:	96 83       	std	Z+6, r25	; 0x06
    2de0:	92 e7       	ldi	r25, 0x72	; 114
    2de2:	97 83       	std	Z+7, r25	; 0x07
    2de4:	80 87       	std	Z+8, r24	; 0x08
  g_lowerLineLcd[9]='e'; g_lowerLineLcd[10]='s'; g_lowerLineLcd[11]='t';
    2de6:	85 e6       	ldi	r24, 0x65	; 101
    2de8:	81 87       	std	Z+9, r24	; 0x09
    2dea:	83 e7       	ldi	r24, 0x73	; 115
    2dec:	82 87       	std	Z+10, r24	; 0x0a
    2dee:	84 e7       	ldi	r24, 0x74	; 116
    2df0:	83 87       	std	Z+11, r24	; 0x0b
  g_lowerLineLcd[12]='t'; g_lowerLineLcd[13]='i'; g_lowerLineLcd[14]='n';
    2df2:	84 87       	std	Z+12, r24	; 0x0c
    2df4:	89 e6       	ldi	r24, 0x69	; 105
    2df6:	85 87       	std	Z+13, r24	; 0x0d
    2df8:	26 87       	std	Z+14, r18	; 0x0e
  g_lowerLineLcd[15]='g';
    2dfa:	87 e6       	ldi	r24, 0x67	; 103
    2dfc:	87 87       	std	Z+15, r24	; 0x0f
  printLcdU();
    2dfe:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    2e02:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  ledOpen(1);
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledFail(1);
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  ledAllow(1);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  ledDenied(1);
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledLock(1);
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
    2e24:	2f ef       	ldi	r18, 0xFF	; 255
    2e26:	84 e3       	ldi	r24, 0x34	; 52
    2e28:	9c e0       	ldi	r25, 0x0C	; 12
    2e2a:	21 50       	subi	r18, 0x01	; 1
    2e2c:	80 40       	sbci	r24, 0x00	; 0
    2e2e:	90 40       	sbci	r25, 0x00	; 0
    2e30:	e1 f7       	brne	.-8      	; 0x2e2a <testLight+0xbc>
    2e32:	00 c0       	rjmp	.+0      	; 0x2e34 <testLight+0xc6>
    2e34:	00 00       	nop
  _delay_ms(500);
  ledUnlock(1);
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
    2e3c:	2f ef       	ldi	r18, 0xFF	; 255
    2e3e:	84 e3       	ldi	r24, 0x34	; 52
    2e40:	9c e0       	ldi	r25, 0x0C	; 12
    2e42:	21 50       	subi	r18, 0x01	; 1
    2e44:	80 40       	sbci	r24, 0x00	; 0
    2e46:	90 40       	sbci	r25, 0x00	; 0
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <testLight+0xd4>
    2e4a:	00 c0       	rjmp	.+0      	; 0x2e4c <testLight+0xde>
    2e4c:	00 00       	nop
  _delay_ms(500);
  ledUnlock(1);
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
    2e54:	2f ef       	ldi	r18, 0xFF	; 255
    2e56:	89 e6       	ldi	r24, 0x69	; 105
    2e58:	98 e1       	ldi	r25, 0x18	; 24
    2e5a:	21 50       	subi	r18, 0x01	; 1
    2e5c:	80 40       	sbci	r24, 0x00	; 0
    2e5e:	90 40       	sbci	r25, 0x00	; 0
    2e60:	e1 f7       	brne	.-8      	; 0x2e5a <testLight+0xec>
    2e62:	00 c0       	rjmp	.+0      	; 0x2e64 <testLight+0xf6>
    2e64:	00 00       	nop
    2e66:	08 95       	ret

00002e68 <stateTest>:
  _delay_ms(1000);
}
void stateTest(){
  buzzer(1);
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2e6e:	8f e4       	ldi	r24, 0x4F	; 79
    2e70:	93 ec       	ldi	r25, 0xC3	; 195
    2e72:	01 97       	sbiw	r24, 0x01	; 1
    2e74:	f1 f7       	brne	.-4      	; 0x2e72 <stateTest+0xa>
    2e76:	00 c0       	rjmp	.+0      	; 0x2e78 <stateTest+0x10>
    2e78:	00 00       	nop
  _delay_ms(25);
  buzzer(0);
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    2e80:	9f eb       	ldi	r25, 0xBF	; 191
    2e82:	25 e4       	ldi	r18, 0x45	; 69
    2e84:	84 e0       	ldi	r24, 0x04	; 4
    2e86:	91 50       	subi	r25, 0x01	; 1
    2e88:	20 40       	sbci	r18, 0x00	; 0
    2e8a:	80 40       	sbci	r24, 0x00	; 0
    2e8c:	e1 f7       	brne	.-8      	; 0x2e86 <stateTest+0x1e>
    2e8e:	00 c0       	rjmp	.+0      	; 0x2e90 <stateTest+0x28>
    2e90:	00 00       	nop
  _delay_ms(175);
  g_remainLcd = 2;
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <g_remainLcd>
    2e98:	08 95       	ret

00002e9a <initialLcd>:
    }
  }while(runLocal);
}

void initialLcd(){
  g_remainLcd = 20;
    2e9a:	84 e1       	ldi	r24, 0x14	; 20
    2e9c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <g_remainLcd>
  //turnonoLcd
  writeCommandLCD(0x02);
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
    2ea2:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  writeCommandLCD(0x28);
    2ea6:	88 e2       	ldi	r24, 0x28	; 40
    2ea8:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
  writeCommandLCD(0x0c);
    2eac:	8c e0       	ldi	r24, 0x0C	; 12
    2eae:	0e 94 1b 04 	call	0x836	; 0x836 <writeCommandLCD>
    2eb2:	2f ef       	ldi	r18, 0xFF	; 255
    2eb4:	83 ed       	ldi	r24, 0xD3	; 211
    2eb6:	90 e3       	ldi	r25, 0x30	; 48
    2eb8:	21 50       	subi	r18, 0x01	; 1
    2eba:	80 40       	sbci	r24, 0x00	; 0
    2ebc:	90 40       	sbci	r25, 0x00	; 0
    2ebe:	e1 f7       	brne	.-8      	; 0x2eb8 <initialLcd+0x1e>
    2ec0:	00 c0       	rjmp	.+0      	; 0x2ec2 <initialLcd+0x28>
    2ec2:	00 00       	nop
    2ec4:	08 95       	ret

00002ec6 <initialTimer0>:
  // Clock value: 7.813 kHz
  // Mode: Normal top=0xFF
  // OC0A output: Disconnected
  // OC0B output: Disconnected
  // Timer Period: 9.984 ms
  TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
    2ec6:	14 bc       	out	0x24, r1	; 36
  TCCR0B=(0<<WGM02) | (1<<CS02) | (0<<CS01) | (1<<CS00);    //source clock / 1024
    2ec8:	85 e0       	ldi	r24, 0x05	; 5
    2eca:	85 bd       	out	0x25, r24	; 37
  TCNT0=0xB1;       //10ms
    2ecc:	81 eb       	ldi	r24, 0xB1	; 177
    2ece:	86 bd       	out	0x26, r24	; 38
  OCR0A=0x00;
    2ed0:	17 bc       	out	0x27, r1	; 39
  OCR0B=0x00;
    2ed2:	18 bc       	out	0x28, r1	; 40
  // Timer/Counter 0 Interrupt(s) initialization
  TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (1<<TOIE0);  
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
    2eda:	08 95       	ret

00002edc <initialExternalInteruprt>:
  // INT1: On
  // INT1 Mode: Falling Edge
  // Interrupt on any change on pins PCINT0-7: Off
  // Interrupt on any change on pins PCINT8-14: Off
  // Interrupt on any change on pins PCINT16-23: Off
  EICRA |= 0x0a;
    2edc:	e9 e6       	ldi	r30, 0x69	; 105
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	80 81       	ld	r24, Z
    2ee2:	8a 60       	ori	r24, 0x0A	; 10
    2ee4:	80 83       	st	Z, r24
  EIMSK |= 0x03;
    2ee6:	8d b3       	in	r24, 0x1d	; 29
    2ee8:	83 60       	ori	r24, 0x03	; 3
    2eea:	8d bb       	out	0x1d, r24	; 29
  EIFR=(1<<INTF1) | (1<<INTF0);
    2eec:	83 e0       	ldi	r24, 0x03	; 3
    2eee:	8c bb       	out	0x1c, r24	; 28
  PCICR=0;
    2ef0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
    2ef4:	08 95       	ret

00002ef6 <initialPinConfig>:
}
void initialPinConfig(){
  DDRA = 0x1f;
    2ef6:	8f e1       	ldi	r24, 0x1F	; 31
    2ef8:	81 b9       	out	0x01, r24	; 1
  PORTA = 0xE0;
    2efa:	80 ee       	ldi	r24, 0xE0	; 224
    2efc:	82 b9       	out	0x02, r24	; 2
  DDRB = 0x0f;
    2efe:	8f e0       	ldi	r24, 0x0F	; 15
    2f00:	84 b9       	out	0x04, r24	; 4
  PORTB = 0xff; 
    2f02:	8f ef       	ldi	r24, 0xFF	; 255
    2f04:	85 b9       	out	0x05, r24	; 5
  DDRC = 0xff;
    2f06:	87 b9       	out	0x07, r24	; 7
  DDRD = 0xf3;
    2f08:	83 ef       	ldi	r24, 0xF3	; 243
    2f0a:	8a b9       	out	0x0a, r24	; 10
    2f0c:	08 95       	ret

00002f0e <initSPI>:
}
void initSPI(unsigned int boudrate){
  UBRR0H = (unsigned char)((F_CPU/16/boudrate - 1)>>8);
    2f0e:	9c 01       	movw	r18, r24
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	50 e0       	ldi	r21, 0x00	; 0
    2f14:	60 e2       	ldi	r22, 0x20	; 32
    2f16:	71 ea       	ldi	r23, 0xA1	; 161
    2f18:	87 e0       	ldi	r24, 0x07	; 7
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	0e 94 46 19 	call	0x328c	; 0x328c <__divmodsi4>
    2f20:	da 01       	movw	r26, r20
    2f22:	c9 01       	movw	r24, r18
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	a1 09       	sbc	r26, r1
    2f28:	b1 09       	sbc	r27, r1
    2f2a:	89 2f       	mov	r24, r25
    2f2c:	9a 2f       	mov	r25, r26
    2f2e:	ab 2f       	mov	r26, r27
    2f30:	bb 27       	eor	r27, r27
    2f32:	a7 fd       	sbrc	r26, 7
    2f34:	ba 95       	dec	r27
    2f36:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  UBRR0L = (unsigned char)(F_CPU/16/boudrate -1);
    2f3a:	21 50       	subi	r18, 0x01	; 1
    2f3c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  UCSR0B |= (1<<4); //enable RX bit 4
    2f40:	e1 ec       	ldi	r30, 0xC1	; 193
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	80 61       	ori	r24, 0x10	; 16
    2f48:	80 83       	st	Z, r24
  UCSR0B |= (1<<3); //enable TX bit 3
    2f4a:	80 81       	ld	r24, Z
    2f4c:	88 60       	ori	r24, 0x08	; 8
    2f4e:	80 83       	st	Z, r24
  UCSR0A |= (1<<6); //flag empty transmit buffer
    2f50:	e0 ec       	ldi	r30, 0xC0	; 192
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	80 64       	ori	r24, 0x40	; 64
    2f58:	80 83       	st	Z, r24
  UCSR0C = 0b00000110;  //Asynchronous USART //disable parity //1 bit stop //8bit data // polo raide
    2f5a:	86 e0       	ldi	r24, 0x06	; 6
    2f5c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    2f60:	08 95       	ret

00002f62 <initializationSystem>:
}
//end define test hardware


//DEfine function Init SYSTEM
void initializationSystem(){
    2f62:	8f 92       	push	r8
    2f64:	9f 92       	push	r9
    2f66:	af 92       	push	r10
    2f68:	bf 92       	push	r11
    2f6a:	cf 92       	push	r12
    2f6c:	df 92       	push	r13
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
  initialPinConfig();
    2f7a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <initialPinConfig>
  ledOpen(1);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	0e 94 75 04 	call	0x8ea	; 0x8ea <ledOpen>
  ledAllow(1);
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	0e 94 b3 01 	call	0x366	; 0x366 <ledAllow>
  ledDenied(0);
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	0e 94 bf 01 	call	0x37e	; 0x37e <ledDenied>
  ledUnlock(1);
    2f90:	81 e0       	ldi	r24, 0x01	; 1
    2f92:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ledUnlock>
  ledLock(0);
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	0e 94 cb 01 	call	0x396	; 0x396 <ledLock>
  ledFail(0);
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	0e 94 81 04 	call	0x902	; 0x902 <ledFail>
  initialLcd();
    2fa2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <initialLcd>
  g_uperLineLcd[0]=' '; g_uperLineLcd[1]='I'; g_uperLineLcd[2]='n';
    2fa6:	06 e0       	ldi	r16, 0x06	; 6
    2fa8:	12 e0       	ldi	r17, 0x02	; 2
    2faa:	68 94       	set
    2fac:	ff 24       	eor	r15, r15
    2fae:	f5 f8       	bld	r15, 5
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	f0 82       	st	Z, r15
    2fb4:	0f 2e       	mov	r0, r31
    2fb6:	f9 e4       	ldi	r31, 0x49	; 73
    2fb8:	9f 2e       	mov	r9, r31
    2fba:	f0 2d       	mov	r31, r0
    2fbc:	91 82       	std	Z+1, r9	; 0x01
    2fbe:	0f 2e       	mov	r0, r31
    2fc0:	fe e6       	ldi	r31, 0x6E	; 110
    2fc2:	bf 2e       	mov	r11, r31
    2fc4:	f0 2d       	mov	r31, r0
    2fc6:	b2 82       	std	Z+2, r11	; 0x02
  g_uperLineLcd[3]='i'; g_uperLineLcd[4]='t'; g_uperLineLcd[5]='i';
    2fc8:	0f 2e       	mov	r0, r31
    2fca:	f9 e6       	ldi	r31, 0x69	; 105
    2fcc:	df 2e       	mov	r13, r31
    2fce:	f0 2d       	mov	r31, r0
    2fd0:	d3 82       	std	Z+3, r13	; 0x03
    2fd2:	0f 2e       	mov	r0, r31
    2fd4:	f4 e7       	ldi	r31, 0x74	; 116
    2fd6:	cf 2e       	mov	r12, r31
    2fd8:	f0 2d       	mov	r31, r0
    2fda:	c4 82       	std	Z+4, r12	; 0x04
    2fdc:	d5 82       	std	Z+5, r13	; 0x05
  g_uperLineLcd[6]='a'; g_uperLineLcd[7]='l'; g_uperLineLcd[8]='i';
    2fde:	0f 2e       	mov	r0, r31
    2fe0:	f1 e6       	ldi	r31, 0x61	; 97
    2fe2:	af 2e       	mov	r10, r31
    2fe4:	f0 2d       	mov	r31, r0
    2fe6:	a6 82       	std	Z+6, r10	; 0x06
    2fe8:	0f 2e       	mov	r0, r31
    2fea:	fc e6       	ldi	r31, 0x6C	; 108
    2fec:	8f 2e       	mov	r8, r31
    2fee:	f0 2d       	mov	r31, r0
    2ff0:	87 82       	std	Z+7, r8	; 0x07
    2ff2:	d0 86       	std	Z+8, r13	; 0x08
  g_uperLineLcd[9]='z'; g_uperLineLcd[10]='a'; g_uperLineLcd[11]='t';
    2ff4:	8a e7       	ldi	r24, 0x7A	; 122
    2ff6:	81 87       	std	Z+9, r24	; 0x09
    2ff8:	a2 86       	std	Z+10, r10	; 0x0a
    2ffa:	c3 86       	std	Z+11, r12	; 0x0b
  g_uperLineLcd[12]='i'; g_uperLineLcd[13]='o'; g_uperLineLcd[14]='n';
    2ffc:	d4 86       	std	Z+12, r13	; 0x0c
    2ffe:	8f e6       	ldi	r24, 0x6F	; 111
    3000:	85 87       	std	Z+13, r24	; 0x0d
    3002:	b6 86       	std	Z+14, r11	; 0x0e
  g_uperLineLcd[15]=' ';
    3004:	f7 86       	std	Z+15, r15	; 0x0f
  g_lowerLineLcd[0]='['; g_lowerLineLcd[1]='='; g_lowerLineLcd[2]='=';
    3006:	c2 ef       	ldi	r28, 0xF2	; 242
    3008:	d1 e0       	ldi	r29, 0x01	; 1
    300a:	8b e5       	ldi	r24, 0x5B	; 91
    300c:	88 83       	st	Y, r24
    300e:	0f 2e       	mov	r0, r31
    3010:	fd e3       	ldi	r31, 0x3D	; 61
    3012:	ef 2e       	mov	r14, r31
    3014:	f0 2d       	mov	r31, r0
    3016:	e9 82       	std	Y+1, r14	; 0x01
    3018:	ea 82       	std	Y+2, r14	; 0x02
  g_lowerLineLcd[3]=' '; g_lowerLineLcd[4]=' '; g_lowerLineLcd[5]=' ';
    301a:	fb 82       	std	Y+3, r15	; 0x03
    301c:	fc 82       	std	Y+4, r15	; 0x04
    301e:	fd 82       	std	Y+5, r15	; 0x05
  g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]=' ';
    3020:	fe 82       	std	Y+6, r15	; 0x06
    3022:	ff 82       	std	Y+7, r15	; 0x07
    3024:	f8 86       	std	Y+8, r15	; 0x08
  g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]=' ';
    3026:	f9 86       	std	Y+9, r15	; 0x09
    3028:	fa 86       	std	Y+10, r15	; 0x0a
    302a:	fb 86       	std	Y+11, r15	; 0x0b
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]=' ';
    302c:	fc 86       	std	Y+12, r15	; 0x0c
    302e:	fd 86       	std	Y+13, r15	; 0x0d
    3030:	fe 86       	std	Y+14, r15	; 0x0e
  g_lowerLineLcd[15]=']';
    3032:	8d e5       	ldi	r24, 0x5D	; 93
    3034:	8f 87       	std	Y+15, r24	; 0x0f
  printLcdU();
    3036:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    303a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    303e:	ff ef       	ldi	r31, 0xFF	; 255
    3040:	29 e6       	ldi	r18, 0x69	; 105
    3042:	88 e1       	ldi	r24, 0x18	; 24
    3044:	f1 50       	subi	r31, 0x01	; 1
    3046:	20 40       	sbci	r18, 0x00	; 0
    3048:	80 40       	sbci	r24, 0x00	; 0
    304a:	e1 f7       	brne	.-8      	; 0x3044 <initializationSystem+0xe2>
    304c:	00 c0       	rjmp	.+0      	; 0x304e <initializationSystem+0xec>
    304e:	00 00       	nop
  _delay_ms(1000);
  initialExternalInteruprt();
    3050:	0e 94 6e 17 	call	0x2edc	; 0x2edc <initialExternalInteruprt>
  g_lowerLineLcd[3]='='; g_lowerLineLcd[4]='='; g_lowerLineLcd[5]='=';
    3054:	eb 82       	std	Y+3, r14	; 0x03
    3056:	ec 82       	std	Y+4, r14	; 0x04
    3058:	ed 82       	std	Y+5, r14	; 0x05
  printLcdL();
    305a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    305e:	9f ef       	ldi	r25, 0xFF	; 255
    3060:	e6 e1       	ldi	r30, 0x16	; 22
    3062:	f1 e1       	ldi	r31, 0x11	; 17
    3064:	91 50       	subi	r25, 0x01	; 1
    3066:	e0 40       	sbci	r30, 0x00	; 0
    3068:	f0 40       	sbci	r31, 0x00	; 0
    306a:	e1 f7       	brne	.-8      	; 0x3064 <initializationSystem+0x102>
    306c:	00 c0       	rjmp	.+0      	; 0x306e <initializationSystem+0x10c>
    306e:	00 00       	nop
  _delay_ms(700);
  initialTimer0();
    3070:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <initialTimer0>
  g_lowerLineLcd[6]='='; g_lowerLineLcd[7]='='; g_lowerLineLcd[8]='=';
    3074:	ee 82       	std	Y+6, r14	; 0x06
    3076:	ef 82       	std	Y+7, r14	; 0x07
    3078:	e8 86       	std	Y+8, r14	; 0x08
  printLcdL();
    307a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  g_lowerLineLcd[9]='='; g_lowerLineLcd[10]='='; g_lowerLineLcd[11]='=';
    307e:	e9 86       	std	Y+9, r14	; 0x09
    3080:	ea 86       	std	Y+10, r14	; 0x0a
    3082:	eb 86       	std	Y+11, r14	; 0x0b
    3084:	2f ef       	ldi	r18, 0xFF	; 255
    3086:	81 ee       	ldi	r24, 0xE1	; 225
    3088:	94 e0       	ldi	r25, 0x04	; 4
    308a:	21 50       	subi	r18, 0x01	; 1
    308c:	80 40       	sbci	r24, 0x00	; 0
    308e:	90 40       	sbci	r25, 0x00	; 0
    3090:	e1 f7       	brne	.-8      	; 0x308a <initializationSystem+0x128>
    3092:	00 c0       	rjmp	.+0      	; 0x3094 <initializationSystem+0x132>
    3094:	00 00       	nop
  _delay_ms(200);
  printLcdL();
    3096:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    309a:	ef ef       	ldi	r30, 0xFF	; 255
    309c:	f9 e6       	ldi	r31, 0x69	; 105
    309e:	28 e1       	ldi	r18, 0x18	; 24
    30a0:	e1 50       	subi	r30, 0x01	; 1
    30a2:	f0 40       	sbci	r31, 0x00	; 0
    30a4:	20 40       	sbci	r18, 0x00	; 0
    30a6:	e1 f7       	brne	.-8      	; 0x30a0 <initializationSystem+0x13e>
    30a8:	00 c0       	rjmp	.+0      	; 0x30aa <initializationSystem+0x148>
    30aa:	00 00       	nop
  _delay_ms(1000);
  initSPI(9600);
    30ac:	80 e8       	ldi	r24, 0x80	; 128
    30ae:	95 e2       	ldi	r25, 0x25	; 37
    30b0:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <initSPI>
  g_lowerLineLcd[12]='='; g_lowerLineLcd[13]='='; g_lowerLineLcd[14]='=';
    30b4:	ec 86       	std	Y+12, r14	; 0x0c
    30b6:	ed 86       	std	Y+13, r14	; 0x0d
    30b8:	ee 86       	std	Y+14, r14	; 0x0e
  printLcdL();
    30ba:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    30be:	8f ef       	ldi	r24, 0xFF	; 255
    30c0:	96 e1       	ldi	r25, 0x16	; 22
    30c2:	e1 e1       	ldi	r30, 0x11	; 17
    30c4:	81 50       	subi	r24, 0x01	; 1
    30c6:	90 40       	sbci	r25, 0x00	; 0
    30c8:	e0 40       	sbci	r30, 0x00	; 0
    30ca:	e1 f7       	brne	.-8      	; 0x30c4 <initializationSystem+0x162>
    30cc:	00 c0       	rjmp	.+0      	; 0x30ce <initializationSystem+0x16c>
    30ce:	00 00       	nop
  _delay_ms(700);
  g_uperLineLcd[0]='P'; g_uperLineLcd[1]='l'; g_uperLineLcd[2]='e';
    30d0:	80 e5       	ldi	r24, 0x50	; 80
    30d2:	f8 01       	movw	r30, r16
    30d4:	80 83       	st	Z, r24
    30d6:	81 82       	std	Z+1, r8	; 0x01
    30d8:	85 e6       	ldi	r24, 0x65	; 101
    30da:	82 83       	std	Z+2, r24	; 0x02
  g_uperLineLcd[3]='a'; g_uperLineLcd[4]='s'; g_uperLineLcd[5]='e';
    30dc:	a3 82       	std	Z+3, r10	; 0x03
    30de:	23 e7       	ldi	r18, 0x73	; 115
    30e0:	24 83       	std	Z+4, r18	; 0x04
    30e2:	85 83       	std	Z+5, r24	; 0x05
  g_uperLineLcd[6]=' '; g_uperLineLcd[7]='I'; g_uperLineLcd[8]='n';
    30e4:	f6 82       	std	Z+6, r15	; 0x06
    30e6:	97 82       	std	Z+7, r9	; 0x07
    30e8:	b0 86       	std	Z+8, r11	; 0x08
  g_uperLineLcd[9]='i'; g_uperLineLcd[10]='t'; g_uperLineLcd[11]=' ';
    30ea:	d1 86       	std	Z+9, r13	; 0x09
    30ec:	c2 86       	std	Z+10, r12	; 0x0a
    30ee:	f3 86       	std	Z+11, r15	; 0x0b
  g_uperLineLcd[12]='T'; g_uperLineLcd[13]='i'; g_uperLineLcd[14]='m';
    30f0:	34 e5       	ldi	r19, 0x54	; 84
    30f2:	34 87       	std	Z+12, r19	; 0x0c
    30f4:	d5 86       	std	Z+13, r13	; 0x0d
    30f6:	9d e6       	ldi	r25, 0x6D	; 109
    30f8:	96 87       	std	Z+14, r25	; 0x0e
  g_uperLineLcd[15]='e';
    30fa:	87 87       	std	Z+15, r24	; 0x0f
  g_lowerLineLcd[0]='T'; g_lowerLineLcd[1]='i'; g_lowerLineLcd[2]='m';
    30fc:	38 83       	st	Y, r19
    30fe:	d9 82       	std	Y+1, r13	; 0x01
    3100:	9a 83       	std	Y+2, r25	; 0x02
  g_lowerLineLcd[3]='e'; g_lowerLineLcd[4]=':'; g_lowerLineLcd[5]=' ';
    3102:	8b 83       	std	Y+3, r24	; 0x03
    3104:	8a e3       	ldi	r24, 0x3A	; 58
    3106:	8c 83       	std	Y+4, r24	; 0x04
    3108:	fd 82       	std	Y+5, r15	; 0x05
  g_lowerLineLcd[6]=' '; g_lowerLineLcd[7]=' '; g_lowerLineLcd[8]='h';
    310a:	fe 82       	std	Y+6, r15	; 0x06
    310c:	ff 82       	std	Y+7, r15	; 0x07
    310e:	88 e6       	ldi	r24, 0x68	; 104
    3110:	88 87       	std	Y+8, r24	; 0x08
  g_lowerLineLcd[9]=' '; g_lowerLineLcd[10]=' '; g_lowerLineLcd[11]='m';
    3112:	f9 86       	std	Y+9, r15	; 0x09
    3114:	fa 86       	std	Y+10, r15	; 0x0a
    3116:	9b 87       	std	Y+11, r25	; 0x0b
  g_lowerLineLcd[12]=' '; g_lowerLineLcd[13]=' '; g_lowerLineLcd[14]='s';
    3118:	fc 86       	std	Y+12, r15	; 0x0c
    311a:	fd 86       	std	Y+13, r15	; 0x0d
    311c:	2e 87       	std	Y+14, r18	; 0x0e
  g_lowerLineLcd[15]=' ';
    311e:	ff 86       	std	Y+15, r15	; 0x0f
  printLcdU();
    3120:	0e 94 51 04 	call	0x8a2	; 0x8a2 <printLcdU>
  printLcdL();
    3124:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
  SREG |= 0x80;  //Global interrupt enable
    3128:	8f b7       	in	r24, 0x3f	; 63
    312a:	80 68       	ori	r24, 0x80	; 128
    312c:	8f bf       	out	0x3f, r24	; 63
  buzzer(1);
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
    3134:	ff e7       	ldi	r31, 0x7F	; 127
    3136:	28 e3       	ldi	r18, 0x38	; 56
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	f1 50       	subi	r31, 0x01	; 1
    313c:	20 40       	sbci	r18, 0x00	; 0
    313e:	80 40       	sbci	r24, 0x00	; 0
    3140:	e1 f7       	brne	.-8      	; 0x313a <initializationSystem+0x1d8>
    3142:	00 c0       	rjmp	.+0      	; 0x3144 <initializationSystem+0x1e2>
    3144:	00 00       	nop
  _delay_ms(50);
  buzzer(0);
    3146:	80 e0       	ldi	r24, 0x00	; 0
    3148:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <buzzer>
  char runLocal = 1;
  unsigned char keyTempLocal = 0;
  unsigned char tempHour = 0;
  unsigned char tempMinute = 0;
  unsigned char tempSec = 0;
  unsigned counterTemp = 0;
    314c:	c0 e0       	ldi	r28, 0x00	; 0
    314e:	d0 e0       	ldi	r29, 0x00	; 0
  buzzer(0);
  char runLocal = 1;
  unsigned char keyTempLocal = 0;
  unsigned char tempHour = 0;
  unsigned char tempMinute = 0;
  unsigned char tempSec = 0;
    3150:	f1 2c       	mov	r15, r1
  _delay_ms(50);
  buzzer(0);
  char runLocal = 1;
  unsigned char keyTempLocal = 0;
  unsigned char tempHour = 0;
  unsigned char tempMinute = 0;
    3152:	e1 2c       	mov	r14, r1
  buzzer(1);
  _delay_ms(50);
  buzzer(0);
  char runLocal = 1;
  unsigned char keyTempLocal = 0;
  unsigned char tempHour = 0;
    3154:	00 e0       	ldi	r16, 0x00	; 0
  printLcdL();
  SREG |= 0x80;  //Global interrupt enable
  buzzer(1);
  _delay_ms(50);
  buzzer(0);
  char runLocal = 1;
    3156:	11 e0       	ldi	r17, 0x01	; 1
  unsigned char tempHour = 0;
  unsigned char tempMinute = 0;
  unsigned char tempSec = 0;
  unsigned counterTemp = 0;
  do{
    keyTempLocal = scanKeyInside();
    3158:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <scanKeyInside>
    if(keyTempLocal == 0x23){
    315c:	83 32       	cpi	r24, 0x23	; 35
    315e:	39 f4       	brne	.+14     	; 0x316e <initializationSystem+0x20c>
      runLocal = 0;
      g_timeSys.hour = tempHour;
    3160:	e2 e0       	ldi	r30, 0x02	; 2
    3162:	f2 e0       	ldi	r31, 0x02	; 2
    3164:	03 83       	std	Z+3, r16	; 0x03
      g_timeSys.minute = tempMinute;
    3166:	e2 82       	std	Z+2, r14	; 0x02
      g_timeSys.sec = tempSec;
    3168:	f1 82       	std	Z+1, r15	; 0x01
  unsigned char tempSec = 0;
  unsigned counterTemp = 0;
  do{
    keyTempLocal = scanKeyInside();
    if(keyTempLocal == 0x23){
      runLocal = 0;
    316a:	10 e0       	ldi	r17, 0x00	; 0
    316c:	63 c0       	rjmp	.+198    	; 0x3234 <initializationSystem+0x2d2>
      g_timeSys.hour = tempHour;
      g_timeSys.minute = tempMinute;
      g_timeSys.sec = tempSec;
    }else if(keyTempLocal >= 0x30 && keyTempLocal <= 0x39){
    316e:	90 ed       	ldi	r25, 0xD0	; 208
    3170:	98 0f       	add	r25, r24
    3172:	9a 30       	cpi	r25, 0x0A	; 10
    3174:	08 f0       	brcs	.+2      	; 0x3178 <initializationSystem+0x216>
    3176:	5a c0       	rjmp	.+180    	; 0x322c <initializationSystem+0x2ca>
      if(counterTemp == 0){
    3178:	20 97       	sbiw	r28, 0x00	; 0
    317a:	59 f4       	brne	.+22     	; 0x3192 <initializationSystem+0x230>
        g_lowerLineLcd[6] = keyTempLocal;
    317c:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <g_lowerLineLcd+0x6>
        tempHour = (keyTempLocal-0x30)*10;
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	c0 97       	sbiw	r24, 0x30	; 48
    3184:	88 0f       	add	r24, r24
    3186:	08 2f       	mov	r16, r24
    3188:	00 0f       	add	r16, r16
    318a:	00 0f       	add	r16, r16
    318c:	08 0f       	add	r16, r24
        counterTemp ++;
    318e:	21 96       	adiw	r28, 0x01	; 1
    3190:	45 c0       	rjmp	.+138    	; 0x321c <initializationSystem+0x2ba>
      }else if(counterTemp == 1){
    3192:	c1 30       	cpi	r28, 0x01	; 1
    3194:	d1 05       	cpc	r29, r1
    3196:	39 f4       	brne	.+14     	; 0x31a6 <initializationSystem+0x244>
        g_lowerLineLcd[7] = keyTempLocal;
    3198:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <g_lowerLineLcd+0x7>
        tempHour += keyTempLocal-0x30;
    319c:	80 0f       	add	r24, r16
    319e:	00 ed       	ldi	r16, 0xD0	; 208
    31a0:	08 0f       	add	r16, r24
        counterTemp ++;
    31a2:	21 96       	adiw	r28, 0x01	; 1
    31a4:	3b c0       	rjmp	.+118    	; 0x321c <initializationSystem+0x2ba>
      }else if(counterTemp == 2){
    31a6:	c2 30       	cpi	r28, 0x02	; 2
    31a8:	d1 05       	cpc	r29, r1
    31aa:	69 f4       	brne	.+26     	; 0x31c6 <initializationSystem+0x264>
        g_lowerLineLcd[9] = keyTempLocal;
    31ac:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <g_lowerLineLcd+0x9>
        tempMinute = (keyTempLocal-0x30)*10;
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	20 53       	subi	r18, 0x30	; 48
    31b6:	31 09       	sbc	r19, r1
    31b8:	22 0f       	add	r18, r18
    31ba:	e2 2e       	mov	r14, r18
    31bc:	ee 0c       	add	r14, r14
    31be:	ee 0c       	add	r14, r14
    31c0:	e2 0e       	add	r14, r18
        counterTemp ++;
    31c2:	21 96       	adiw	r28, 0x01	; 1
    31c4:	2b c0       	rjmp	.+86     	; 0x321c <initializationSystem+0x2ba>
      }else if(counterTemp == 3){
    31c6:	c3 30       	cpi	r28, 0x03	; 3
    31c8:	d1 05       	cpc	r29, r1
    31ca:	59 f4       	brne	.+22     	; 0x31e2 <initializationSystem+0x280>
        g_lowerLineLcd[10] = keyTempLocal;
    31cc:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <g_lowerLineLcd+0xa>
        tempMinute += keyTempLocal - 0x30;
    31d0:	2e 2d       	mov	r18, r14
    31d2:	28 0f       	add	r18, r24
    31d4:	0f 2e       	mov	r0, r31
    31d6:	f0 ed       	ldi	r31, 0xD0	; 208
    31d8:	ef 2e       	mov	r14, r31
    31da:	f0 2d       	mov	r31, r0
    31dc:	e2 0e       	add	r14, r18
        counterTemp ++;
    31de:	21 96       	adiw	r28, 0x01	; 1
    31e0:	1d c0       	rjmp	.+58     	; 0x321c <initializationSystem+0x2ba>
      }else if(counterTemp == 4){
    31e2:	c4 30       	cpi	r28, 0x04	; 4
    31e4:	d1 05       	cpc	r29, r1
    31e6:	69 f4       	brne	.+26     	; 0x3202 <initializationSystem+0x2a0>
        g_lowerLineLcd[12] = keyTempLocal;
    31e8:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <g_lowerLineLcd+0xc>
        tempSec = (keyTempLocal-0x30)*10;
    31ec:	48 2f       	mov	r20, r24
    31ee:	50 e0       	ldi	r21, 0x00	; 0
    31f0:	40 53       	subi	r20, 0x30	; 48
    31f2:	51 09       	sbc	r21, r1
    31f4:	44 0f       	add	r20, r20
    31f6:	f4 2e       	mov	r15, r20
    31f8:	ff 0c       	add	r15, r15
    31fa:	ff 0c       	add	r15, r15
    31fc:	f4 0e       	add	r15, r20
        counterTemp ++;
    31fe:	21 96       	adiw	r28, 0x01	; 1
    3200:	0d c0       	rjmp	.+26     	; 0x321c <initializationSystem+0x2ba>
      }else if(counterTemp == 5){
    3202:	c5 30       	cpi	r28, 0x05	; 5
    3204:	d1 05       	cpc	r29, r1
    3206:	51 f4       	brne	.+20     	; 0x321c <initializationSystem+0x2ba>
        g_lowerLineLcd[13] = keyTempLocal;
    3208:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <g_lowerLineLcd+0xd>
        tempSec += keyTempLocal - 0x30;
    320c:	4f 2d       	mov	r20, r15
    320e:	48 0f       	add	r20, r24
    3210:	0f 2e       	mov	r0, r31
    3212:	f0 ed       	ldi	r31, 0xD0	; 208
    3214:	ff 2e       	mov	r15, r31
    3216:	f0 2d       	mov	r31, r0
    3218:	f4 0e       	add	r15, r20
        counterTemp ++;
    321a:	21 96       	adiw	r28, 0x01	; 1
      }
      if(counterTemp == 6) counterTemp = 0;
    321c:	c6 30       	cpi	r28, 0x06	; 6
    321e:	d1 05       	cpc	r29, r1
    3220:	11 f4       	brne	.+4      	; 0x3226 <initializationSystem+0x2c4>
    3222:	c0 e0       	ldi	r28, 0x00	; 0
    3224:	d0 e0       	ldi	r29, 0x00	; 0
      printLcdL();
    3226:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <initializationSystem+0x2d2>
    }else if(keyTempLocal != 0xff){
    322c:	8f 3f       	cpi	r24, 0xFF	; 255
    322e:	11 f0       	breq	.+4      	; 0x3234 <initializationSystem+0x2d2>
      printLcdL();
    3230:	0e 94 63 04 	call	0x8c6	; 0x8c6 <printLcdL>
    }
  }while(runLocal);
    3234:	11 11       	cpse	r17, r1
    3236:	90 cf       	rjmp	.-224    	; 0x3158 <initializationSystem+0x1f6>
}
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	df 90       	pop	r13
    3246:	cf 90       	pop	r12
    3248:	bf 90       	pop	r11
    324a:	af 90       	pop	r10
    324c:	9f 90       	pop	r9
    324e:	8f 90       	pop	r8
    3250:	08 95       	ret

00003252 <main>:
}
//End define interrupt function

//==========================================MAIN FUNCTION =====================================
int main(){
  L_RESET:  initializationSystem();
    3252:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <initializationSystem>
  initState0();
    3256:	0e 94 8d 04 	call	0x91a	; 0x91a <initState0>
  USART_Transmit('o');
    325a:	8f e6       	ldi	r24, 0x6F	; 111
    325c:	0e 94 2a 01 	call	0x254	; 0x254 <USART_Transmit>
  while(1){
    operationSystem(0);
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	0e 94 fe 07 	call	0xffc	; 0xffc <operationSystem>
    operationLcd(0);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	0e 94 28 0c 	call	0x1850	; 0x1850 <operationLcd>
    if((PINB&(1<<4))==0){
    326c:	1c 99       	sbic	0x03, 4	; 3
    326e:	f8 cf       	rjmp	.-16     	; 0x3260 <main+0xe>
      testLight();
    3270:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <testLight>
      while((PINB&(1<<4))==0){
    3274:	02 c0       	rjmp	.+4      	; 0x327a <main+0x28>
        stateTest();
    3276:	0e 94 34 17 	call	0x2e68	; 0x2e68 <stateTest>
  while(1){
    operationSystem(0);
    operationLcd(0);
    if((PINB&(1<<4))==0){
      testLight();
      while((PINB&(1<<4))==0){
    327a:	1c 9b       	sbis	0x03, 4	; 3
    327c:	fc cf       	rjmp	.-8      	; 0x3276 <main+0x24>
        stateTest();
      }
      if(g_stateCodeLcd == 2){
    327e:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <g_stateCodeLcd>
    3282:	82 30       	cpi	r24, 0x02	; 2
    3284:	69 f7       	brne	.-38     	; 0x3260 <main+0xe>
        initStateLcd2();
    3286:	0e 94 a4 07 	call	0xf48	; 0xf48 <initStateLcd2>
    328a:	ea cf       	rjmp	.-44     	; 0x3260 <main+0xe>

0000328c <__divmodsi4>:
    328c:	05 2e       	mov	r0, r21
    328e:	97 fb       	bst	r25, 7
    3290:	1e f4       	brtc	.+6      	; 0x3298 <__divmodsi4+0xc>
    3292:	00 94       	com	r0
    3294:	0e 94 5d 19 	call	0x32ba	; 0x32ba <__negsi2>
    3298:	57 fd       	sbrc	r21, 7
    329a:	07 d0       	rcall	.+14     	; 0x32aa <__divmodsi4_neg2>
    329c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__udivmodsi4>
    32a0:	07 fc       	sbrc	r0, 7
    32a2:	03 d0       	rcall	.+6      	; 0x32aa <__divmodsi4_neg2>
    32a4:	4e f4       	brtc	.+18     	; 0x32b8 <__divmodsi4_exit>
    32a6:	0c 94 5d 19 	jmp	0x32ba	; 0x32ba <__negsi2>

000032aa <__divmodsi4_neg2>:
    32aa:	50 95       	com	r21
    32ac:	40 95       	com	r20
    32ae:	30 95       	com	r19
    32b0:	21 95       	neg	r18
    32b2:	3f 4f       	sbci	r19, 0xFF	; 255
    32b4:	4f 4f       	sbci	r20, 0xFF	; 255
    32b6:	5f 4f       	sbci	r21, 0xFF	; 255

000032b8 <__divmodsi4_exit>:
    32b8:	08 95       	ret

000032ba <__negsi2>:
    32ba:	90 95       	com	r25
    32bc:	80 95       	com	r24
    32be:	70 95       	com	r23
    32c0:	61 95       	neg	r22
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
    32c4:	8f 4f       	sbci	r24, 0xFF	; 255
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	08 95       	ret

000032ca <__udivmodsi4>:
    32ca:	a1 e2       	ldi	r26, 0x21	; 33
    32cc:	1a 2e       	mov	r1, r26
    32ce:	aa 1b       	sub	r26, r26
    32d0:	bb 1b       	sub	r27, r27
    32d2:	fd 01       	movw	r30, r26
    32d4:	0d c0       	rjmp	.+26     	; 0x32f0 <__udivmodsi4_ep>

000032d6 <__udivmodsi4_loop>:
    32d6:	aa 1f       	adc	r26, r26
    32d8:	bb 1f       	adc	r27, r27
    32da:	ee 1f       	adc	r30, r30
    32dc:	ff 1f       	adc	r31, r31
    32de:	a2 17       	cp	r26, r18
    32e0:	b3 07       	cpc	r27, r19
    32e2:	e4 07       	cpc	r30, r20
    32e4:	f5 07       	cpc	r31, r21
    32e6:	20 f0       	brcs	.+8      	; 0x32f0 <__udivmodsi4_ep>
    32e8:	a2 1b       	sub	r26, r18
    32ea:	b3 0b       	sbc	r27, r19
    32ec:	e4 0b       	sbc	r30, r20
    32ee:	f5 0b       	sbc	r31, r21

000032f0 <__udivmodsi4_ep>:
    32f0:	66 1f       	adc	r22, r22
    32f2:	77 1f       	adc	r23, r23
    32f4:	88 1f       	adc	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	1a 94       	dec	r1
    32fa:	69 f7       	brne	.-38     	; 0x32d6 <__udivmodsi4_loop>
    32fc:	60 95       	com	r22
    32fe:	70 95       	com	r23
    3300:	80 95       	com	r24
    3302:	90 95       	com	r25
    3304:	9b 01       	movw	r18, r22
    3306:	ac 01       	movw	r20, r24
    3308:	bd 01       	movw	r22, r26
    330a:	cf 01       	movw	r24, r30
    330c:	08 95       	ret

0000330e <_exit>:
    330e:	f8 94       	cli

00003310 <__stop_program>:
    3310:	ff cf       	rjmp	.-2      	; 0x3310 <__stop_program>
